/*
 * Copyright (C) 2008 Esmertec AG.
 * Copyright (C) 2008 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.mms.ui;

import static android.content.res.Configuration.KEYBOARDHIDDEN_NO;
import static com.android.mms.transaction.ProgressCallbackEntity.PROGRESS_ABORT;
import static com.android.mms.transaction.ProgressCallbackEntity.PROGRESS_COMPLETE;
import static com.android.mms.transaction.ProgressCallbackEntity.PROGRESS_START;
import static com.android.mms.transaction.ProgressCallbackEntity.PROGRESS_STATUS_ACTION;
import static com.android.mms.ui.MessageListAdapter.COLUMN_ID;
import static com.android.mms.ui.MessageListAdapter.COLUMN_MMS_LOCKED;
import static com.android.mms.ui.MessageListAdapter.COLUMN_MSG_TYPE;
import static com.android.mms.ui.MessageListAdapter.PROJECTION;
// Aurora xuyong 2014-05-30 added for multisim feature start
import gionee.telephony.AuroraTelephoneManager;
import gionee.provider.GnCallLog.Calls;
// Aurora xuyong 2014-05-30 added for multisim feature end
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Field;
import java.lang.ref.WeakReference;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;
// Aurora xuyong 2014-08-21 modified for code optimizing start
import java.util.TreeMap;
// Aurora xuyong 2014-08-21 modified for code optimizing end
// Aurora xuyong 2014-06-06 added for bug #5369 start
import android.content.res.XmlResourceParser;
import org.xmlpull.v1.XmlPullParserException;
// Aurora xuyong 2014-06-06 added for bug #5369 end
import android.R.anim;
import android.R.integer;
import android.R.string;
import android.app.ActionBar;
// Aurora xuyong 2013-09-17 added for aurora's new feature start 
import aurora.widget.AuroraActionBar;
//Aurora xuyong 2013-09-20 added for aurora's new feature start
import aurora.widget.AuroraMenu;
//Aurora xuyong 2013-09-20 added for aurora's new feature end
import aurora.widget.AuroraActionBar.OnAuroraActionBarItemClickListener;
// Aurora xuyong 2013-09-23 added for aurora's new feature start
import aurora.widget.AuroraActionBar.OnAuroraActionBarBackItemClickListener;
// Aurora xuyong 2013-09-23 added for aurora's new feature end
import aurora.widget.AuroraActionBarItem;
// Aurora liugj 2013-10-09 modified for aurora's new feature start
import aurora.widget.AuroraMenuBase.OnAuroraMenuItemClickListener;
// Aurora liugj 2013-10-09 modified for aurora's new feature end
// Aurora xuyong 2013-09-17 added for aurora's new feature end
// Aurora xuyong 2014-07-02 added for reject feature start
import aurora.widget.AuroraCustomMenu.OnMenuItemClickLisener;
// Aurora xuyong 2014-07-02 added for reject feature end
import aurora.app.AuroraActivity;
import aurora.app.AuroraAlertDialog;
import aurora.app.AuroraProgressDialog;
import android.content.ActivityNotFoundException;
import android.content.AsyncQueryHandler;
import android.content.BroadcastReceiver;
import android.content.ContentResolver;
import android.content.ContentUris;
import android.content.ContentValues;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.ServiceConnection;
import android.content.DialogInterface.OnClickListener;
// Aurora xuyong 2014-06-06 added for bug #5369 start
import android.content.res.ColorStateList;
// Aurora xuyong 2014-06-06 added for bug #5369 end
import android.content.res.Configuration;
import android.content.res.Resources;
// Aurora xuyong 2014-05-23 added for multisim feature start
import android.database.ContentObserver;
// Aurora xuyong 2014-05-23 added for multisim feature end
import android.database.Cursor;
import android.database.sqlite.SQLiteException;
import android.database.sqlite.SqliteWrapper;
import com.android.mms.drm.moblie1.DrmException;
import com.android.mms.drm.moblie1.DrmRawContent;
import android.graphics.drawable.Drawable;
import android.media.RingtoneManager;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.os.Parcelable;
import android.os.SystemClock;
import android.os.SystemProperties;
import android.provider.ContactsContract;
import android.provider.ContactsContract.CommonDataKinds.Email;
import android.provider.ContactsContract.CommonDataKinds.Phone;
import android.provider.ContactsContract.Contacts;
import android.provider.ContactsContract.Intents;
import com.android.mms.drm.moblie1.DrmStore;
import android.provider.MediaStore;
import android.provider.Settings;
// Aurora xuyong 2014-03-31 added for aurora's new feature start
import android.provider.Telephony.Threads;
// Aurora xuyong 2014-03-31 added for aurora's new feature end
import gionee.provider.GnSettings;
import aurora.provider.AuroraSettings;
import android.provider.MediaStore.Images;
import android.provider.MediaStore.Video;
import gionee.provider.GnTelephony.Sms;
import gionee.provider.GnTelephony.Mms;
import gionee.provider.GnTelephony.MmsSms;
import gionee.provider.GnTelephony;
import com.android.mms.util.PhoneNumberUtils;
import android.telephony.SmsMessage;
import android.telephony.TelephonyManager;
import android.text.format.DateFormat;
import android.text.Editable;
import android.text.InputFilter;
import android.text.SpannableString;
import android.text.Spanned;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.text.method.TextKeyListener;
import android.text.style.URLSpan;
import android.text.util.Linkify;
import android.util.Log;
import android.view.ContextMenu;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.ViewStub;
import android.view.Window;
import android.view.WindowManager;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.View.OnCreateContextMenuListener;
import android.view.View.OnKeyListener;
import android.view.inputmethod.InputMethodManager;
import android.webkit.MimeTypeMap;
import android.widget.AbsListView;
import android.widget.AdapterView;
import aurora.widget.AuroraEditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import aurora.widget.AuroraListView;
// Aurora xuyong 2014-01-07 added for bug #449 start
import aurora.widget.AuroraListView.AuroraOnSizeChangedListener;
// Aurora xuyong 2014-01-07 added for bug #449 end
import android.widget.Button;
// Aurora xuyong 2013-11-13 added for aurora's new feature start
import android.widget.FrameLayout;
// Aurora xuyong 2013-11-13 added for aurora's new feature end
import android.widget.SimpleAdapter;
import android.widget.CursorAdapter;
import android.widget.TextView;
import android.widget.Toast;
// Aurora xuyong 2013-09-26 added for aurora's new feature start
import android.widget.ListView;
import android.widget.PopupWindow;
import com.aurora.view.AuroraGroupRecipientsAdapter;
// Aurora xuyong 2013-10-14 added for aurora's new feature start 
import com.aurora.view.AuroraMultiLinkAdapter;
// Aurora xuyong 2013-10-14 added for aurora's new feature emd
import android.view.Gravity;
// Aurora xuyong 2013-09-26 added for aurora's new feature end

import com.android.internal.telephony.TelephonyIntents;
import com.android.internal.telephony.TelephonyProperties;
import com.android.mms.LogTag;
import com.android.mms.MmsApp;
import com.android.mms.MmsConfig;
import com.android.mms.R;
import com.android.mms.TempFileProvider;
import com.android.mms.data.Contact;
import com.android.mms.data.ContactList;
import com.android.mms.data.Conversation;
import com.android.mms.data.WorkingMessage;
import com.android.mms.data.WorkingMessage.MessageStatusListener;
//Aurora xuyong 2013-11-15 modified for google adapt start
import com.aurora.android.mms.ContentType;
import com.aurora.gionee.mms.GnContentType;
import com.aurora.android.mms.pdu.EncodedStringValue;
import com.aurora.android.mms.MmsException;
import com.aurora.android.mms.pdu.PduBody;
import com.aurora.android.mms.pdu.PduPart;
import com.aurora.android.mms.pdu.PduPersister;
// Aurora xuyong 2014-03-04 added for aurora's new feature start
import com.aurora.android.mms.pdu.GenericPdu;
import com.aurora.android.mms.pdu.MultimediaMessagePdu;
// Aurora xuyong 2014-03-04 added for aurora's new feature end
import com.aurora.android.mms.pdu.SendReq;
//Aurora xuyong 2013-11-15 modified for google adapt end
import com.android.mms.model.FileAttachmentModel;
// Aurora xuyong 2013-12-11 added for aurora's new feature start
import com.android.mms.model.GroupItemInfoModel;
// Aurora xuyong 2013-12-11 added for aurora's new feature end
import com.android.mms.model.SlideModel;
import com.android.mms.model.SlideshowModel;
import com.android.mms.transaction.MessagingNotification;
import com.android.mms.ui.MessageUtils.ResizeImageResultCallback;
import com.android.mms.ui.RecipientsEditor.RecipientContextMenuInfo;
import com.android.mms.util.DraftCache;
import com.android.mms.util.SendingProgressTokenManager;
import com.android.mms.util.SmileyParser;
// Aurora xuyong 2013-12-11 added for aurora's new feature start
import com.aurora.view.AuroraGroupReciResendAdapter;
// Aurora xuyong 2013-12-11 added for aurora's new feature end

import android.text.InputFilter.LengthFilter;
import com.android.vcard.VCardComposer;
import com.android.vcard.VCardConfig;
import com.android.vcard.exception.VCardException;
// Aurora xuyong 2014-05-23 added for multisim feature start
import android.text.SpannableStringBuilder;
import android.text.Spannable;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import android.text.style.ImageSpan;
// Aurora xuyong 2014-05-23 added for multisim feature end
//a0
import java.io.FileNotFoundException;
import java.util.Arrays;
import java.util.Date;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.Locale;
import java.util.Set;
import java.util.Map.Entry;
// Aurora xuyong 2014-09-09 added for 4.4 feature start
import java.util.Stack;
// Aurora xuyong 2014-09-09 added for 4.4 feature end
import aurora.app.AuroraProgressDialog;
import android.app.StatusBarManager;
import android.content.ComponentName;
import android.content.SharedPreferences;
import android.database.DatabaseUtils;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
// Aurora xuyong 2015-09-14 added for aurora's new feature start
import android.graphics.PixelFormat;
// Aurora xuyong 2015-09-14 added for aurora's new feature end
// Aurora xuyong 2013-09-17 added for aurora's new feature start 
import android.graphics.Typeface;
// Aurora xuyong 2013-09-17 added for aurora's new feature end
import android.graphics.drawable.BitmapDrawable;
import android.media.CamcorderProfile;
import android.os.Looper;
import android.os.RemoteException;
import android.os.ServiceManager;
import android.os.SystemProperties;
import android.os.storage.StorageManager;
// Aurora liugj 2013-11-12 modified for bug-554 start
import gionee.os.storage.GnStorageManager;
// Aurora liugj 2013-11-12 modified for bug-554 end
import android.provider.Browser;
import android.provider.Browser.BookmarkColumns;
import android.provider.ContactsContract.CommonDataKinds;
import android.provider.ContactsContract.CommonDataKinds.StructuredName;
import android.provider.ContactsContract.Data;
import android.provider.ContactsContract.RawContacts;
import android.provider.MediaStore.Audio;
import gionee.telephony.GnTelephonyManager;
import gionee.provider.GnTelephony.SIMInfo;
// Aurora xuyong 2014-05-23 added for multisim feature start
import gionee.provider.GnTelephony.SimInfo;
// Aurora xuyong 2014-05-23 added for multisim feature end
import gionee.telephony.gemini.GnGeminiSmsManager;
import android.telephony.SmsManager;
import android.text.style.AbsoluteSizeSpan;
import android.util.Config;
import android.view.ActionMode;
import android.view.inputmethod.EditorInfo;
import aurora.widget.AuroraButton;
import android.widget.CheckBox;
// Aurora xuyong 2013-12-17 added for aurora's new feature start
import aurora.widget.AuroraCheckBox;
// Aurora xuyong 2013-12-17 added for aurora's new feature end
//import android.widget.RecipientsView.OnRecipientsChangeListener;
import android.widget.RelativeLayout;
import android.widget.AbsListView.OnScrollListener;
import android.view.ViewGroup;

import com.android.mms.transaction.SendTransaction;
import com.android.mms.ExceedMessageSizeException;
import com.android.mms.ui.ConversationList.BaseProgressQueryHandler;
import com.android.mms.util.ThreadCountManager;

import com.android.internal.telephony.IccCard;
import com.android.internal.telephony.ITelephony;
import com.gionee.CellConnService.GnCellConnMgr;
import com.gionee.internal.telephony.GnPhone;
import gionee.telephony.GnSmsManager;
import gionee.telephony.GnSmsMessage;
import gionee.app.GnStatusBarManager;
import gionee.provider.GnTelephony.SimInfo;

import com.aurora.featureoption.FeatureOption;
import com.gionee.internal.telephony.GnTelephonyManagerEx;
import com.android.mms.MmsApp;
import com.gionee.internal.telephony.gemini.GnGeminiPhone;
import com.android.internal.telephony.PhoneFactory;
import com.android.mms.transaction.MmsSystemEventReceiver.OnShutDownListener;
import com.privacymanage.service.AuroraPrivacyUtils;
import com.tencent.qqpimsecure.aidl.GioneeTencentService;

// M: add for read report-start
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import aurora.preference.AuroraPreferenceManager;
import com.android.mms.transaction.TransactionService;
import com.android.mms.transaction.Transaction;
//Aurora xuyong 2013-11-15 modified for google adapt start
import com.aurora.android.mms.pdu.PduHeaders;
//Aurora xuyong 2013-11-15 modified for google adapt end

//gionee gaoj 2012-4-10 added for CR00555790 start
import android.view.View.MeasureSpec;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
// Aurora xuyong 2014-09-16 added for aurora's new feature start
import android.view.animation.ScaleAnimation;
// Aurora xuyong 2014-09-16 added for aurora's new feature end
import android.widget.ViewAnimator;
import com.gionee.mms.data.RecentContact;
import com.gionee.mms.slide.GnIconTextGridPageSlideShower;
import com.gionee.mms.ui.AddReceiptorActivity;
import com.gionee.mms.ui.AddReceiptorTab;
import com.gionee.mms.ui.DraftFragment;
// Aurora liugj 2013-09-24 modified for bug-310 start
//import com.gionee.mms.ui.ConvFragment;
import com.aurora.mms.countmanage.TotalCount;
import com.aurora.mms.ui.AuroraHorizontalListView;
import com.aurora.mms.ui.AuroraHorizontalListAdapter;
import com.aurora.mms.ui.AuroraHotizontalListItem;
import com.aurora.mms.ui.ConvFragment;
// Aurora liugj 2013-09-24 modified for bug-310 end
import com.gionee.mms.ui.TabActivity;
import com.android.mms.ui.GnLinearLayout.OnLocationChangedListener;
import android.util.DisplayMetrics;
import android.os.SystemProperties;
import com.gionee.mms.ui.MsgChooseLockPassword;
import android.opengl.Visibility;
import android.app.admin.DevicePolicyManager;
import android.widget.AbsListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.LinearLayout.LayoutParams;

import com.android.internal.widget.LockPatternUtils;
import com.gionee.mms.data.RecentContact;
import android.widget.ScrollView;
import android.view.View.OnTouchListener;
import android.view.MotionEvent;
//Aurora xuyong 2013-09-20 added for aurora's new feature start
import com.aurora.mms.ui.AuroraMsgDetailActivity;
// Aurora xuyong 2014-07-29 added for aurora's new feature start
import com.aurora.mms.ui.AuroraSendMsgImageView;
// Aurora xuyong 2014-07-29 added for aurora's new feature end
import com.aurora.mms.ui.ClickContent;
// Aurora xuyong 2014-04-29 added for aurora's new feature start
import com.aurora.mms.ui.ThumbnailWorker;
// Aurora xuyong 2014-04-29 added for aurora's new feature end
//Aurora xuyong 2013-09-20 added for aurora's new feature end
import com.android.mms.ui.LinearLayoutFilter;
import android.view.View.MeasureSpec;
import android.util.AttributeSet;
import com.gionee.mms.ui.ContactsCacheSingleton;
import android.graphics.Color;
import android.view.MenuInflater;
/*import android.widget.PopupMenu;*/
//gionee gaoj 2012-4-10 added for CR00555790 end
//gionee zhouyj 2012-05-03 added for CR00588621 start
import com.gionee.mms.ui.AttachmentPickerActivity;
import android.text.Selection;
import aurora.preference.AuroraPreference;
//gionee zhouyj 2012-05-03 added for CR00588621 end
// gionee zhouyj 2012-05-29 add for CR00601178 start
import com.gionee.mms.ui.CustomMenu.DropDownMenu;
import com.gionee.mms.ui.CustomMenu;
import static com.android.mms.ui.MessageListAdapter.COLUMN_SMS_STAR;
import static com.android.mms.ui.MessageListAdapter.COLUMN_SMS_BODY;
import com.android.mms.ui.MessageItem;
import android.view.View.OnLongClickListener;
// gionee zhouyj 2012-05-29 add for CR00601178 end
import com.android.mms.ui.MessageListAdapter;

//gionee gaoj 2012-8-14 added for CR00623375 start
import com.android.mms.data.RecipientIdCache;
import java.util.Calendar;

import com.gionee.mms.popup.PopUpMsgActivity;
import com.gionee.mms.regularlysend.DateTimeDialog;
import com.gionee.mms.regularlysend.RegularlyButtonToolBar;
import com.gionee.mms.regularlysend.RegularlyMainActivity;
import com.gionee.mms.regularlysend.RegularlyButtonToolBar.ToolBarItemClickListener;
import com.gionee.mms.regularlysend.RegularlyMainActivity.MessageInsertListener;
//gionee gaoj 2012-8-14 added for CR00623375 end
//gionee zhouyj 2012-08-16 add for CR00678252 start 
import com.gionee.mms.geolocation.GnLocation;
// gionee zhouyj 2012-08-16 add for CR00678252 end 
//gionee zhouyj 2012-08-27 add for CR00667581 start 
import com.gionee.mms.importexport.ConfigConstantUtils;
import com.gionee.mms.importexport.GnImageTextButton;
//gionee zhouyj 2012-08-27 add for CR00667581 end
//gionee luoguangming 2012.08.29 modify for CR00682236 begin
import com.gionee.mms.ui.GnGetLocationCoordinatesUtil;
//gionee luoguangming 2012.08.29 modify for CR00682236  end 

//gionee luoguangming 2012.08.29 modify for CR00682236 begin
import android.os.SystemProperties;
//gionee luoguangming 2012.08.29 modify for CR00682236  end 
//GIONEE: wangfei 2012 09 24 add for CR00703647
import android.location.LocationManager;

//gionee wangym 2012-11-22 add for CR00735223 start
import com.android.mms.ui.ScaleDetector.OnScaleListener;
import android.view.MotionEvent;
//gionee wangym 2012-11-22 add for CR00735223 end

import android.content.SharedPreferences.Editor;
import com.gionee.mms.ui.SimSelectView;
//import android.telephony.MSimTelephonyManager;
import gionee.content.GnIntent; 
import android.text.ClipboardManager;
import com.android.mms.widget.MmsWidgetProvider;
//gionee zhouyj 2013-03-14 add for CR00782610 start
import gionee.telephony.GnTelephonyManager;
// gionee zhouyj 2013-03-14 add for CR00782610 end

//gionee gaoj 2013-3-26 added for CR00789078 start
/*import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;*/
//gionee gaoj 2013-3-26 added for CR00789078 end

//Gionee <zhouyj> <2013-05-09> add for CR00810588 begin
import android.speech.RecognizerIntent;
import org.json.JSONObject;
//Gionee <zhouyj> <2013-05-09> add for CR00810588 end

//gionee <gaoj> <2013-06-09> add for CR00824605 begin
import android.provider.Contacts.People;
import android.provider.ContactsContract.Intents.Insert;
// Aurora xuyong 2015-10-15 added for aurora's new feature start
import com.aurora.mms.util.AuroraAttachThumbnailWorker;
// Aurora xuyong 2015-10-15 added for aurora's new feature end
//gionee <gaoj> <2013-06-09> add for CR00824605 end
// Aurora xuyong 2014-04-29 added for aurora's new feature start
import com.aurora.mms.util.Utils;
// Aurora xuyong 2014-04-29 added for aurora's new feature end
//Aurora xuyong 2015-04-02 added for android 5.0+ new feature start
import android.telephony.SubscriptionManager;
//Aurora xuyong 2015-04-02 modified for android 5.1+ new feature start
import android.telephony.SubscriptionInfo;
//Aurora xuyong 2015-04-02 modified for android 5.1+ new feature end
//Aurora xuyong 2015-04-02 added for android 5.0+ new feature end
import android.app.LoaderManager;
import android.content.CursorLoader;
import android.content.Loader;
// M: add for read report-end
//a1
/**
 * This is the main UI for:
 * 1. Composing a new message;
 * 2. Viewing/managing message history of a conversation.
 *
 * This activity can handle following parameters from the intent
 * by which it's launched.
 * thread_id long Identify the conversation to be viewed. When creating a
 *         new message, this parameter shouldn't be present.
 * msg_uri Uri The message which should be opened for editing in the editor.
 * address String The addresses of the recipients in current conversation.
 * exit_on_sent boolean Exit this activity after the message is sent.
 */
//m0
/*
public class ComposeMessageActivity extends AuroraActivity
        implements View.OnClickListener, TextView.OnEditorActionListener,
        MessageStatusListener, Contact.UpdateListener {
*/
public class ComposeMessageActivity extends AuroraActivity
        implements View.OnClickListener, TextView.OnEditorActionListener,
        MessageStatusListener, Contact.UpdateListener
//        ,OnRecipientsChangeListener
        //gionee gaoj 2012-5-24 added for CR00588933 CR00628364 start
        /*,PopupMenu.OnMenuItemClickListener*/
        ,View.OnLongClickListener
        //gionee gaoj 2012-5-24 added for CR00588933 CR00628364 end
        // Aurora xuyong 2015-10-09 modified for aurora's new feature start
        ,OnShutDownListener/*, LoaderManager.LoaderCallbacks<Cursor>*/
        // Aurora xuyong 2015-10-09 modified for aurora's new feature end
        {
//m1
    //Gionee <Gaoj> <2013-05-20> delete for CR00809727 begin
    //Gionee <guoyx> <2013-04-20> added for CR00797658 begin
    /*private static int mDrawBottomPanelTimes = 0;*/
    //Gionee <guoyx> <2013-04-20> added for CR00797658 end
    //Gionee <Gaoj> <2013-05-20> delete for CR00809727 end
    public static final int REQUEST_CODE_ATTACH_IMAGE     = 100;
    public static final int REQUEST_CODE_TAKE_PICTURE     = 101;
    public static final int REQUEST_CODE_ATTACH_VIDEO     = 102;
    public static final int REQUEST_CODE_TAKE_VIDEO       = 103;
    public static final int REQUEST_CODE_ATTACH_SOUND     = 104;
    public static final int REQUEST_CODE_RECORD_SOUND     = 105;
    public static final int REQUEST_CODE_CREATE_SLIDESHOW = 106;
    public static final int REQUEST_CODE_ECM_EXIT_DIALOG  = 107;
    public static final int REQUEST_CODE_ADD_CONTACT      = 108;
    public static final int REQUEST_CODE_PICK             = 109;
    public static final int REQUEST_CODE_FOR_MULTIDELETE  = 110;
    // Aurora xuyong 2014-05-07 modified for bug 4693 start
    public static ThumbnailWorker mThumbnailWorker;
    // Aurora xuyong 2014-05-07 modified for bug 4693 end
    // Aurora xuyong 2015-10-15 added for aurora's new feature start
    public static AuroraAttachThumbnailWorker mAuroraAttachThumbnailWorker;
    // Aurora xuyong 2015-10-15 added for aurora's new feature end
    // gionee zhouyj 2012-08-16 add for CR00678252 start 
    public static final int REQUEST_CODE_LOCATION_POI     = 111;
    // gionee zhouyj 2012-08-16 add for CR00678252 end 
    //Gionee <zhouyj> <2013-05-17> add for CR00812110 begin
    public static final int REQUEST_CODE_UPDATE_CONTACT   = 112;
    //Gionee <zhouyj> <2013-05-17> add for CR00812110 end

    public static final int MIN_SIZE_FOR_CAPTURE_VIDEO    = 1024 * 10;  // 10K

    private static final String TAG = "Mms/compose";

    private static final boolean DEBUG = false;
    private static final boolean TRACE = false;
    private static final boolean LOCAL_LOGV = false;

    // Menu ID
    private static final int MENU_ADD_SUBJECT           = 0;
    private static final int MENU_DELETE_THREAD         = 1;
    private static final int MENU_ADD_ATTACHMENT        = 2;
    private static final int MENU_DISCARD               = 3;
    private static final int MENU_SEND                  = 4;
    private static final int MENU_CALL_RECIPIENT        = 5;
    private static final int MENU_CONVERSATION_LIST     = 6;
    private static final int MENU_DEBUG_DUMP            = 7;
    private static final int MENU_ADD_QUICK_TEXT        = 8;
    private static final int MENU_ADD_TEXT_VCARD        = 9;
    private static final int MENU_CALL_RECIPIENT_BY_VT  = 10;

    // Context menu ID
    private static final int MENU_VIEW_CONTACT          = 12;
    private static final int MENU_ADD_TO_CONTACTS       = 13;

    private static final int MENU_EDIT_MESSAGE          = 14;
    private static final int MENU_VIEW_SLIDESHOW        = 16;
    private static final int MENU_VIEW_MESSAGE_DETAILS  = 17;
    private static final int MENU_DELETE_MESSAGE        = 18;
    private static final int MENU_SEARCH                = 19;
    private static final int MENU_DELIVERY_REPORT       = 20;
    private static final int MENU_FORWARD_MESSAGE       = 21;
    private static final int MENU_CALL_BACK             = 22;
    private static final int MENU_SEND_EMAIL            = 23;
    private static final int MENU_COPY_MESSAGE_TEXT     = 24;
    private static final int MENU_COPY_TO_SDCARD        = 25;
    private static final int MENU_INSERT_SMILEY         = 26;
    private static final int MENU_ADD_ADDRESS_TO_CONTACTS = 27;
    private static final int MENU_LOCK_MESSAGE          = 28;
    private static final int MENU_UNLOCK_MESSAGE        = 29;
    private static final int MENU_COPY_TO_DRM_PROVIDER  = 30;
    private static final int MENU_PREFERENCES           = 31;
//MTK_OP01_PROTECT_START
    private static final int MENU_SELECT_TEXT           = 36;
//MTK_OP01_PROTECT_END
    // gionee zhouyj 2012-04-21 add for CR00573852 start
    /*private static final int MENU_ENCRYPTION            = 40;*/
    // gionee zhouyj 2012-04-21 add for CR00573852 end

    //gionee gaoj 2012-8-7 added for CR00671408 start
    /*private static final int MENU_BLACKLIST             = 41;*/
    //gionee gaoj 2012-8-7 added for CR00671408 end
//m0
//    private static final int RECIPIENTS_MAX_LENGTH = 312;
    private static final int RECIPIENTS_MAX_LENGTH      = 5000/*312*/;
//m1

    //Gionee guoyx 20121023 by CR00705464 for MTK ALPS00352418 BEGIN
    private static final int DOUBLECLICK_INTERVAL_TIME  = 2000;
    //Gionee guoyx 20121023 by CR00705464 for MTK ALPS00352418 END
    private static final int MESSAGE_LIST_QUERY_TOKEN   = 9527;
    // Aurora yudingmin 2014-08-30 added for bug 8029 start
    private static final int DELETE_MESSAGE_LIST_QUERY_TOKEN       = 9528;
    // Aurora yudingmin 2014-08-30 added for bug 8029 end
    // Aurora yudingmin 2014-09-03 added for init position start
    private static final int INIT_MESSAGE_LIST_QUERY_TOKEN       = 9529;
    // Aurora yudingmin 2014-09-03 added for init position end
    private static final int DELETE_MESSAGE_TOKEN       = 9700;

    private static final int CHARS_REMAINING_BEFORE_COUNTER_SHOWN = 10;

    private static final long NO_DATE_FOR_DIALOG        = -1L;

    private static final String EXIT_ECM_RESULT         = "exit_ecm_result";
    private static final String SIGN_CREATE_AFTER_KILL_BY_SYSTEM = "ForCreateAfterKilledBySystem";
    // Aurora xuyong 2013-09-17 added for aurora's new feature start 
    private AuroraActionBar mAuroraActionBar;
    //Aurora xuyong 2013-09-20 added for aurora's new feature start
    private AuroraMenu mAuroraMenu;
    //Aurora xuyong 2013-09-20 added for aurora's new feature end
    // Aurora xuyong 2013-09-17 added for aurora's new feature end
    private ContentResolver mContentResolver;

    private BackgroundQueryHandler mBackgroundQueryHandler;
    // Aurora xuyong 2015-10-09 added for aurora's new feature start
    private AttachQueryHandler mAttachQueryHandler;
    // Aurora xuyong 2015-10-09 added for aurora's new feature end
    private Conversation mConversation;     // Conversation we are working in

    private boolean mExitOnSent;            // TODO: mExitOnSent is obsolete -- remove

    private View mTopPanel;                 // View containing the recipient and subject editors
    private View mBottomPanel;              // View containing the text editor, send button, et.
    private AuroraEditText mTextEditor;           // Text editor to type your message into
    private TextView mTextCounter;          // Shows the number of characters used in text editor
    //private TextView mSendButtonMms;        // Press to send mms
    //private ImageButton mSendButtonSms;     // Press to send sms
    private AuroraEditText mSubjectTextEditor;    // Text editor for MMS subject

    private AttachmentEditor mAttachmentEditor;
    private View mAttachmentEditorScrollView;
    // Aurora xuyong 2013-11-13 added for aurora's new feature start
    private FrameLayout mAuroraRecipientsLayout;
    private AuroraListView mRecipientsList;
    // Aurora xuyong 2013-11-13 added for aurora's new feature end
    private MessageListView mMsgListView;        // AuroraListView for messages in this conversation
    public MessageListAdapter mMsgListAdapter;  // and its corresponding ListAdapter

    private RecipientsEditor mRecipientsEditor;  // UI control for editing recipients
    private ImageButton mRecipientsPicker;       // UI control for recipients picker

    private boolean mIsKeyboardOpen;             // Whether the hardware keyboard is visible
    private boolean mIsLandscape;                // Whether we're in landscape mode

    private boolean mPossiblePendingNotification;   // If the message list has changed, we may have
                                                    // a pending notification to deal with.

    private boolean mToastForDraftSave;   // Whether to notify the user that a draft is being saved

    private boolean mSentMessage;       // true if the user has sent a message while in this
                                        // activity. On a new compose message case, when the first
                                        // message is sent is a MMS w/ attachment, the list blanks
                                        // for a second before showing the sent message. But we'd
                                        // think the message list is empty, thus show the recipients
                                        // editor thinking it's a draft message. This flag should
                                        // help clarify the situation.
    
    private boolean mAppendAttachmentSign = false;
    private WorkingMessage mWorkingMessage;         // The message currently being composed.

    private AuroraAlertDialog mSmileyDialog;
    private AuroraProgressDialog mProgressDialog;
    // Aurora xuyong 2014-03-04 added for aurora's new feature start
    private AuroraProgressDialog mPickDialog;
    // Aurora xuyong 2014-03-04 added for aurora's new feature end
    private boolean mWaitingForSubActivity;
    private int mLastRecipientCount;            // Used for warning the user on too many recipients.
    private AttachmentTypeSelectorAdapter mAttachmentTypeSelectorAdapter;

    private boolean mSendingMessage;    // Indicates the current message is sending, and shouldn't send again.

    private Intent mAddContactIntent;   // Intent used to add a new contact

    // State variable indicating an image is being compressed, which may take a while.
    private boolean mCompressingImage = false;

    private String mDebugRecipients;
    public static final String SMS_ADDRESS = "sms_address";
    public static final String SMS_BODY = "sms_body";
    public static final String FORWARD_MESSAGE = "forwarded_message";

    //MTK_OP01_PROTECT_START
    // add for text zoom
    private ImageButton mZoomIn;
    private ImageButton mZoomOut;
    //private final int DEFAULT_TEXT_SIZE = 20;
    private final int TEXT_SIZE_CHANGE = 2;
    private final int MIN_TEXT_SIZE = 10;
    private final int MAX_TEXT_SIZE = 32;
    //private int mCurrentSize = DEFAULT_TEXT_SIZE;
    //MTK_OP01_PROTECT_END
    
    private static final String LEMEIINTENT= "android.intent.action.SENDMini";
    private static final String LEMEIINTENTMULTIPLE = "android.intent.action.SEND_MULTIPLEMini";
    private static final int IMAGE_SIZE_MINI = 100;
    private static final int AUDIO_VIDEO_SIZE_MINI = 300;
    private int mSimDis = -1;
    private boolean mIsLeMei = false;
    
    private int mToastCountForResizeImage = 0; // For indicate whether show toast message for resize image or not. If
                                               // mToastCountForResizeImage equals 0, show toast.
    private int mHomeBox = 0;
    private Toast mExceedSubjectSizeToast = null;
    private Toast mExceedMessageSizeToast = null;

    private SoloAlertDialog mSoloAlertDialog;

    // gionee lwzh add for CR00774362 20130227 begin
    private boolean mNeedUpdateContactForMessageContent = true;
    // gionee lwzh add for CR00774362 20130227 end
    
    //gionee gaoj 2012-4-10 added for CR00555790 start
    private List<String> mGnNumberList = new ArrayList<String>();
    public static final int REQUEST_CODE_ADD_RECEIPTOR    = 119;
    public static final int REQUEST_CODE_INSERT_CONTACT   = 120;
    private static final int MENU_STAR_MESSAGE          = 42;
    private static final int MENU_UNSTAR_MESSAGE        = 43;

    /*private static final int MENU_SET_TOP        = 45;*/
    private static final int MIN_PASSWORD_LENGTH = 4;

    private ContactContainer mContactContainer;
    private ScrollView mContactContainerScroll;
    private final int MIN_LINES = 1;
    // Aurora xuyong 2013-09-17 modified for aurora's new feature start
    // Aurora xuyong 2013-10-17 modified for aurora's new feature start 
    private final int MAX_LINES = 3;
    // Aurora xuyong 2013-10-17 modified for aurora's new feature end
    // Aurora xuyong 2013-09-17 modified for aurora's new feature end

    private String mNumberArea = null;
    private int mMsgCount = 0;

    private View mAttachmentSlideViewHome;
    private View mAttachmentSlideViewCurrent;
    private ViewAnimator mAttachmentSlideView;
    private Animation mLeftInAnimation;
    private Animation mLeftOutAnimation;
    private Animation mRightInAnimation;
    private Animation mRightOutAnimation;
    private View.OnClickListener mEditorOnClickListener;
    // gionee zhouyj 2012-06-28 add for CR00628332 start 
    private View.OnFocusChangeListener mEditorOnFocusChangeListener;
    // gionee zhouyj 2012-06-28 add for CR00628332 end 
    // gionee zhouyj 2012-08-31 add for CR00664323 start 
    private boolean mDeleteAllMessages = false;
    // gionee zhouyj 2012-08-31 add for CR00664323 end 

    private int mExpandThresholdPortrait = 480;
    private int mShrinkThresholdPortrait = 320;
    private boolean mWaitingExpand;
    private boolean mWaitingShrink;
    private ImageButton mAddButton;
    private View mcontactView = null;

    public static final int TEXT_SPACE = 8 * 1024;

    private LinearLayout mLayout;
    private ScrollView mScrollView;
    private View mSubjectDivider;
     // Aurora liugj 2013-11-06 modified for fix bug-426 start 
    private Button mSendMsgButton; //auroraSendButton
    //private TextView mSendMsgText;
     // Aurora liugj 2013-11-06 modified for fix bug-426 end
    // Gionee lixiaohu 2012-08-28 added for CR00681687 start
    // Aurora hujunming 2014-5-14 modified for multiSim    start
    // Aurora xuyong 2014-05-23 modified for multisim feature start
    private ViewStub mMultiSimStub;
    // Aurora xuyong 2014-08-05 added for aurora multisim feature start
    private TextView mMultiTextCounter;
    private TextView mMultiMediaSizeInfo;
    // Aurora xuyong 2014-08-05 added for aurora multisim feature end
    // Aurora xuyong 2014-07-14 added for aurora's new feature start
    // Aurora xuyong 2014-07-29 modified for aurora's new feature start
    private AuroraSendMsgImageView mSendMsgButton1;
    private AuroraSendMsgImageView mSendMsgButton2;
    // Aurora xuyong 2014-07-29 modified for aurora's new feature end
    // Aurora hujunming 2014-5-14 modified for multiSim    end
   // Aurora xuyong 2014-08-25 modified for bug #7912 start
    private GnTelephonyManager mTelephonyManager = GnTelephonyManager.getDefault();
   // Aurora xuyong 2014-08-25 modified for bug #7912 end
    // Gionee lixiaohu 2012-08-28 added for CR00681687 end
    private TextView mediaTextView = null;
    private boolean mShouldMultiAttachThreadStop;

    private boolean mIsFromDraftBox = false;
    private int mOldMsgCount = 0;
    private static final int RESEND_MSG_SELECTED_SIMID = 911;

    private boolean isSelectedAll = false;

    private CheckBox mSelectedAll;
    private boolean mNeedSaveDraft = false;
    private ContextMenu mContextMenu = null;
    //private boolean mIsInit = false;
    private final int CONTACT_HEADER_SHOW_CONTACTS_MAX = 15;
    //gionee gaoj 2012-5-24 added for CR00588933 start
    /*private boolean mMsgListLongClick = false;
    private ViewStub mGnmultiSelectStub;
    private GnImageTextButton mDeleteImageButton;
//    private ImageButton mStarImageButton;
    private GnImageTextButton mCopyImageButton;
    private GnImageTextButton mForwardImageButton;
    private GnImageTextButton mMoreImageButton;
    private PopupMenu popup = null;
    private static final int MENU_EDIT            = 46;*/
    //Gionee <zhouyj> <2013-05-15> add for CR00810588 begin
    private static final int MENU_VOIVE_READ      = 47;
    //Gionee <zhouyj> <2013-05-15> add for CR00810588 end
    // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
    //private TextView mRecipientsCount;
    // Aurora xuyong 2013-09-13 deleted for aurora's new feature end
    //gionee gaoj 2012-5-24 added for CR00588933 end
    //gionee gaoj 2012-4-10 added for CR00555790 end
    //gionee zhouyj 2012-05-04 added for CR00589048 start
    private boolean mSignatureEnable = false;
    private String  mSignatureContent = null;
    //gionee zhouyj 2012-05-04 added for CR00589048 end
    /*private DropDownMenu mSelectionMenu;*/
    //Aurora xuyong 2014-08-16 deleted for aurora's new feature start
    //private boolean mFirstLongClick = false;
    //Aurora xuyong 2014-08-16 deleted for aurora's new feature end
    //private Map<Long, MessageItem> mSelectItems = new HashMap<Long, MessageItem>();
    // gionee zhouyj 2012-07-05 add for CR00637457 start
    private Map<Integer, Boolean > mSelectMap = new HashMap<Integer, Boolean>();
    private Cursor mCurrentCursor;
//    private int mCurrentPos = -1;
    // gionee zhouyj 2012-07-31 add for CR00662484 start 
    private int mClickPos = -1;
    // gionee zhouyj 2012-07-31 add for CR00662484 end 
    private boolean mAllStar = false;
    private boolean mAllMms  = false;
    // Aurora xuyong 2013-12-30 deleted for aurora's ne feature start
    //private LinearLayout mMultiTablLayout;
    // Aurora xuyong 2013-12-30 deleted for aurora's ne feature end
    // gionee lwzh modify for CR00774362 20130227 begin
    // Aurora xuyong 2013-12-30 deleted for aurora's ne feature start
    //private LinearLayout mCustomTabLayout;
    // Aurora xuyong 2013-12-30 deleted for aurora's ne feature end
    private LinearLayout mTitleLayout;
    private LinearLayout mAttachmentLayout;
    // gionee lwzh modify for CR00774362 20130227 begin
    private ImageButton mMenuMoreButton;
    private TextView mTitleName;
    private TextView mTitleNumberArea;
    private ImageButton mCallButton;
    private ImageButton mBackButton;
    // gionee zhouyj 2012-07-05 add for CR00637457 end
    //gionee gaoj 2012-6-26 added for CR00628104 start
    private static boolean isGnForwardMessage = false;
    //gionee gaoj 2012-6-26 added for CR00628104 end
    // gionee zhouyj 2012-06-29 add for CR00632132 start 
    private boolean mSubjectEditorFocus = false;
    private boolean mSubjectEditorNull = false;
    // gionee zhouyj 2012-06-29 add for CR00632132 end  

    //gionee gaoj 2012-8-14 added for CR00623375 CR00678407 start
    private DateTimeDialog mDateTimeDialog;
    private RegularlyMainActivity mRegularlyMain;
    //private TextView mRegButton;
    private RegularlyButtonToolBar mRegularlyToolBar;
    private boolean mIsReSetTime;
    private MessageItem mRegularlyMsgItem;
    private long mRegularlyTime;
    //gionee gaoj 2012-8-14 added for CR00623375 CR00678407 end
    
    // gionee zhouyj 2012-08-16 add for CR00678252 start 
    private GnLocation mLocation;
    //private TextView   mPoiButton;
    // gionee zhouyj 2012-08-20 add for CR00678380 start 
    private String mLastAddress = null;
    // gionee zhouyj 2012-08-20 add for CR00678380 end 
    // gionee zhouyj 2012-08-16 add for CR00678252 end 
    //gionee luoguangming 2012.08.29 modify for CR00682236 begin
    private Handler mInsertGpsHandler;
    private String mGnPreLocationString= null;
    private static boolean mGnInsertGpsFlag = false;
    //GIONEE: wangfei 2012 09 24 add for CR00703647
    private boolean gpsEnabled = false;
    private static final boolean gnNGMflag = SystemProperties.get("ro.gn.oversea.custom").equals("ITALY_NGM"); 
    //gionee luoguangming 2012.08.29 modify for CR00682236  end

    //gionee gaoj 2012-9-25 added for CR00693772 start
    private boolean isLastContentChange = false;
    //gionee gaoj 2012-9-25 added for CR00693772 end

    //gionee gaoj added for CR00725602 20121201 start
    /*private static final int MENU_BATCH_OPERATION = 77;*/
    //gionee gaoj added for CR00725602 20121201 end

    //gionee wangym 2012-11-22 add for CR00735223 start
    private final float MIN_ADJUST_TEXT_SIZE = 0.2f;
    // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
    //private ScaleDetector mScaleDetector;
    // Aurora xuyong 2013-09-13 deleted for aurora's new feature end
    //private float mTextSize = DEFAULT_TEXT_SIZE;
    private boolean mIsCmcc = false;
    private final int TEXT_SIZE_EDIT = 20;
    //gionee wangym 2012-11-22 add for CR00735223 end

    //gionee gaoj 2012-12-19 added for CR00751983 start
    public static boolean isSendingMsg = false;
    //gionee gaoj 2012-12-19 added for CR00751983 end
    // Aurora xuyong 2014-06-06 added for bug #5369 start
    private int mLastItemSlotId = -1;
    // Aurora xuyong 2014-06-06 added for bug #5369 end
    //gionee gaoj 2013-3-26 added for CR00789078 start
/*    private SensorManager sm; 
    private Sensor aSensor;
    private boolean mSsOpen;
    private boolean mSensorDailFeature = com.gionee.featureoption.FeatureOption.GN_FEATURE_SENSOR_DIAL;*/
    //gionee gaoj 2013-3-26 added for CR00789078 end
    // gionee zhouyj 2013-04-01 add for CR00792091 start
    private static final int SQL_MAX_LENGTH = 900;
    // gionee zhouyj 2013-04-01 add for CR00792091 end
    //Gionee <zhouyj> <2013-05-09> add for CR00810588 begin
    private boolean mIsForVoiceHelper = false;
    //Gionee <zhouyj> <2013-05-09> add for CR00810588 end
    //Gionee <zhouyj> <2013-05-15> add for CR00810588 begin
    private int mLongClickPos  = -1;
    private boolean mVoiceReadMsgEnable = true;
    //Gionee <zhouyj> <2013-05-15> add for CR00810588 end

    //gionee <gaoj> <2013-06-09> add for CR00824605 begin
    /*private static final int MENU_NEW_CONTACT = 78;
    private static final int MENU_ADD_CONTACT = 79;*/
    //gionee <gaoj> <2013-06-09> add for CR00824605 end
    //Gione <guoyx> <2013-06-09> add for CR00824219 begin
    private AuroraAlertDialog mDeleteConfirmDialog;
    //Gione <guoyx> <2013-06-09> add for CR00824219 end
    //Aurora xuyong 2013-09-20 deleted for aurora's new feature start
    /*private Menu mMenu;
    private MenuItem mMenuBatchDeleteItem;
    private MenuItem mMenuBatchCopyItem;
    private MenuItem mMenuBatchForwardItem;
    private MenuItem mMenuBatchStarItem;
    private MenuItem mMenuBatchEditItem;
    private MenuItem mMenuBatchSlidshowItem;
    private MenuItem mMenuBatchCopySimItem;
    private MenuItem mMenuBatchCopySdcardItem;
    private MenuItem mMenuBatchDetailsItem;*/
    //Aurora xuyong 2013-09-20 deleted for aurora's new feature end
    // Aurora xuyong 2014-10-25 added for privacy feature start
    private int mShowPriMsgCount = 0;
    // Aurora xuyong 2014-10-25 added for privacy feature end
    @SuppressWarnings("unused")
    public static void log(String logMsg) {
        Thread current = Thread.currentThread();
        long tid = current.getId();
        StackTraceElement[] stack = current.getStackTrace();
        String methodName = stack[3].getMethodName();
        // Prepend current thread ID and name of calling method to the message.
        logMsg = "[" + tid + "] [" + methodName + "] " + logMsg;
        Log.d(TAG, logMsg);
    }
    // Aurora xuyong 2015-10-09 deleted for aurora's new feature start
    //LoaderManager mAttachImagesManager = null;
    // Aurora xuyong 2015-10-09 deleted for aurora's new feature end
    public static final int ATTACH_DATA_INDEX = 1;
    private static final String[] ATTACH_IMAGES_PROJECTION = {
        MediaStore.Images.Media.DISPLAY_NAME,
        MediaStore.Images.Media.DATA,
        MediaStore.Images.Media.LATITUDE,
        MediaStore.Images.Media.LONGITUDE,
        MediaStore.Images.Media._ID
    };
    // Aurora xuyong 2015-10-20 modified for aurora's new feature start
    private static String ATTACH_IMAGES_SELECTION = null;
    // Aurora xuyong 2015-10-20 modified for aurora's new feature end
    // Aurora xuyong 2015-10-09 deleted for aurora's new feature start
    /*@Override
    public Loader<Cursor> onCreateLoader(int id, Bundle bundle) {
        CursorLoader loader = new CursorLoader(this,
        		MediaStore.Images.Media.EXTERNAL_CONTENT_URI, 
                // Aurora xuyong 2015-10-08 modified for aurora's new feature start
        		ATTACH_IMAGES_PROJECTION, ATTACH_IMAGES_SELECTION, null, " datetaken DESC LIMIT 20");
                // Aurora xuyong 2015-10-08 modified for aurora's new feature end
        return loader;
    }*/
    // Aurora xuyong 2015-10-09 deleted for aurora's new feature start
    private AuroraHorizontalListAdapter mAttachImageAdapter = null;
    // Aurora xuyong 2015-10-09 deleted for aurora's new feature start
    /*@Override
    public void onLoadFinished(Loader<Cursor> loader, Cursor cursor) {
        // Aurora xuyong 2010-10-09 modified for aurora's new feature start
    	if (mAttachImageAdapter == null) {
    		mAttachImageAdapter = new AuroraHorizontalListAdapter(this, cursor);
    	} else {
    		mAttachImageAdapter.changeCursor(cursor);
    	}
        // Aurora xuyong 2010-10-09 modified for aurora's new feature end
    	mAttachImageAdapter.setHandler(mMessageListItemHandler);
    }
 
    @Override
    public void onLoaderReset(Loader<Cursor> loader) {
    	// Aurora xuyong 2010-10-09 added for aurora's new feature start
    	if (null != mAttachImageAdapter) {
    		mAttachImageAdapter.swapCursor(null);
    	}
        // Aurora xuyong 2015-10-09 added for aurora's new feature end
        // do nothing.
    }*/
    // Aurora xuyong 2015-10-09 deleted for aurora's new feature end
    //==========================================================
    // Inner classes
    //==========================================================

    private void editSlideshow() {
        Uri dataUri = mWorkingMessage.saveAsMms(false);
        if (dataUri == null) {
            return;
        }
        Intent intent = new Intent(this, SlideshowEditActivity.class);
        intent.setData(dataUri);
        startActivityForResult(intent, REQUEST_CODE_CREATE_SLIDESHOW);
    }
    //Gionee guoyx 20121023 by CR00705464 for MTK ALPS00283177 BEGIN
    private boolean mIsEditingSlideshow = false;
    private long mLastButtonClickTime = -65535;
    //Gionee guoyx 20121023 by CR00705464 for MTK ALPS00283177 END
    private final Handler mAttachmentEditorHandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            //Gionee guoyx 20121023 by CR00705464 for MTK ALPS00283177 ALPS00352418 BEGIN
            // get the last click time
            long oldTime = mLastButtonClickTime;
            long nowTime = SystemClock.elapsedRealtime();
            //Log.d("MmsTest", "oldTime:"+oldTime+",time:"+mLastButtonClickTime);
            // ignore a click if too close.
            if ((nowTime-oldTime < DOUBLECLICK_INTERVAL_TIME)&&(nowTime-oldTime > 0)) {
                Log.d("MmsTest", "ignore a close click");
                return;
            }
            mLastButtonClickTime = SystemClock.elapsedRealtime();
            //Gionee guoyx 20121023 by CR00705464 for MTK ALPS00283177 ALPS00352418 END
            switch (msg.what) {
                case AttachmentEditor.MSG_EDIT_SLIDESHOW: {
                    //Gionee guoyx 20121023 by CR00705464 for MTK ALPS00283177 BEGIN
                    mIsEditingSlideshow = true;
                    //Gionee guoyx 20121023 by CR00705464 for MTK ALPS00283177 END
                    editSlideshow();
                    break;
                }
                case AttachmentEditor.MSG_SEND_SLIDESHOW: {
                    if (isPreparedForSending()) {
//m0
//                        ComposeMessageActivity.this.confirmSendMessageIfNeeded();
                        checkRecipientsCount();
//m1
                    }
                    break;
                }
                case AttachmentEditor.MSG_VIEW_IMAGE:
                case AttachmentEditor.MSG_PLAY_VIDEO:
                case AttachmentEditor.MSG_PLAY_AUDIO:
                case AttachmentEditor.MSG_PLAY_SLIDESHOW:
                    if (mClickCanResponse) {
                        mClickCanResponse = false;
                        if(mIsLeMei) {
                            MessageUtils.viewMmsMessageAttachmentMini(
                                    ComposeMessageActivity.this, mWorkingMessage.saveAsMms(false), 
                                    mWorkingMessage.getSlideshow());
                        } else {
                            MessageUtils.viewMmsMessageAttachment(ComposeMessageActivity.this,
                                    mWorkingMessage, msg.what);
                        }
                        hideInputMethod();
                    }

//a0
                    hideInputMethod();
//a1
                    break;

                case AttachmentEditor.MSG_REPLACE_IMAGE:
//a0
                    getSharedPreferences("SetDefaultLayout", 0).edit().putBoolean("SetDefaultLayout", false).commit();
//a1
                case AttachmentEditor.MSG_REPLACE_VIDEO:
                case AttachmentEditor.MSG_REPLACE_AUDIO:
//a0
                    hideInputMethod();
//a1
                    showAddAttachmentDialog(false);
                    break;

                case AttachmentEditor.MSG_REMOVE_ATTACHMENT:
//                  Here uses android4.0 default code
                    if(mIsLeMei) {
                    // Aurora xuyong 2014-07-14 added for aurora's new feature start
                        if (operConvMap != null && operConvMap.size() > 0) {
                            deleteConvByIds(operConvMap);
                        }
                    // Aurora xuyong 2014-07-14 added for aurora's new feature end
                        finish();
                    } else {
                        mWorkingMessage.removeAttachment(true);
                        //Gionee <guoyx> <2013-07-09> add for CR00829847 begin
                        hideAttachmentSlideView();
                        //Gionee <guoyx> <2013-07-09> add for CR00829847 end
                    }
                    
                    break;

                default:
                    break;
            }
        }
    };

    // Aurora xuyong 2013-12-18 modified for #bug 480 start
    private static final int EDIT_TEXT_ALL_DELETE = 0x11;
    // Aurora xuyong 2015-04-16 added for yulore feature start
    public static final int UPDATE_NUMBER_AREA = 0x13;
    // Aurora xuyong 2015-04-16 added for yulore feature end
    public static final int UPDATE_SELECT_IMAGE_COUNT = 0x22;
    public static final int ATTACH_IMAGE_COUNT_OVER = 0x23;
    // Aurora xuyong 2013-12-18 modified for #bug 480 end
    private final Handler mMessageListItemHandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            // gionee lwzh add for CR00633086 20120702 begin
            if (MmsApp.mGnMessageSupport) {
                gnMessageListHandleMessage(msg);
                return;
            }
            // gionee lwzh add for CR00633086 20120702 end
            /*String type;
            switch (msg.what) {
                case MessageListItem.MSG_LIST_EDIT_MMS:
                    type = "mms";
                    break;
                case MessageListItem.MSG_LIST_EDIT_SMS:
                    type = "sms";
                    break;
//a0
                case MessageListAdapter.MSG_LIST_NEED_REFRASH: {
                    Log.d(MessageListAdapter.CACHE_TAG, "mMessageListItemHandler.handleMessage(): run adapter notify in mMessageListItemHandler.");
                    mMsgListAdapter.setClearCacheFlag(false);
                    mMsgListAdapter.notifyDataSetChanged();
                    return;
                }
                case MessageListItem.ITEM_CLICK: {
                    //add for multi-delete
                    mMsgListAdapter.changeSelectedState(msg.arg1);
                    mSelectedConvCount.setText(Integer.toString(mMsgListAdapter.getSelectedNumber()));
                    if (mMsgListAdapter.getSelectedNumber() > 0) {
                        mDeleteButton.setEnabled(true);
                        if (mMsgListAdapter.getSelectedNumber() == mMsgListAdapter.getCount()) {
                            mIsSelectedAll = true;
                            return;
                        }
                    } else {
                        mDeleteButton.setEnabled(false);
                    }
                    mIsSelectedAll = false;
                    return;
                }
// a1
                default:
                    Log.w(TAG, "Unknown message: " + msg.what);
                    return;
            }

            MessageItem msgItem = getMessageItem(type, (Long) msg.obj, false);
            if (msgItem != null) {
                editMessageItem(msgItem);
                drawBottomPanel();
                invalidateOptionsMenu();
            }*/
        }
    };
    //gionee gaoj 2012-7-4 added for CR00637162 start
    private void onFinishMultiChoose () {
        // Aurora xuyong 2015-05-08 added for aurora's new feature start
        // Aurora xuyong 2015-05-19 modified for aurora's new feature start
    	if (!mIsFromReject) {
    		mMsgListView.setPadding(0, mMsgListView.getPaddingTop(), 0, (int)getResources().getDimension(R.dimen.aurora_cl_bottom_padding));
    	}
        // Aurora xuyong 2015-05-19 modified for aurora's new feature end
        // Aurora xuyong 2015-05-08 added for aurora's new feature end
      //Aurora xuyong 2014-08-16 added for aurora's new feature start
        mMsgListAdapter.mIsDeleteMode = false;
        mStayPos = true;
      //Aurora xuyong 2014-08-16 added for aurora's new feature end
        //Aurora xuyong 2013-09-20 modified for aurora's new feature start
        // Aurora xuyong 2013-09-23 added for aurora's new feature start
        mAuroraActionBar.setShowBottomBarMenu(false);
        // Aurora xuyong 2013-09-23 added for aurora's new feature end
        // Aurora xuyong 2014-03-21 modified for aurora's new feature start
        mAuroraActionBar.showActionBarDashBoard();
        // Aurora xuyong 2014-03-21 modified for aurora's new feature end
        //Aurora xuyong 2013-09-20 modified for aurora's new feature end
        // Aurora xuyong 2013-09-13 added for aurora's new feature start
        //mBackButton.setVisibility(View.VISIBLE);
        // Aurora xuyong 2013-09-13 added for aurora's new feature end
        //gionee gaoj added for CR00725602 20121201 start
        /*if (MmsApp.mLightTheme) {
            mDeleteImageButton.setImageResource(R.drawable.gn_com_delete_unuse_bg);
            mCopyImageButton.setImageResource(R.drawable.gn_com_copy_unuse_bg);
            mForwardImageButton.setImageResource(R.drawable.gn_com_forward_unuse_bg);
            mMoreImageButton.setImageResource(R.drawable.gn_com_more_unuse_bg);
        } else {
            mDeleteImageButton.setImageResource(R.drawable.gn_com_delete_unuse_dark_bg);
            mCopyImageButton.setImageResource(R.drawable.gn_com_copy_unuse_dark_bg);
            mForwardImageButton.setImageResource(R.drawable.gn_com_forward_unuse_dark_bg);
            mMoreImageButton.setImageResource(R.drawable.gn_com_more_unuse_dark_bg);
        }
        mDeleteImageButton.setEnabled(false);
        mDeleteImageButton.setImageTextEnabled(false);
        mCopyImageButton.setEnabled(false);
        mCopyImageButton.setImageTextEnabled(false);
        mForwardImageButton.setEnabled(false);
        mForwardImageButton.setImageTextEnabled(false);
        mMoreImageButton.setEnabled(false);
        mMoreImageButton.setImageTextEnabled(false);*/
        //gionee gaoj added for CR00725602 20121201 end
        /*mMsgListLongClick = false;
        mIsSelectedAll = false;*/
        //Aurora xuyong 2014-08-16 deleted for aurora's new feature start
        //mMsgListAdapter.mIsDeleteMode = false;
        //Aurora xuyong 2014-08-16 deleted for aurora's new feature end
        drawTopPanel(true);
        // Aurora xuyong 2015-03-03 modified for bug #11860 start
        drawBottomPanel(true);
        // Aurora xuyong 2015-03-03 modified for bug #11860 end
        //Aurora xuyong 2014-08-16 deleted for aurora's new feature start
        //startMsgListQuery();
        //mFirstLongClick = false;
        //Aurora xuyong 2014-08-16 deleted for aurora's new feature end
        // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
        //mCountTitle.setText(getResources().getString(R.string.gn_select_conversation_zore));
        // Aurora xuyong 2013-09-13 deleted for aurora's new feature end
        // Aurora xuyong 2013-09-13 modified for aurora's new feature start
        // Aurora xuyong 2013-12-02 deleted for Aurora's new feature start
        //mSelectAll.setText(ComposeMessageActivity.this.getResourcesString(R.string.select_all));
        // Aurora xuyong 2013-12-02 deleted for Aurora's new feature end
        // Aurora xuyong 2013-09-13 modified for aurora's new feature end
        // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
        /*if (mMsgListAdapter.getCount() > 0 && !isRecipientsEditorVisible()) {
            Contact contact = mConversation.getRecipients().get(0);
            if (!contact.existsInDatabase() && mConversation.getRecipients().size() == 1) {
                mMsgListView.addHeaderView(mMsgListViewHeader);
            }
        }*/
        // Aurora xuyong 2013-09-13 deleted for aurora's new feature end
        // Aurora xuyong 2013-09-17 deleted for aurora's new feature start 
        /*mMenuBatchDeleteItem.setVisible(false);
        mMenuBatchCopyItem.setVisible(false);
        mMenuBatchForwardItem.setVisible(false);
        setDeleteMenuState(false);
        setCopyMenuState(false);
        setForwardMenuState(false);
        onPrepareOptionsMenu(mMenu);*/
        // Aurora xuyong 2013-09-17 deleted for aurora's new feature end
        //Aurora xuyong 2014-08-16 added for aurora's new feature start
        changeDeleteMode();
        // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 start
        updateSelectionMenu();
        // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 end
        refreshBottomMenu();
        //Aurora xuyong 2014-08-16 added for aurora's new feature end
    }
    //gionee gaoj 2012-7-4 added for CR00637162 end

    private final OnKeyListener mSubjectKeyListener = new OnKeyListener() {
        public boolean onKey(View v, int keyCode, KeyEvent event) {
            if (event.getAction() != KeyEvent.ACTION_DOWN) {
                return false;
            }

            // When the subject editor is empty, press "DEL" to hide the input field.
            if ((keyCode == KeyEvent.KEYCODE_DEL) && (mSubjectTextEditor.length() == 0)) {
                showSubjectEditor(false);
                //gionee gaoj 2012-4-10 added for CR00555790 start
                if (MmsApp.mGnMessageSupport) {
                    // gionee zhouyj 2012-06-29 add for CR00632036 start 
                    mSubjectEditorNull = false;
                    // gionee zhouyj 2012-06-29 add for CR00632036 end 
                    if (mTextEditor != null && mTextEditor.getVisibility() == View.VISIBLE) {
                        // Aurora xuyong 2013-09-24 deleted for aurora;s new feature start
                        mTextEditor.requestFocus();
                        // Aurora xuyong 2013-09-24 deleted for aurora;s new feature end
                    } else if (isRecipientsEditorVisible()) {
                        mContactContainer.resetMode();
                        mContactContainer.requestFocus();
                    }
                }
                //gionee gaoj 2012-4-10 added for CR00555790 end
                mWorkingMessage.setSubject(null, true);
//a0
                resetCounter();
//a1
                return true;
            }

            return false;
        }
    };

    // Shows the activity's progress spinner. Should be canceled if exiting the activity.
    private Runnable mShowProgressDialogRunnable = new Runnable() {
        public void run() {
            if (mProgressDialog != null) {
                mProgressDialog.show();
            }
        }
    };

    /**
     * Return the messageItem associated with the type ("mms" or "sms") and message id.
     * @param type Type of the message: "mms" or "sms"
     * @param msgId Message id of the message. This is the _id of the sms or pdu row and is
     * stored in the MessageItem
     * @param createFromCursorIfNotInCache true if the item is not found in the MessageListAdapter's
     * cache and the code can create a new MessageItem based on the position of the current cursor.
     * If false, the function returns null if the MessageItem isn't in the cache.
     * @return MessageItem or null if not found and createFromCursorIfNotInCache is false
     */
    private MessageItem getMessageItem(String type, long msgId,
            boolean createFromCursorIfNotInCache) {
        return mMsgListAdapter.getCachedMessageItem(type, msgId,
                createFromCursorIfNotInCache ? mMsgListAdapter.getCursor() : null);
    }

    private boolean isCursorValid() {
        // Check whether the cursor is valid or not.
        Cursor cursor = mMsgListAdapter.getCursor();
        if (cursor.isClosed() || cursor.isBeforeFirst() || cursor.isAfterLast()) {
            Log.e(TAG, "Bad cursor.", new RuntimeException());
            return false;
        }
        return true;
    }
    // Aurora xuyong 2014-05-23 added for multisim feature start
    private final int mSlot1 = 0;
    private final int mSlot2 = 1;
    // Aurora xuyong 2014-06-06 modified for bug #5369 start
    // Aurora xuyong 2014-07-14 modified for aurora's new feature start
    // Aurora xuyong 2014-07-29 modified for aurora's new feature start
    // Aurora xuyong 2014-08-05 added for bug #7249 start
    private SIMInfo mSIMInfo1;
    // Aurora xuyong 2014-08-25 added for bug #7912 start
    private int mSIMInfo1State;
    // Aurora xuyong 2014-08-25 added for bug #7912 end
    private SIMInfo mSIMInfo2;
    // Aurora xuyong 2014-08-25 added for bug #7912 start
    private int mSIMInfo2State;
    // Aurora xuyong 2014-08-25 added for bug #7912 end
    public void initSIMInfo() {
        // Aurora xuyong 2014-12-23 added for aurora's new feature start
        MessageUtils.clearSIMInfos();
        // Aurora xuyong 2014-12-23 added for aurora's new feature end
        // Aurora xuyong 2015-05-26 modified for bug #13707 start
        try {
	        mSIMInfo1 = SIMInfo.getSIMInfoBySlot(ComposeMessageActivity.this.getApplicationContext()
	                  , GnPhone.GEMINI_SIM_1);
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
        } catch (SQLiteException e) {
    		e.printStackTrace();
    	}
        // Aurora xuyong 2015-05-26 modified for bug #13707 end
        // Aurora xuyong 2014-11-17 added for bug #9803 start
        MessageUtils.addSIMInfo(mSIMInfo1);
        // Aurora xuyong 2014-11-17 added for bug #9803 end
       // Aurora xuyong 2014-08-25 modified for bug #7912 start
         mSIMInfo1State = mTelephonyManager.getSimStateGemini(GnPhone.GEMINI_SIM_1);
       // Aurora xuyong 2014-08-25 modified for bug #7912 end
        // Aurora xuyong 2015-05-26 modified for bug #13707 start
        try {
	        mSIMInfo2 = SIMInfo.getSIMInfoBySlot(ComposeMessageActivity.this.getApplicationContext()
	                  , GnPhone.GEMINI_SIM_2);
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
        } catch (SQLiteException e) {
    		e.printStackTrace();
    	}
        // Aurora xuyong 2015-05-26 modified for bug #13707 end
        // Aurora xuyong 2014-11-17 added for bug #9803 start
        MessageUtils.addSIMInfo(mSIMInfo2);
        // Aurora xuyong 2014-11-17 added for bug #9803 end
        // Aurora xuyong 2014-08-25 added for bug #7912 start
        mSIMInfo2State = mTelephonyManager.getSimStateGemini(GnPhone.GEMINI_SIM_2);
        // Aurora xuyong 2014-08-25 added for bug #7912 end
        // Aurora xuyong 2015-07-22 added for bug #14233 start
        if (getSimStateReady(mSIMInfo1State, 0)) {
       	    mPreSIMStatus += 1;
        }
        if (getSimStateReady(mSIMInfo2State, 1)) {
       	    mPreSIMStatus += 2;
        }
        // Aurora xuyong 2015-07-22 added for bug #14233 end
    }
    // Aurora xuyong 2014-08-05 added for bug #7249 end
    // Aurora xuyong 2014-09-16 modified for aurora's new feature start
    private void setProperSImIcon(AuroraSendMsgImageView sendMsgImageView, int slot, boolean pre, boolean needAnim) {
    // Aurora xuyong 2014-09-16 modified for aurora's new feature end
    // Aurora xuyong 2014-07-29 modified for aurora's new feature end
        int simId = -1;
        switch(slot) {
        case mSlot1:
          // Aurora xuyong 2014-08-05 modified for bug #7249 start
            if (mSIMInfo1 == null) {
                // Aurora xuyong 2015-05-26 modified for bug #13707 start
            	try {
	                mSIMInfo1 = SIMInfo.getSIMInfoBySlot(ComposeMessageActivity.this.getApplicationContext()
	                        , GnPhone.GEMINI_SIM_1);
            	} catch (IllegalArgumentException e) {
            		e.printStackTrace();
            	} catch (SQLiteException e) {
            		e.printStackTrace();
            	}
                // Aurora xuyong 2015-05-26 modified for bug #13707 end
                // Aurora xuyong 2014-11-17 added for bug #9803 start
                MessageUtils.addSIMInfo(mSIMInfo1);
                // Aurora xuyong 2014-11-17 added for bug #9803 end
            }
            if (mSIMInfo1 != null) {
                simId = (int)(mSIMInfo1.mSimId);
            }
            break;
        case mSlot2:
            if (mSIMInfo2 == null) {
                // Aurora xuyong 2015-05-26 modified for bug #13707 start
            	try {
	                mSIMInfo2 = SIMInfo.getSIMInfoBySlot(ComposeMessageActivity.this.getApplicationContext()
	                        , GnPhone.GEMINI_SIM_2);
            	} catch (IllegalArgumentException e) {
            		e.printStackTrace();
            	} catch (SQLiteException e) {
            		e.printStackTrace();
            	}
                // Aurora xuyong 2015-05-26 modified for bug #13707 end
                // Aurora xuyong 2014-11-17 added for bug #9803 start
                MessageUtils.addSIMInfo(mSIMInfo2);
                // Aurora xuyong 2014-11-17 added for bug #9803 end
            }
            if (mSIMInfo2 != null) {
                simId = (int)(mSIMInfo2.mSimId);
            }
          // Aurora xuyong 2014-08-05 modified for bug #7249 end
            break;
        }
        int drawableId = -1;
        int backgroundId = -1;
        ColorStateList listColor = null;
        // Aurora xuyong 2014-11-11 modified for bug #9196 start
        synchronized (sendMsgImageView) {
            if (pre) {
              // Aurora xuyong 2014-07-29 modified for aurora's new feature start
                drawableId = MessageUtils.getSendIcon(this, simId, sendMsgImageView.isEnabled());
                sendMsgImageView.setImageResource(drawableId);
                sendMsgImageView.setHugeMode(true);
              // Aurora xuyong 2014-09-16 added for aurora's new feature start
                if (needAnim) {
                    ScaleAnimation animation = new ScaleAnimation(0.847f, 1.0f, 0.847f, 1.0f,   
                            Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);
                    animation.setDuration(500);
                    //animation.setFillAfter(true);
                    sendMsgImageView.setAnimation(animation);
                }
              // Aurora xuyong 2014-09-16 added for aurora's new feature end
            } else {
                drawableId = MessageUtils.getSendIcon(this, simId, sendMsgImageView.isEnabled());
                sendMsgImageView.setImageResource(drawableId);
                sendMsgImageView.setHugeMode(false);
              // Aurora xuyong 2014-09-16 added for aurora's new feature start
                if (needAnim) {
                    ScaleAnimation animation = new ScaleAnimation(1.18f, 1.0f, 1.18f, 1.0f,   
                            Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);
                    animation.setDuration(500);
                    //animation.setFillAfter(true);
                    sendMsgImageView.setAnimation(animation);
                }
              // Aurora xuyong 2014-09-16 added for aurora's new feature end
              // Aurora xuyong 2014-07-29 modified for aurora's new feature end
            }
        }
        // Aurora xuyong 2014-11-11 modified for bug #9196 end
    }
    // Aurora xuyong 2014-05-23 added for multisim feature END
    private void resetCounter() {
//m0
//        mTextCounter.setText("");
//        mTextCounter.setVisibility(View.GONE);
        // gionee zhouyj 2012-05-17 add for CR00601523 start
        if(MmsApp.mGnMessageSupport && mSignatureEnable) {
            // gionee zhouyj 2012-07-11 modify for CR00643024 start
            if (mWorkingMessage.getText() == null) {
                mWorkingMessage.setText(mSignatureContent);
            } else if(!mWorkingMessage.getText().toString().trim().endsWith(mSignatureContent.trim())){
                mWorkingMessage.setText(mWorkingMessage.getText() + mSignatureContent);
            }
            // gionee zhouyj 2012-07-11 modify for CR00643024 end
        }
        // gionee zhouyj 2012-05-17 add for CR00601523 end
        mTextEditor.setText(mWorkingMessage.getText());
        // once updateCounter.
        updateCounter(mWorkingMessage.getText(), 0, 0, 0);
        if (mWorkingMessage.requiresMms()) {
            mTextCounter.setVisibility(View.GONE);
            // Aurora xuyong 2014-08-05 added for aurora multisim feature start
            if (mMultiTextCounter != null) {
                mMultiTextCounter.setVisibility(View.GONE);
            }
            // Aurora xuyong 2014-08-05 added for aurora multisim feature end
            //gionee gaoj 2012-4-10 added for CR00555790 start
            if (MmsApp.mGnMessageSupport) {
            //Gionee <guoyx> <2013-08-05> add for CR00845227 begin
                  if (mWorkingMessage.hasText() 
            //Gionee <guoyx> <2013-08-05> add for CR00845227 end
                        && mTextEditor.getLineCount() > 1
                        || mWorkingMessage.hasAttachment() 
                        || mWorkingMessage.hasSubject()) {
                    mediaTextView.setVisibility(View.VISIBLE);
                    // Aurora xuyong 2014-08-05 added for aurora multisim feature start
                    if (mMultiMediaSizeInfo != null) {
                        mMultiMediaSizeInfo.setVisibility(View.VISIBLE);
                    }
                    // Aurora xuyong 2014-08-05 added for aurora multisim feature end
                } else {
                    mediaTextView.setVisibility(View.GONE);
                    // Aurora xuyong 2014-08-05 added for aurora multisim feature start
                    if (mMultiMediaSizeInfo != null) {
                        mMultiMediaSizeInfo.setVisibility(View.GONE);
                    }
                    // Aurora xuyong 2014-08-05 added for aurora multisim feature end
                }
            }
            //gionee gaoj 2012-4-10 added for CR00555790 end
        } else {
            //gionee gaoj 2012-4-10 added for CR00555790 start
            if (MmsApp.mGnMessageSupport) {
                ensureTextCounterState();
            } else {
            mTextCounter.setVisibility(View.VISIBLE);
            // Aurora xuyong 2014-08-05 added for aurora multisim feature start
            if (mMultiTextCounter != null) {
                mMultiTextCounter.setVisibility(View.VISIBLE);
            }
            // Aurora xuyong 2014-08-05 added for aurora multisim feature end
            }
            //gionee gaoj 2012-4-10 added for CR00555790 end
        }
//m1
    }

    private void updateCounter(CharSequence text, int start, int before, int count) {
//m0
/*
        WorkingMessage workingMessage = mWorkingMessage;
        if (workingMessage.requiresMms()) {
            // If we're not removing text (i.e. no chance of converting back to SMS
            // because of this change) and we're in MMS mode, just bail out since we
            // then won't have to calculate the length unnecessarily.
            final boolean textRemoved = (before > count);
            if (!textRemoved) {
                showSmsOrMmsSendButton(workingMessage.requiresMms());
                return;
            }
        }
*/
//m1
        int[] params = null;
        //MTK_OP03_PROTECT_START
        if (MmsApp.isCmccOperator()) {
            int encodingType = SmsMessage.ENCODING_UNKNOWN;
            encodingType = MessageUtils.getSmsEncodingType(ComposeMessageActivity.this);
            params = GnSmsMessage.calculateLength(text, false, encodingType);
        } else {
        //MTK_OP03_PROTECT_END
            params = SmsMessage.calculateLength(text, false);
        //MTK_OP03_PROTECT_START
        }
        //MTK_OP03_PROTECT_END
            /* SmsMessage.calculateLength returns an int[4] with:
             *   int[0] being the number of SMS's required,
             *   int[1] the number of code units used,
             *   int[2] is the number of code units remaining until the next message.
             *   int[3] is the encoding type that should be used for the message.
             */
        int msgCount = params[0];
        int remainingInCurrentMessage = params[2];
//m0
/*
        if (!MmsConfig.getMultipartSmsEnabled()) {
            mWorkingMessage.setLengthRequiresMms(
                    msgCount >= MmsConfig.getSmsToMmsTextThreshold(), true);
        }

        // Show the counter only if:
        // - We are not in MMS mode
        // - We are going to send more than one message OR we are getting close
        boolean showCounter = false;
        if (!workingMessage.requiresMms() &&
                (msgCount > 1 ||
                 remainingInCurrentMessage <= CHARS_REMAINING_BEFORE_COUNTER_SHOWN)) {
            showCounter = true;
        }

        showSmsOrMmsSendButton(workingMessage.requiresMms());

        if (showCounter) {
            // Update the remaining characters and number of messages required.
            String counterText = msgCount > 1 ? remainingInCurrentMessage + " / " + msgCount
                    : String.valueOf(remainingInCurrentMessage);
            mTextCounter.setText(counterText);
            mTextCounter.setVisibility(View.VISIBLE);
        } else {
            mTextCounter.setVisibility(View.GONE);
        }
*/
        int unitesUsed = params[1];
        mWorkingMessage.setLengthRequiresMms(
            msgCount >= MmsConfig.getSmsToMmsTextThreshold(), true);
        // Show the counter
        // Update the remaining characters and number of messages required.
        if (mWorkingMessage.requiresMms()) {
            mTextCounter.setVisibility(View.GONE);
            // Aurora xuyong 2014-08-05 added for aurora multisim feature start
            if (mMultiTextCounter != null) {
                mMultiTextCounter.setVisibility(View.GONE);
            }
            // Aurora xuyong 2014-08-05 added for aurora multisim feature end
            //gionee gaoj 2012-4-10 added for CR00555790 start
            if (MmsApp.mGnMessageSupport) {
            //Gionee <guoyx> <2013-08-05> modify for CR00845227 begin
                if (mWorkingMessage.hasText()//!TextUtils.isEmpty(mWorkingMessage.getText()) 
            //Gionee <guoyx> <2013-08-05> modify for CR00845227 end
                        && mTextEditor.getLineCount() > 1 
                        || mWorkingMessage.hasAttachment()
                        || mWorkingMessage.hasSubject()
                        || (null != mSubjectTextEditor && mSubjectTextEditor.getVisibility() == View.VISIBLE)) {
                    mediaTextView.setVisibility(View.VISIBLE);
                    // Aurora xuyong 2014-08-05 added for aurora multisim feature start
                    if (mMultiMediaSizeInfo != null) {
                        mMultiMediaSizeInfo.setVisibility(View.VISIBLE);
                    }
                    // Aurora xuyong 2014-08-05 added for aurora multisim feature end
                    if (!mWorkingMessage.hasAttachment()) {
                        //Gionee <guoyx> <2013-08-05> add for CR00845227 begin
                        setMediaTextSizeInfo(mWorkingMessage.getSubject(), mWorkingMessage.getText());
                        //Gionee <guoyx> <2013-08-05> add for CR00845227 end
                    }
                } else {
                    mediaTextView.setVisibility(View.GONE);
                    // Aurora xuyong 2014-08-05 added for aurora multisim feature start
                    if (mMultiMediaSizeInfo != null) {
                        mMultiMediaSizeInfo.setVisibility(View.GONE);
                    }
                    // Aurora xuyong 2014-08-05 added for aurora multisim feature end
                }
            }
            //gionee gaoj 2012-4-10 added for CR00555790 end
        } else {
            //gionee gaoj 2012-4-10 added for CR00555790 start
            if (MmsApp.mGnMessageSupport) {
                ensureTextCounterState();
            } else {
                mTextCounter.setVisibility(View.VISIBLE);
               // Aurora xuyong 2014-08-05 added for aurora multisim feature start
                if (mMultiTextCounter != null) {
                    mMultiTextCounter.setVisibility(View.VISIBLE);
                }
               // Aurora xuyong 2014-08-05 added for aurora multisim feature end
            }
            //gionee gaoj 2012-4-10 added for CR00555790 end
        }
        //gionee gaoj 2012-4-10 added for CR00555790 start
        String counterText = null;
        if (MmsApp.mGnMessageSupport) {
            // Aurora xuyong 2013-11-12 modified for aurora's new fearture start
            // Aurora xuyong 2013-11-12 modified for aurora's new feature start
            counterText = ComposeMessageActivity.this.getResources().getString(R.string.aurora_msg_count, remainingInCurrentMessage, msgCount);
            // Aurora xuyong 2013-11-12 modified for aurora's new feature end
            // Aurora xuyong 2013-11-12 modified for aurora's new fearture end
        } else {
            counterText = remainingInCurrentMessage + "/" + msgCount;
        }
        //gionee gaoj 2012-4-10 added for CR00555790 end
        mTextCounter.setText(counterText);
        // Aurora xuyong 2014-08-05 added for aurora multisim feature start
        if (mMultiTextCounter != null) {
            mMultiTextCounter.setText(counterText);
        }
        // Aurora xuyong 2014-08-05 added for aurora multisim feature end
//m1
    }

    @Override
    public void startActivity(Intent intent) {
        try {
            super.startActivity(intent);
        } catch (ActivityNotFoundException e) {
            Intent mChooserIntent = Intent.createChooser(intent, null);
            super.startActivity(mChooserIntent);
        }
    }

    @Override
    public void startActivityForResult(Intent intent, int requestCode) {
        // requestCode >= 0 means the activity in question is a sub-activity.
        if (requestCode >= 0) {
            mWaitingForSubActivity = true;
        }

//m0
//        super.startActivityForResult(intent, requestCode);
        if (null != intent && null != intent.getData()
                && intent.getData().getScheme().equals("mailto")) {
            try {
                super.startActivityForResult(intent, requestCode);
            } catch (ActivityNotFoundException e) {
                Log.e(TAG, "Failed to startActivityForResult: " + intent);
                Intent i = new Intent().setClassName("com.android.email", "com.android.email.activity.setup.AccountSetupBasics");
                this.startActivity(i);
                // Aurora xuyong 2014-03-04 deleted for aurora's new feature start
                //finish();
                // Aurora xuyong 2014-03-04 deleted for aurora's new feature end
            } catch (Exception e) {
                Log.e(TAG, "Failed to startActivityForResult: " + intent);
                Toast.makeText(this,getString(R.string.message_open_email_fail),
                      Toast.LENGTH_SHORT).show();
          }
        } else {
//            Intent mchooserIntent = Intent.createChooser(intent, null);
//            super.startActivityForResult(mchooserIntent, requestCode);
            try {
                super.startActivityForResult(intent, requestCode);
            } catch (ActivityNotFoundException e) {
                Intent mchooserIntent = Intent.createChooser(intent, null);
                super.startActivityForResult(mchooserIntent, requestCode);
            }
        }
        // m1
    }

    private void toastConvertInfo(boolean toMms) {
        final int resId = toMms ? R.string.converting_to_picture_message
                : R.string.converting_to_text_message;
        Toast.makeText(this, resId, Toast.LENGTH_SHORT).show();
    }

    private class DeleteMessageListener implements OnClickListener {
        private final Uri mDeleteUri;
        private final boolean mDeleteLocked;

        public DeleteMessageListener(Uri uri, boolean deleteLocked) {
            mDeleteUri = uri;
            mDeleteLocked = deleteLocked;
        }

        public DeleteMessageListener(long msgId, String type, boolean deleteLocked) {
            if ("mms".equals(type)) {
                mDeleteUri = ContentUris.withAppendedId(Mms.CONTENT_URI, msgId);
            } else {
                mDeleteUri = ContentUris.withAppendedId(Sms.CONTENT_URI, msgId);
            }
            mDeleteLocked = deleteLocked;
        }

        public void onClick(DialogInterface dialog, int whichButton) {
            mBackgroundQueryHandler.startDelete(DELETE_MESSAGE_TOKEN,
                    null, mDeleteUri, mDeleteLocked ? null : "locked=0", null);
            dialog.dismiss();
        }
    }

    private class DiscardDraftListener implements OnClickListener {
        public void onClick(DialogInterface dialog, int whichButton) {
//m0
/*
            mWorkingMessage.discard();
            dialog.dismiss();
            finish();
*/
            try {
                mWorkingMessage.discard();
                dialog.dismiss();
                // Aurora xuyong 2014-07-14 added for aurora's new feature start
                if (operConvMap != null && operConvMap.size() > 0) {
                    deleteConvByIds(operConvMap);
                }
                // Aurora xuyong 2014-07-14 added for aurora's new feature end
                finish();
            } catch(IllegalStateException e) {
                Log.e(TAG, e.getMessage());
            }
        }
    }

    private class SendIgnoreInvalidRecipientListener implements OnClickListener {
        public void onClick(DialogInterface dialog, int whichButton) {
//m0
//            sendMessage(true);
            checkConditionsAndSendMessage(true);
//m1
            dialog.dismiss();
        }
    }

    private class CancelSendingListener implements OnClickListener {
        public void onClick(DialogInterface dialog, int whichButton) {
            if (isRecipientsEditorVisible()) {
                //gionee gaoj 2012-4-10 added for CR00555790 start
                if (MmsApp.mGnMessageSupport) {
                    mContactContainer.requestFocus();
                } else {
                    //gionee gaoj 2012-4-10 added for CR00555790 end
                mRecipientsEditor.requestFocus();
                //gionee gaoj 2012-4-10 added for CR00555790 start
                }
                //gionee gaoj 2012-4-10 added for CR00555790 end
            }
            dialog.dismiss();
//a0
            updateSendButtonState(true);
//a1
        }
    }

    private void confirmSendMessageIfNeeded() {
        // gionee lwzh add for CR00633086 20120702 begin
        if (MmsApp.mGnMessageSupport) {
            gnConfirmSendMessageIfNeeded();
            return;
        }
        // gionee lwzh add for CR00633086 20120702 end
        /*if (!isRecipientsEditorVisible()) {
//m0
//            sendMessage(true);
            checkConditionsAndSendMessage(true);
//m1
            return;
        }

        boolean isMms = mWorkingMessage.requiresMms();
        if (mRecipientsEditor.hasInvalidRecipient(isMms)) {
//m0

            if (mRecipientsEditor.hasValidRecipient(isMms)) {
                String title = getResourcesString(R.string.has_invalid_recipient,
                        mRecipientsEditor.formatInvalidNumbers(isMms));
                new AuroraAlertDialog.Builder(this)
                    .setIcon(android.R.drawable.ic_dialog_alert)
                    .setTitle(title)
                    .setMessage(R.string.invalid_recipient_message)
                    .setPositiveButton(R.string.try_to_send,
                            new SendIgnoreInvalidRecipientListener())
                    .setNegativeButton(R.string.no, new CancelSendingListener())
                    .show();
            } else {
                new AuroraAlertDialog.Builder(this)
                    .setIcon(android.R.drawable.ic_dialog_alert)
                    .setTitle(R.string.cannot_send_message)
                    .setMessage(R.string.cannot_send_message_reason)
                    .setPositiveButton(R.string.yes, new CancelSendingListener())
                    .show();
            }

            updateSendButtonState();
            String title = getResourcesString(R.string.has_invalid_recipient, 
                    mRecipientsEditor.formatInvalidNumbers(isMms));
            new AuroraAlertDialog.Builder(this)
                .setIconAttribute(android.R.attr.alertDialogIcon)
                .setTitle(title)
                .setMessage(R.string.invalid_recipient_message)
                .setPositiveButton(R.string.try_to_send, new SendIgnoreInvalidRecipientListener())
                .setNegativeButton(R.string.no, new CancelSendingListener())
                .show();
//m1
        } else {
//m0
//            sendMessage(true);
            checkConditionsAndSendMessage(true);
//m1
        }*/
    }

    private final TextWatcher mRecipientsWatcher = new TextWatcher() {
        public void beforeTextChanged(CharSequence s, int start, int count, int after) {
        }

        public void onTextChanged(CharSequence s, int start, int before, int count) {
            // This is a workaround for bug 1609057.  Since onUserInteraction() is
            // not called when the user touches the soft keyboard, we pretend it was
            // called when textfields changes.  This should be removed when the bug
            // is fixed.
            onUserInteraction();
        }

        public void afterTextChanged(Editable s) {
            // Bug 1474782 describes a situation in which we send to
            // the wrong recipient.  We have been unable to reproduce this,
            // but the best theory we have so far is that the contents of
            // mRecipientList somehow become stale when entering
            // ComposeMessageActivity via onNewIntent().  This assertion is
            // meant to catch one possible path to that, of a non-visible
            // mRecipientsEditor having its TextWatcher fire and refreshing
            // mRecipientList with its stale contents.
            if (!isRecipientsEditorVisible()) {
//m0
/*
                IllegalStateException e = new IllegalStateException(
                        "afterTextChanged called with invisible mRecipientsEditor");
*/
//m1
                // Make sure the crash is uploaded to the service so we
                // can see if this is happening in the field.
                Log.w(TAG,
                     "RecipientsWatcher: afterTextChanged called with invisible mRecipientsEditor");
                return;
            }

            //gionee gaoj 2012-4-10 added for CR00555790 start
            if (MmsApp.mGnMessageSupport) {
                // Aurora xuyong 2014-10-23 modified for privacy feature start
                mWorkingMessage.setWorkingRecipients(mContactContainer.getNumbersAndPrivacy());
                // Aurora xuyong 2014-10-23 modified for privacy feature end
                mWorkingMessage.setHasEmail(mContactContainer.containsEmail(), true);
                //mConversation.getRecipients().clear();
            } else {
                //gionee gaoj 2012-4-10 added for CR00555790 end
            mWorkingMessage.setWorkingRecipients(mRecipientsEditor.getNumbers());
            mWorkingMessage.setHasEmail(mRecipientsEditor.containsEmail(), true);
//            mConversation.getRecipients().clear();
            //gionee gaoj 2012-4-10 added for CR00555790 start
            }
            //gionee gaoj 2012-4-10 added for CR00555790 end

            //gionee gaoj 2012-7-9 added for CR00626901 start
//            checkForTooManyRecipients();
            //gionee gaoj 2012-7-9 added for CR00626901 end

            // Walk backwards in the text box, skipping spaces.  If the last
            // character is a comma, update the title bar.
            for (int pos = s.length() - 1; pos >= 0; pos--) {
                char c = s.charAt(pos);
                if (c == ' ')
                    continue;

                //65292 for Chinese ',' and 65307 for Chinese ';'
                if ((c == ',') || (c == ';') || ((int)c == 65307) || ((int)c == 65292)) {
                    updateTitle(new ContactList());
                }

                break;
            }
            //update title when no content
            if (s.length() == 0) {
                updateTitle(new ContactList());
            }
            // If we have gone to zero recipients, disable send button.
            updateSendButtonState();
        }
    };

    private void checkForTooManyRecipients() {
        final int recipientLimit = MmsConfig.getSmsRecipientLimit();
        if (recipientLimit != Integer.MAX_VALUE) {
            final int recipientCount = recipientCount();
            boolean tooMany = recipientCount > recipientLimit;

            if (recipientCount != mLastRecipientCount) {
                // Don't warn the user on every character they type when they're over the limit,
                // only when the actual # of recipients changes.
                mLastRecipientCount = recipientCount;
                if (tooMany) {
                    String tooManyMsg = getString(R.string.too_many_recipients, recipientCount,
                            recipientLimit);
                    Toast.makeText(ComposeMessageActivity.this,
                            tooManyMsg, Toast.LENGTH_LONG).show();
                }
            }
        }
    }

    /*private final OnCreateContextMenuListener mRecipientsMenuCreateListener =
        new OnCreateContextMenuListener() {
        public void onCreateContextMenu(ContextMenu menu, View v,
                ContextMenuInfo menuInfo) {
            if (menuInfo != null) {
                Contact c = ((RecipientContextMenuInfo) menuInfo).recipient;
                RecipientsMenuClickListener l = new RecipientsMenuClickListener(c);

                menu.setHeaderTitle(c.getName());

                if (c.existsInDatabase()) {
                    menu.add(0, MENU_VIEW_CONTACT, 0, R.string.menu_view_contact)
                            .setOnMenuItemClickListener(l);
                } else if (MessageUtils.canAddToContacts(c)){
                    menu.add(0, MENU_ADD_TO_CONTACTS, 0, R.string.menu_add_to_contacts)
                            .setOnMenuItemClickListener(l);
                }
            }
        }
    };*/

    /*private final class RecipientsMenuClickListener implements MenuItem.OnMenuItemClickListener {
        private final Contact mRecipient;

        RecipientsMenuClickListener(Contact recipient) {
            mRecipient = recipient;
        }

        public boolean onMenuItemClick(MenuItem item) {
            switch (item.getItemId()) {
                // Context menu handlers for the recipients editor.
                case MENU_VIEW_CONTACT: {
                    Uri contactUri = mRecipient.getUri();
                    Intent intent = new Intent(Intent.ACTION_VIEW, contactUri);
                    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);
                    startActivity(intent);
                    return true;
                }
                case MENU_ADD_TO_CONTACTS: {
// Use google default code
                    mAddContactIntent = ConversationList.createAddContactIntent(
                            mRecipient.getNumber());
                    ComposeMessageActivity.this.startActivityForResult(mAddContactIntent,
                            REQUEST_CODE_ADD_CONTACT);
                    return true;
                }
            }
            return false;
        }
    }*/

    private void addPositionBasedMenuItems(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
        AdapterView.AdapterContextMenuInfo info;

        try {
            info = (AdapterView.AdapterContextMenuInfo) menuInfo;
        } catch (ClassCastException e) {
            Log.e(TAG, "bad menuInfo");
            return;
        }
        final int position = info.position;

        addUriSpecificMenuItems(menu, v, position);
    }

    private Uri getSelectedUriFromMessageList(AuroraListView listView, int position) {
        // If the context menu was opened over a uri, get that uri.
        MessageListItem msglistItem = (MessageListItem) listView.getChildAt(position);
        if (msglistItem == null) {
            // FIXME: Should get the correct view. No such interface in AuroraListView currently
            // to get the view by position. The AuroraListView.getChildAt(position) cannot
            // get correct view since the list doesn't create one child for each item.
            // And if setSelection(position) then getSelectedView(),
            // cannot get corrent view when in touch mode.
            return null;
        }

        TextView textView;
        CharSequence text = null;
        int selStart = -1;
        int selEnd = -1;

        //check if message sender is selected
        textView = (TextView) msglistItem.findViewById(R.id.text_view);
        if (textView != null) {
            text = textView.getText();
            selStart = textView.getSelectionStart();
            selEnd = textView.getSelectionEnd();
        }

        if (selStart == -1) {
            //sender is not being selected, it may be within the message body
            textView = (TextView) msglistItem.findViewById(R.id.body_text_view);
            if (textView != null) {
                text = textView.getText();
                selStart = textView.getSelectionStart();
                selEnd = textView.getSelectionEnd();
            }
        }

        // Check that some text is actually selected, rather than the cursor
        // just being placed within the TextView.
        if (selStart != selEnd) {
            int min = Math.min(selStart, selEnd);
            int max = Math.max(selStart, selEnd);

            URLSpan[] urls = ((Spanned) text).getSpans(min, max,
                                                        URLSpan.class);

            if (urls.length == 1) {
                return Uri.parse(urls[0].getURL());
            }
        }

        //no uri was selected
        return null;
    }

    private void addUriSpecificMenuItems(ContextMenu menu, View v, int position) {
        Uri uri = getSelectedUriFromMessageList((AuroraListView) v, position);

        if (uri != null) {
            Intent intent = new Intent(null, uri);
            intent.addCategory(Intent.CATEGORY_SELECTED_ALTERNATIVE);
            menu.addIntentOptions(0, 0, 0,
                    new android.content.ComponentName(this, ComposeMessageActivity.class),
                    null, intent, 0, null);
        }
    }

    /*private final void addCallAndContactMenuItems(
            ContextMenu menu, MsgListMenuClickListener l, MessageItem msgItem) {
        if (TextUtils.isEmpty(msgItem.mBody)) {
            return;
        }
        SpannableString msg = new SpannableString(msgItem.mBody);
        Linkify.addLinks(msg, Linkify.ALL);
        ArrayList<String> uris =
            MessageUtils.extractUris(msg.getSpans(0, msg.length(), URLSpan.class));
//a0
// add for adding url to bookmark
        mURLs.clear();
//a1
        // Remove any dupes so they don't get added to the menu multiple times
        HashSet<String> collapsedUris = new HashSet<String>();
        for (String uri : uris) {
            collapsedUris.add(uri.toLowerCase());
        }
        for (String uriString : collapsedUris) {
            String prefix = null;
            int sep = uriString.indexOf(":");
            //m0
            if (sep >= 0) {
                prefix = uriString.substring(0, sep);
                uriString = uriString.substring(sep + 1);
            }
            if (sep >= 0) {
                prefix = uriString.substring(0, sep);
                if ("mailto".equalsIgnoreCase(prefix) || "tel".equalsIgnoreCase(prefix)){
                    uriString = uriString.substring(sep + 1);
                }
            }
            //m1
            Uri contactUri = null;
            boolean knownPrefix = true;
            if ("mailto".equalsIgnoreCase(prefix))  {
                contactUri = getContactUriForEmail(uriString);
            } else if ("tel".equalsIgnoreCase(prefix)) {
                contactUri = getContactUriForPhoneNumber(uriString);
            } else {
                knownPrefix = false;
//a0
                //add URL to book mark
                if (msgItem.isSms() && mURLs.size() <= 0) {
                    menu.add(0, MENU_ADD_TO_BOOKMARK, 0, R.string.menu_add_to_bookmark)
                    .setOnMenuItemClickListener(l);
                }
                
                //add for CMCC MMS URL to book mark
                if (MmsApp.isTelecomOperator() && msgItem.isMms() && mURLs.size() <= 0) {
                    menu.add(0, MENU_ADD_TO_BOOKMARK, 0, R.string.menu_add_to_bookmark)
                    .setOnMenuItemClickListener(l);
                }
                
                mURLs.add(uriString);
//a1
            }
            if (knownPrefix && contactUri == null) {
                Intent intent = ConversationList.createAddContactIntent(uriString);

                String addContactString = getString(R.string.menu_add_address_to_contacts,
                        uriString);
                menu.add(0, MENU_ADD_ADDRESS_TO_CONTACTS, 0, addContactString)
                    .setOnMenuItemClickListener(l)
                    .setIntent(intent);
            }
        }
    }*/

    private Uri getContactUriForEmail(String emailAddress) {
        Cursor cursor = SqliteWrapper.query(this, getContentResolver(),
                Uri.withAppendedPath(Email.CONTENT_LOOKUP_URI, Uri.encode(emailAddress)),
                new String[] { Email.CONTACT_ID, Contacts.DISPLAY_NAME }, null, null, null);

        if (cursor != null) {
            try {
                while (cursor.moveToNext()) {
                    String name = cursor.getString(1);
                    if (!TextUtils.isEmpty(name)) {
                        return ContentUris.withAppendedId(Contacts.CONTENT_URI, cursor.getLong(0));
                    }
                }
            } finally {
                cursor.close();
            }
        }
        return null;
    }

/*    private Uri getContactUriForPhoneNumber(String phoneNumber) {
        Contact contact = Contact.get(phoneNumber, true);
        if (contact.existsInDatabase()) {
            return contact.getUri();
        }
        return null;
    }*/

    //gionee gaoj added for CR00725602 20121201 start
    private void addCopyStarDelete(ContextMenu menu, MsgListMenuClickListener l){
        if (mMsgItem.isDownloaded()) {
            menu.add(0, MENU_FORWARD_MESSAGE, 0, R.string.menu_forward)
                    .setOnMenuItemClickListener(l);
        }

        if (mMsgItem.mStar) {
            menu.add(0, MENU_UNSTAR_MESSAGE, 0, R.string.cancel_favorite)
                .setOnMenuItemClickListener(l);
        } else {
            menu.add(0, MENU_STAR_MESSAGE, 0, R.string.add_to_favorite)
                .setOnMenuItemClickListener(l);
        }

        menu.add(0, MENU_DELETE_MESSAGE, 0, R.string.delete_message)
                .setOnMenuItemClickListener(l);

    }
    //gionee gaoj added for CR00725602 20121201 end

    //gionee gaoj modified for CR00725602 20121201 start
    private final OnCreateContextMenuListener mMsgListMenuCreateListener =
        new OnCreateContextMenuListener() {
        public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
            mContextMenu = menu;
            //add for multi-delete
            if (mMsgListAdapter.mIsDeleteMode) {
                return;
            }
            if (!isCursorValid()) {
                return;
            }
            Cursor cursor = mMsgListAdapter.getCursor();
            String type = cursor.getString(COLUMN_MSG_TYPE);
            long msgId = cursor.getLong(COLUMN_ID);
            Log.i(TAG, "onCreateContextMenu(): msgId=" + msgId);
            addPositionBasedMenuItems(menu, v, menuInfo);

            mMsgItem = mMsgListAdapter.getCachedMessageItem(type, msgId, cursor);
            if (mMsgItem == null) {
                Log.e(TAG, "Cannot load message item for type = " + type
                        + ", msgId = " + msgId);
                return;
            }

            menu.setHeaderTitle(R.string.message_options);

            MsgListMenuClickListener l = new MsgListMenuClickListener();

            if (mMsgItem.isSms()) {

                if (getRecipients().size() == 1 &&
                        (mMsgItem.mBoxId == Sms.MESSAGE_TYPE_OUTBOX ||
                                mMsgItem.mBoxId == Sms.MESSAGE_TYPE_FAILED)) {

                    menu.add(0, MENU_EDIT_MESSAGE, 0, R.string.menu_edit)
                            .setOnMenuItemClickListener(l);
                }

                menu.add(0, MENU_COPY_MESSAGE_TEXT, 0, R.string.copy_message_text)
                        .setOnMenuItemClickListener(l);

                addCopyStarDelete(menu, l);

                if ((mSimCount > 0 || mSubCount > 0) && !mMsgItem.isSending()) {
                    menu.add(0, MENU_SAVE_MESSAGE_TO_SIM, 0, R.string.save_message_to_sim)
                        .setOnMenuItemClickListener(l);
                }
            }

            if (mMsgItem.isMms()) {
                switch (mMsgItem.mBoxId) {
                    case Mms.MESSAGE_BOX_INBOX:
                        break;
                    case Mms.MESSAGE_BOX_OUTBOX:
                        if (getRecipients().size() == 1 &&
                                (mMsgItem.mBoxId == Sms.MESSAGE_TYPE_OUTBOX || mMsgItem.mBoxId == Sms.MESSAGE_TYPE_FAILED)) {
                            menu.add(0, MENU_EDIT_MESSAGE, 0, R.string.menu_edit)
                                    .setOnMenuItemClickListener(l);
                        }
                        break;
                }

                if (mMsgItem.isDownloaded()) {
                    menu.add(0, MENU_FORWARD_MESSAGE, 0, R.string.menu_forward)
                            .setOnMenuItemClickListener(l);
                }

                menu.add(0, MENU_DELETE_MESSAGE, 0, R.string.delete_message)
                        .setOnMenuItemClickListener(l);

                switch (mMsgItem.mAttachmentType) {
                    case WorkingMessage.TEXT:
                        break;
                    case WorkingMessage.VIDEO:
                    case WorkingMessage.IMAGE:
                        if (haveSomethingToCopyToSDCard(mMsgItem.mMsgId)) {
                            menu.add(0, MENU_COPY_TO_SDCARD, 0, R.string.copy_to_sdcard)
                            .setOnMenuItemClickListener(l);
                        }
                        break;
                    case WorkingMessage.SLIDESHOW:
                        menu.add(0, MENU_VIEW_SLIDESHOW, 0, R.string.view_slideshow)
                        .setOnMenuItemClickListener(l);
                        if (haveSomethingToCopyToSDCard(mMsgItem.mMsgId)) {
                            menu.add(0, MENU_COPY_TO_SDCARD, 0, R.string.copy_to_sdcard)
                            .setOnMenuItemClickListener(l);
                        }
                        break;
                    default:
                        if (haveSomethingToCopyToSDCard(mMsgItem.mMsgId)) {
                            menu.add(0, MENU_COPY_TO_SDCARD, 0, R.string.copy_to_sdcard)
                            .setOnMenuItemClickListener(l);
                        }
                        if (haveSomethingToCopyToDrmProvider(mMsgItem.mMsgId)) {
                            menu.add(0, MENU_COPY_TO_DRM_PROVIDER, 0,
                                    getDrmMimeMenuStringRsrc(mMsgItem.mMsgId))
                            .setOnMenuItemClickListener(l);
                        }
                        break;
                }
            }

            menu.add(0, MENU_VIEW_MESSAGE_DETAILS, 0, R.string.view_message_details)
                    .setOnMenuItemClickListener(l);
            //Gionee <zhouyj> <2013-05-15> add for CR00810588 begin
            if (MmsApp.mGnVoiceReadMsgSupport && mVoiceReadMsgEnable) {
                if (mMsgItem.isSms()) {
                    menu.add(0, MENU_VOIVE_READ, 0, R.string.gn_voice_read)
                        .setOnMenuItemClickListener(l);
                } else if (mMsgItem.isMms()) {
                    if (!TextUtils.isEmpty(mMsgItem.mBody) || !TextUtils.isEmpty(mMsgItem.mSubject)) {
                        menu.add(0, MENU_VOIVE_READ, 0, R.string.gn_voice_read)
                            .setOnMenuItemClickListener(l);
                    }
                }
            }
            //Gionee <zhouyj> <2013-05-15> add for CR00810588 end

            /*if (mMsgItem.mDeliveryStatus != MessageItem.DeliveryStatus.NONE || mMsgItem.mReadReport) {
                menu.add(0, MENU_DELIVERY_REPORT, 0, R.string.view_delivery_report)
                        .setOnMenuItemClickListener(l);
            }

            String optr = SystemProperties.get("ro.operator.optr");
            if (null != optr && optr.equals("OP01")) {
                if (!TextUtils.isEmpty(mMsgItem.mBody)) {
                    Log.i(TAG, "onCreateContextMenu(): add select text menu");
                    menu.add(0, MENU_SELECT_TEXT, 0, R.string.select_text)
                            .setOnMenuItemClickListener(l);
                }
            }*/
        }
    };
    //gionee gaoj modified for CR00725602 20121201 end
//a0
    // edit fail message item
//a1
    private void editMessageItem(MessageItem msgItem) {
        if ("sms".equals(msgItem.mType)) {
            editSmsMessageItem(msgItem);
        } else {
            editMmsMessageItem(msgItem);
            mWorkingMessage.setHasMmsDraft(true);
        }
//m0
/*
        if (msgItem.isFailedMessage() && mMsgListAdapter.getCount() <= 1) {
            // For messages with bad addresses, let the user re-edit the recipients.
            initRecipientsEditor();
        }
*/
        if ((msgItem.isFailedMessage() || msgItem.isSending()) && mMsgListAdapter.getCount() <= 1 ) {
            // For messages with bad addresses, let the user re-edit the recipients.
            // gionee zhouyj 2012-07-11 add for CR00640729 start 
            if (MmsApp.mGnMessageSupport) {
                // Aurora xuyong 2013-12-11 modified for aurora's new feature start
                GroupItemInfoModel sgif = msgItem.mGIIF;
                ArrayList<Long> sglist = new ArrayList<Long>();
                // Aurora xuyong 2013-12-13 modified for aurora's new feature start
                if (sgif != null) {
                    ArrayList<Long> sgifi = sgif.getIds();
                    sglist = sgifi;
                // Aurora xuyong 2013-12-13 modified for aurora's new feature end
                } else {
                    sglist.add(new Long(msgItem.mMsgId));
                }
                mMsgListAdapter.changeSelectedState(sglist);
                // Aurora xuyong 2013-12-11 modified for aurora's new feature end
                if (mTitleLayout != null && mTitleLayout.getVisibility() == View.VISIBLE) {
                      //Aurora xuyong 2013-09-20 deleted for aurora's new feature start
                    //mTitleLayout.setVisibility(View.GONE);
                    //Aurora xuyong 2013-09-20 deleted for aurora's new feature end
                }
            }
            // gionee zhouyj 2012-07-11 add for CR00640729 end 
            initRecipientsEditor();
            isInitRecipientsEditor = true;
            //aurora yudingmin 2014-08-22 modified for bug #7671 start
            mMsgListAdapter.changeData(null, null);
//            mMsgListAdapter.changeCursor(null);
            //aurora yudingmin 2014-08-22 modified for bug #7671 end
//MTK_OP01_PROTECT_START
            // add for text zoom
            //if (MmsApp.isTelecomOperator()) {
            //    setZoomVisibility(View.GONE);
            //}
//MTK_OP01_PROTECT_END
            invalidateOptionsMenu();
        }
//m1
    }

    private void editSmsMessageItem(MessageItem msgItem) {
        // When the message being edited is the only message in the conversation, the delete
        // below does something subtle. The trigger "delete_obsolete_threads_pdu" sees that a
        // thread contains no messages and silently deletes the thread. Meanwhile, the mConversation
        // object still holds onto the old thread_id and code thinks there's a backing thread in
        // the DB when it really has been deleted. Here we try and notice that situation and
        // clear out the thread_id. Later on, when Conversation.ensureThreadId() is called, we'll
        // create a new thread if necessary.
        synchronized(mConversation) {
//m0
//            if (mConversation.getMessageCount() <= 1) {
            if (mMsgListAdapter.getCursor().getCount() <= 1) {
//m1
                mConversation.clearThreadId();
            }
        }
        // Delete the old undelivered SMS and load its content.
        Uri uri = ContentUris.withAppendedId(Sms.CONTENT_URI, msgItem.mMsgId);
        SqliteWrapper.delete(ComposeMessageActivity.this.getApplicationContext(),
                mContentResolver, uri, null, null);

        mWorkingMessage.setText(msgItem.mBody);
    }

    private void editMmsMessageItem(MessageItem msgItem) {
        // Discard the current message in progress.
        mWorkingMessage.discard();

        // Load the selected message in as the working message.
        WorkingMessage msg = WorkingMessage.load(this, msgItem.mMessageUri);
//a0
        if (msg == null){
            Log.e(TAG, "editMmsMessageItem, load returns null message");
            return;
        }
        mWorkingMessage = msg;
//a1
        mWorkingMessage.setConversation(mConversation);

        if (MmsApp.mGnMessageSupport && mAttachmentEditor == null) {
            gnInitAttachmentLayout();
        }
//a0
        mAttachmentEditor.update(mWorkingMessage);
//a1
        drawTopPanel(false);

        // WorkingMessage.load() above only loads the slideshow. Set the
        // subject here because we already know what it is and avoid doing
        // another DB lookup in load() just to get it.
        mWorkingMessage.setSubject(msgItem.mSubject, false);

        if (mWorkingMessage.hasSubject()) {
            showSubjectEditor(true);
        }
    }

    private void copyToClipboard(String str) {
        // Aurora xuyong 2013-10-19 modified for bug #148 start
        ClipboardManager clip =
            (ClipboardManager)ComposeMessageActivity.this.getSystemService(Context.CLIPBOARD_SERVICE);
        // Aurora xuyong 2013-10-19 modified for bug #148 end;
        clip.setText(str);
        // Aurora xuyong 2013-10-15 added for aurora's new feature start
        if (str != null && str.length() > 0) {
            Toast.makeText(this, R.string.auroa_sms_copy_done, Toast.LENGTH_SHORT).show();
        } else {
            Toast.makeText(this, R.string.auroa_sms_copy_fail, Toast.LENGTH_SHORT).show();
        }
        //Aurora xuyong 2013-10-15 added for aurora's new feature end
    }

    private void forwardMessage(MessageItem msgItem) {
        // add for input method covered Compose UI issue
        // gionee zhouyj 2012-12-14 modify for CR00745390 start 
        if (!MmsApp.mGnMessageSupport) {
            hideInputMethod();
        }
        // gionee zhouyj 2012-12-14 modify for CR00745390 end 
        Intent intent = createIntent(this, 0);

        intent.putExtra(FORWARD_MESSAGE, true);

        if (msgItem.mType.equals("sms")) {
            String smsBody = msgItem.mBody;
//MTK_OP01_PROTECT_START
            // add for SMS forward with sender
            if (MmsApp.isTelecomOperator()) {
                SharedPreferences prefs = AuroraPreferenceManager.getDefaultSharedPreferences(ComposeMessageActivity.this);
                boolean smsForwardWithSender = prefs.getBoolean(MessagingPreferenceActivity.SMS_FORWARD_WITH_SENDER, false);
                Log.d(TAG, "forwardMessage(): SMS Forward With Sender ?= " + smsForwardWithSender);
                if (smsForwardWithSender) {
                    if (msgItem.mBoxId == Mms.MESSAGE_BOX_INBOX) {
                        smsBody += "\n" + getString(R.string.forward_from);
                        Contact contact = Contact.get(msgItem.mAddress, false);
                        Log.d(TAG, "forwardMessage(): Contact's name and number="
                                + Contact.formatNameAndNumber(contact.getName(), contact.getNumber(), ""));
                        smsBody += Contact.formatNameAndNumber(contact.getName(), contact.getNumber(), "");
                    }
                }
            }
//MTK_OP01_PROTECT_END
            intent.putExtra(SMS_BODY, smsBody);
        } else {
            SendReq sendReq = new SendReq();
            // Aurora xuyong 2013-10-11 deleted for aurora's new feature start
            // Aurora xuyong 2014-03-24 modified for bug #3419 start
            String subject = getString(R.string.forward_prefix);
            // Aurora xuyong 2014-03-24 modified for bug #3419 end
            //gionee gaoj 2012-4-10 added for CR00555790 start
            // Aurora xuyong 2014-03-24 modified for bug #3419 start
            if (MmsApp.mGnMessageSupport) {
                subject = getString(R.string.gn_forward_prefix);
            }
            // Aurora xuyong 2014-03-24 modified for bug #3419 end
            //gionee gaoj 2012-4-10 added for CR00555790 end
            // Aurora xuyong 2014-03-24 modified for bug #3419 start
            if (msgItem.mSubject != null) {
                subject += msgItem.mSubject;
            }
            sendReq.setSubject(new EncodedStringValue(subject));
            // Aurora xuyong 2014-03-24 modified for bug #3419 end
            // Aurora xuyong 2013-10-11 deleted for aurora's new feature end
            sendReq.setBody(msgItem.mSlideshow.makeCopy(
                    ComposeMessageActivity.this));

            Uri uri = null;
            try {
                PduPersister persister = PduPersister.getPduPersister(this);
                // Copy the parts of the message here.
                // Aurora xuyong 2014-10-23 modified for privacy feature start
                uri = null;
                if (MmsApp.sHasPrivacyFeature) {
                    uri = persister.persist(sendReq, Mms.Draft.CONTENT_URI, mConversation.getRecipients().get(0).getPrivacy());
                } else {
                    uri = persister.persist(sendReq, Mms.Draft.CONTENT_URI);
                }
                // Aurora xuyong 2014-10-23 modified for privacy feature end
             } catch (MmsException e) {
                Log.e(TAG, "Failed to copy message: " + msgItem.mMessageUri, e);
                Toast.makeText(ComposeMessageActivity.this,
                        R.string.cannot_save_message, Toast.LENGTH_SHORT).show();
                return;
            }

            intent.putExtra("msg_uri", uri);
            // Aurora xuyong 2013-10-11 deleted for aurora's new feature start
            // Aurora xuyong 2014-03-24 modified for bug #3419 start
            intent.putExtra("subject", subject);
            // Aurora xuyong 2014-03-24 modified for bug #3419 end
            // Aurora xuyong 2013-10-11 deleted for aurora's new feature end
        }
        // ForwardMessageActivity is simply an alias in the manifest for ComposeMessageActivity.
        // We have to make an alias because ComposeMessageActivity launch flags specify
        // singleTop. When we forward a message, we want to start a separate ComposeMessageActivity.
        // The only way to do that is to override the singleTop flag, which is impossible to do
        // in code. By creating an alias to the activity, without the singleTop flag, we can
        // launch a separate ComposeMessageActivity to edit the forward message.
        // Aurora xuyong 2014-03-28 added for bug #3683 start
        if (sCompose != null && sCompose.get() != null) {
          // Aurora xuyong 2014-07-14 added for aurora's new feature start
            if (operConvMap != null && operConvMap.size() > 0) {
                deleteConvByIds(operConvMap);
            }
          // Aurora xuyong 2014-07-14 added for aurora's new feature end
            sCompose.get().finish();
        }
        // Aurora xuyong 2014-03-28 added for bug #3683 end
        intent.setClassName(this, "com.android.mms.ui.ForwardMessageActivity");
        startActivity(intent);
    }

    /**
     * Context menu handlers for the message list view.
     */
    private final class MsgListMenuClickListener implements MenuItem.OnMenuItemClickListener {
        public boolean onMenuItemClick(MenuItem item) {
//m0
/*
            if (!isCursorValid()) {
                return false;
            }
            Cursor cursor = mMsgListAdapter.getCursor();
            String type = cursor.getString(COLUMN_MSG_TYPE);
            long msgId = cursor.getLong(COLUMN_ID);
            MessageItem msgItem = getMessageItem(type, msgId, true);
*/
//m1
//m0
//            if (msgItem == null) {
            if (mMsgItem == null) {
//m1
                return false;
            }

            switch (item.getItemId()) {
                case MENU_EDIT_MESSAGE:
//m0
//                    editMessageItem(msgItem);
                    editMessageItem(mMsgItem);
//m1
                    // Aurora xuyong 2015-03-03 modified for bug #11860 start
                    drawBottomPanel(true);
                    // Aurora xuyong 2015-03-03 modified for bug #11860 end
                    return true;

                case MENU_COPY_MESSAGE_TEXT:
//m0
//                    copyToClipboard(msgItem.mBody);
                    if (mMsgItem.mBody != null) {
                        String copyBody = mMsgItem.mBody.replaceAll(STR_RN, STR_CN);
                        copyToClipboard(copyBody);
                    } else {
                        Log.i(TAG, "onMenuItemClick, mMsgItem.mBody == null");
                        return false;
                    }
//m1
                    return true;

                case MENU_FORWARD_MESSAGE:
//m0
/*
                    final MessageItem mRestrictedItem = msgItem;
                    if (WorkingMessage.sCreationMode == 0 || !isRestrictedType(msgItem.mMsgId)) {
*/
                    final MessageItem mRestrictedItem = mMsgItem;
                    if (WorkingMessage.sCreationMode == 0 || !isRestrictedType(mMsgItem.mMsgId)) {
//m1
                        new Thread(new Runnable() {
                            public void run() {
                                forwardMessage(mRestrictedItem);
                            }
                        }, "ForwardMessage").start();
                        
                    } else if(WorkingMessage.sCreationMode == WorkingMessage.WARNING_TYPE) {
                        new AuroraAlertDialog.Builder(ComposeMessageActivity.this)
                        .setTitle(R.string.restricted_forward_title)
                        .setIconAttribute(android.R.attr.alertDialogIcon)
                        .setMessage(R.string.restricted_forward_message)
                        .setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
                            public final void onClick(DialogInterface dialog, int which) {
                                int createMode = WorkingMessage.sCreationMode;
                                WorkingMessage.sCreationMode = 0;
                                new Thread(new Runnable() {
                                    public void run() {
                                        forwardMessage(mRestrictedItem);
                                    }
                                }, "ForwardMessage").start();
                                WorkingMessage.sCreationMode = createMode;
                            }
                        })
                        .setNegativeButton(android.R.string.cancel, null)
                        .show();
                    }
                    return true;
                    
                case MENU_VIEW_SLIDESHOW:
                    if (mClickCanResponse) {
                        mClickCanResponse = false;
                        MessageUtils.viewMmsMessageAttachment(ComposeMessageActivity.this,
//m0
//                                ContentUris.withAppendedId(Mms.CONTENT_URI, msgId), null);
                                ContentUris.withAppendedId(Mms.CONTENT_URI, mMsgItem.mMsgId), null);
//m1
                        return true;
                    }

                case MENU_VIEW_MESSAGE_DETAILS: {
                    String messageDetails = MessageUtils.getMessageDetails(
//m0
/*
                            ComposeMessageActivity.this, cursor, msgItem.mMessageSize);
                    new AuroraAlertDialog.Builder(ComposeMessageActivity.this)
*/
                            ComposeMessageActivity.this, mMsgItem);
                    mDetailDialog = new AuroraAlertDialog.Builder(ComposeMessageActivity.this)
//m1
                            .setTitle(R.string.message_details_title)
                            .setMessage(messageDetails)
                            .setCancelable(true)
                            .show();
                    return true;
                }
                case MENU_DELETE_MESSAGE: {
                    //gionee gaoj added for CR00725602 20121201 start
                    if (MmsApp.mGnMessageSupport) {
                        //Gionee <zhouyj> <2013-05-15> add for CR00810588 begin
                        if (MmsApp.mGnVoiceReadMsgSupport) {
                            stopVoiceHelperService();
                            setStopServiceBtnGone();
                        }
                        //Gionee <zhouyj> <2013-05-15> add for CR00810588 end
                        //gionee gaoj 2012-12-12 added for CR00739084 start
                        if (mMsgItem.mStar) {
                            isOneDeleteStar = true;
                        } else {
                            isOneDeleteStar = false;
                        }
                        //gionee gaoj 2012-12-12 added for CR00739084 end
                        //Gione <guoyx> <2013-06-09> modify for CR00824219 begin
                        mDeleteConfirmDialog = gnDeleteOneMsg(mMsgItem.mMessageUri, mMsgItem.mMsgId);
                        //Gione <guoyx> <2013-06-09> modify for CR00824219 end
                        return true;
                    }
                    //gionee gaoj added for CR00725602 20121201 start
                    DeleteMessageListener l = new DeleteMessageListener(
//m0
/*
                            msgItem.mMessageUri, msgItem.mLocked);
                    confirmDeleteDialog(l, msgItem.mLocked);
*/
                            mMsgItem.mMessageUri, mMsgItem.mLocked);
                    String where = GnTelephony.Mms._ID + "=" + mMsgItem.mMsgId;
                    String[] projection = new String[] { Sms.Inbox.THREAD_ID };
                    Log.d(TAG, "where:" + where);
                    Cursor queryCursor = Sms.query(getContentResolver(),
                            projection, where, null);
                    if (queryCursor.moveToFirst()) {
                        mThreadId = queryCursor.getLong(0);
                        queryCursor.close();
                    }
                    //Gione <guoyx> <2013-06-09> modify for CR00824219 begin
                    mDeleteConfirmDialog = confirmDeleteDialog(l, mMsgItem.mLocked);
                    //Gione <guoyx> <2013-06-09> modify for CR00824219 end
//m1
                    return true;
                }
                case MENU_DELIVERY_REPORT:
//m0
//                    showDeliveryReport(msgId, type);
                    showDeliveryReport(mMsgItem.mMsgId, mMsgItem.mType);
//m1
                    return true;

                case MENU_COPY_TO_SDCARD: {
                        // Aurora liugj 2013-11-12 modified for bug-554 start
                    //StorageManager mSM = (StorageManager) getApplicationContext().getSystemService(STORAGE_SERVICE);
                    // Aurora xuyong 2014-04-18 modified for bug #4361 start
                    if (hasNoStorage()) {
                    // Aurora xuyong 2014-04-18 modified for bug #4361 end
                        // Aurora liugj 2013-11-12 modified for bug-554 end
                        Toast.makeText(ComposeMessageActivity.this, getString(R.string.Insert_sdcard), Toast.LENGTH_LONG).show();
                        return false;
                    }

                    final long iMsgId = mMsgItem.mMsgId;
                    //m0 for Multi save
                    // gionee zhouyj 2012-05-03 added for CR00588621 start
                    if(MmsApp.mGnMessageSupport) {
                        if(MmsApp.mStorageMountedCount == 2) {
                            Intent i = new Intent("android.intent.action.choosesdcard");
                            i.putExtra("tips", getString(R.string.copy_attachment_to));
                            i.putExtra("uri", mMsgItem.mMessageUri.toString());
                            startActivityForResult(i, REQUEST_CODE_CHOOSE_SDCARD);
                        } else if(MmsApp.mStorageMountedCount == 1) {
                            Intent i = new Intent(ComposeMessageActivity.this, AttachmentPickerActivity.class);
                            i.setData(mMsgItem.mMessageUri);
                            startActivityForResult(i, REQUEST_CODE_MULTI_SAVE);
                        } else{
                            Toast.makeText(ComposeMessageActivity.this, getString(R.string.gn_no_sdcard), Toast.LENGTH_SHORT).show();
                        }
                    } else {
                    // gionee zhouyj 2012-05-03 added for CR00588621 end
                        Intent i = new Intent(ComposeMessageActivity.this, MultiSaveActivity.class);
                        i.putExtra("msgid", iMsgId);
                        startActivityForResult(i, REQUEST_CODE_MULTI_SAVE);
                    // gionee zhouyj 2012-05-03 added for CR00588621 start
                    }
                    // gionee zhouyj 2012-05-03 added for CR00588621 end
                    //m1
                    return true;
                }
//m1
                case MENU_COPY_TO_DRM_PROVIDER: {
//m0
//                    int resId = getDrmMimeSavedStringRsrc(msgId, copyToDrmProvider(msgId));
                    int resId = getDrmMimeSavedStringRsrc(mMsgItem.mMsgId, copyToDrmProvider(mMsgItem.mMsgId));
//m1
                    Toast.makeText(ComposeMessageActivity.this, resId, Toast.LENGTH_SHORT).show();
                    return true;
                }

                case MENU_LOCK_MESSAGE: {
//m0
//                    lockMessage(msgItem, true);
                    lockMessage(mMsgItem, true);
//m1
                    return true;
                }

                case MENU_UNLOCK_MESSAGE: {
//m0
//                    lockMessage(msgItem, false);
                    lockMessage(mMsgItem, false);
//m1
                    return true;
                }
//a0
                case MENU_ADD_TO_BOOKMARK: {
                    if (mURLs.size() == 1) {
                        Browser.saveBookmark(ComposeMessageActivity.this, null, mURLs.get(0));
                    } else if(mURLs.size() > 1) {
                        CharSequence[] items = new CharSequence[mURLs.size()];
                        for (int i = 0; i < mURLs.size(); i++) {
                            items[i] = mURLs.get(i);
                        }
                        /*new AuroraAlertDialog.Builder(ComposeMessageActivity.this)
                            .setTitle(R.string.menu_add_to_bookmark)
                            .setIcon(R.drawable.ic_dialog_menu_generic)
                            .setItems(items, new DialogInterface.OnClickListener() {
                                public void onClick(DialogInterface dialog, int which) {
                                    Browser.saveBookmark(ComposeMessageActivity.this, null, mURLs.get(which));
                                    }
                                })
                            .show();*/
                    }
                    return true;
                }

                case MENU_PREVIEW: {
                    final long iMsgId = mMsgItem.mMsgId;
                    //m0
                    /*Intent i = new Intent(ComposeMessageActivity.this, PreviewActivity.class);
                    i.putExtra("msgid", iMsgId);
                    startActivity(i);*/
                    //m1
                    return true;
                }

                case MENU_SAVE_MESSAGE_TO_SIM: {
                    mSaveMsgThread = new SaveMsgThread(mMsgItem.mType, mMsgItem.mMsgId);
                    mSaveMsgThread.start();
                    return true;
                }
//MTK_OP01_PROTECT_START
                // add for select text copy
                case MENU_SELECT_TEXT: {
                    if (MmsApp.isTelecomOperator()) {
                        AdapterView.AdapterContextMenuInfo info = (AdapterView.AdapterContextMenuInfo) item.getMenuInfo();
                        Log.i(TAG, "onMenuItemClick(): info.position = " + info.position);
                        mMsgListAdapter.getItemId(info.position);
                        MessageListItem msglistItem = (MessageListItem) info.targetView;
                        if (msglistItem != null) {
                            Log.i(TAG, "msglistItem != null");
                            TextView textView = (TextView) msglistItem.findViewById(R.id.text_view);
                            AuroraAlertDialog.Builder builder = new AuroraAlertDialog.Builder(ComposeMessageActivity.this);
                            LayoutInflater factory = LayoutInflater.from(builder.getContext());
                            final View textEntryView = factory.inflate(R.layout.alert_dialog_text_entry, null);
                            AuroraEditText contentSelector = (AuroraEditText)textEntryView.findViewById(R.id.content_selector);
                            contentSelector.setText(textView.getText());

                            builder.setTitle(R.string.select_text)
                                   .setView(textEntryView)
                                   .setPositiveButton(R.string.yes, null)
                                   .show();
                        }
                    }
                    return true;
                }
//MTK_OP01_PROTECT_END
                case MENU_ADD_ADDRESS_TO_CONTACTS: {
                    mAddContactIntent = item.getIntent();
                    startActivityForResult(mAddContactIntent, REQUEST_CODE_ADD_CONTACT);
                    return true;
                }
//a1
                //gionee gaoj 2012-4-10 added for CR00555790 start
                case MENU_STAR_MESSAGE: {
                    starMessage(mMsgItem, true);
                    return true;
                }

                case MENU_UNSTAR_MESSAGE: {
                    starMessage(mMsgItem, false);
                    return true;
                }
                //gionee gaoj 2012-4-10 added for CR00555790 end
                //Gionee <zhouyj> <2013-05-15> add for CR00810588 begin
                case MENU_VOIVE_READ:
                    if (MmsApp.mGnVoiceReadMsgSupport) {
                        stopVoiceHelperService();
                        setStopServiceBtnGone();
                        Intent i = new Intent("gn.voice.service.TTSService");
                        i.putExtra("appid", getPackageName());
                        i.putExtra("type", "speak_info");
                        i.putExtra("operation", "read_msg");
                        if (mMsgItem.isSms()) {
                            i.putExtra("message", mMsgItem.mBody);
                        } else if (mMsgItem.isMms()) {
                            StringBuilder sb = new StringBuilder();
                            if (!TextUtils.isEmpty(mMsgItem.mSubject)) {
                                sb.append(getString(R.string.gn_select_attachment_subject) + ":" + 
                                        mMsgItem.mSubject);
                            }
                            if (!TextUtils.isEmpty(mMsgItem.mBody)) {
                                sb.append(mMsgItem.mBody);
                            }
                            i.putExtra("message", sb.toString());
                        }
                        startService(i);
                        //Gionee <zhouyj> <2013-08-07> modify for CR00850690 begin
                        AdapterView.AdapterContextMenuInfo info = (AdapterView.AdapterContextMenuInfo) item.getMenuInfo();
                        MessageListItem msglistItem = (MessageListItem) info.targetView;
                        msglistItem.setCurrPlaying(true);
                        msglistItem.bind(mMsgItem, info.position == mMsgListView.getChildCount() - 1, false);
                        //Gionee <zhouyj> <2013-08-07> modify for CR00850690 end
                    }
                    return true;
                    //Gionee <zhouyj> <2013-05-15> modify for CR00810588 end
                default:
                    return false;
            }
        }
    }

    private void lockMessage(MessageItem msgItem, boolean locked) {
        Uri uri;
        if ("sms".equals(msgItem.mType)) {
            uri = Sms.CONTENT_URI;
        } else {
            uri = Mms.CONTENT_URI;
        }
        final Uri lockUri = ContentUris.withAppendedId(uri, msgItem.mMsgId);

        final ContentValues values = new ContentValues(1);
        values.put("locked", locked ? 1 : 0);

        new Thread(new Runnable() {
            public void run() {
                getContentResolver().update(lockUri,
                        values, null, null);
            }
        }, "lockMessage").start();
    }

    /**
     * Looks to see if there are any valid parts of the attachment that can be copied to a SD card.
     * @param msgId
     */
    private boolean haveSomethingToCopyToSDCard(long msgId) {
        PduBody body = PduBodyCache.getPduBody(this,
                ContentUris.withAppendedId(Mms.CONTENT_URI, msgId));
        if (body == null) {
            return false;
        }

        boolean result = false;
        int partNum = body.getPartsNum();
        for(int i = 0; i < partNum; i++) {
            PduPart part = body.getPart(i);
            String type = new String(part.getContentType());

            if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
                log("[CMA] haveSomethingToCopyToSDCard: part[" + i + "] contentType=" + type);
            }

            if (ContentType.isImageType(type) || ContentType.isVideoType(type) ||
                    ContentType.isAudioType(type)) {
                result = true;
                break;
            }

            // add for vcard
            if (FileAttachmentModel.isSupportedFile(part)) {
                result = true;
                break;
            }
        }
        return result;
    }

    /**
     * Looks to see if there are any drm'd parts of the attachment that can be copied to the
     * DrmProvider. Right now we only support saving audio (e.g. ringtones).
     * @param msgId
     */
    private boolean haveSomethingToCopyToDrmProvider(long msgId) {
        String mimeType = getDrmMimeType(msgId);
        return isAudioMimeType(mimeType);
    }

    /**
     * Simple cache to prevent having to load the same PduBody again and again for the same uri.
     */
    private static class PduBodyCache {
        private static PduBody mLastPduBody;
        private static Uri mLastUri;

        static public PduBody getPduBody(Context context, Uri contentUri) {
            if (contentUri.equals(mLastUri)) {
                return mLastPduBody;
            }
            try {
                mLastPduBody = SlideshowModel.getPduBody(context, contentUri);
                mLastUri = contentUri;
             } catch (MmsException e) {
                 Log.e(TAG, e.getMessage(), e);
                 return null;
             }
             return mLastPduBody;
        }
    };

    /* package */ static PduBody getPduBody(Context context, long msgid) {
        return  PduBodyCache.getPduBody(context,
                ContentUris.withAppendedId(Mms.CONTENT_URI, msgid));
    }

    /**
     * Copies media from an Mms to the DrmProvider
     * @param msgId
     */
    private boolean copyToDrmProvider(long msgId) {
        boolean result = true;
        PduBody body = PduBodyCache.getPduBody(this,
                ContentUris.withAppendedId(Mms.CONTENT_URI, msgId));
        if (body == null) {
            return false;
        }

        int partNum = body.getPartsNum();
        for(int i = 0; i < partNum; i++) {
            PduPart part = body.getPart(i);
            String type = new String(part.getContentType());

            if (ContentType.isDrmType(type)) {
                // All parts (but there's probably only a single one) have to be successful
                // for a valid result.
                result &= copyPartToDrmProvider(part);
            }
        }
        return result;
    }

    private String mimeTypeOfDrmPart(PduPart part) {
        Uri uri = part.getDataUri();
        InputStream input = null;
        try {
            input = mContentResolver.openInputStream(uri);
            if (input instanceof FileInputStream) {
                FileInputStream fin = (FileInputStream) input;

                DrmRawContent content = new DrmRawContent(fin, fin.available(),
                        DrmRawContent.DRM_MIMETYPE_MESSAGE_STRING);
                String mimeType = content.getContentType();
                return mimeType;
            }
        } catch (IOException e) {
            // Ignore
            Log.e(TAG, "IOException caught while opening or reading stream", e);
        } catch (DrmException e) {
            Log.e(TAG, "DrmException caught ", e);
        } finally {
            if (null != input) {
                try {
                    input.close();
                } catch (IOException e) {
                    // Ignore
                    Log.e(TAG, "IOException caught while closing stream", e);
                }
            }
        }
        return null;
    }

    /**
     * Returns the type of the first drm'd pdu part.
     * @param msgId
     */
    private String getDrmMimeType(long msgId) {
        PduBody body = PduBodyCache.getPduBody(this,
                ContentUris.withAppendedId(Mms.CONTENT_URI, msgId));
        if (body == null) {
            return null;
        }

        int partNum = body.getPartsNum();
        for(int i = 0; i < partNum; i++) {
            PduPart part = body.getPart(i);
            String type = new String(part.getContentType());

            if (ContentType.isDrmType(type)) {
                return mimeTypeOfDrmPart(part);
            }
        }
        return null;
    }

    private int getDrmMimeMenuStringRsrc(long msgId) {
        String mimeType = getDrmMimeType(msgId);
        if (isAudioMimeType(mimeType)) {
            return R.string.save_ringtone;
        }
        return 0;
    }

    private int getDrmMimeSavedStringRsrc(long msgId, boolean success) {
        String mimeType = getDrmMimeType(msgId);
        if (isAudioMimeType(mimeType)) {
            return success ? R.string.saved_ringtone : R.string.saved_ringtone_fail;
        }
        return 0;
    }

    private boolean isAudioMimeType(String mimeType) {
        return mimeType != null && mimeType.startsWith("audio/");
    }

    private boolean isImageMimeType(String mimeType) {
        return mimeType != null && mimeType.startsWith("image/");
    }

    private boolean copyPartToDrmProvider(PduPart part) {
        Uri uri = part.getDataUri();

        InputStream input = null;
        try {
            input = mContentResolver.openInputStream(uri);
            if (input instanceof FileInputStream) {
                FileInputStream fin = (FileInputStream) input;

                // Build a nice title
                byte[] location = part.getName();
                if (location == null) {
                    location = part.getFilename();
                }
                if (location == null) {
                    location = part.getContentLocation();
                }

                // Depending on the location, there may be an
                // extension already on the name or not
                String title = new String(location);
                int index;
                if ((index = title.indexOf(".")) == -1) {
                    String type = new String(part.getContentType());
                } else {
                    title = title.substring(0, index);
                }

                // transfer the file to the DRM content provider
                Intent item = DrmStore.addDrmFile(mContentResolver, fin, title);
                if (item == null) {
                    Log.w(TAG, "unable to add file " + uri + " to DrmProvider");
                    return false;
                }
            }
        } catch (IOException e) {
            // Ignore
            Log.e(TAG, "IOException caught while opening or reading stream", e);
            return false;
        } finally {
            if (null != input) {
                try {
                    input.close();
                } catch (IOException e) {
                    // Ignore
                    Log.e(TAG, "IOException caught while closing stream", e);
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * Copies media from an Mms to the "download" directory on the SD card
     * @param msgId
     */
    private boolean copyMedia(long msgId) {
        boolean result = true;
        PduBody body = null;
        try {
            body = SlideshowModel.getPduBody(this,
                        ContentUris.withAppendedId(Mms.CONTENT_URI, msgId));
        } catch (MmsException e) {
            Log.e(TAG, "copyMedia can't load pdu body: " + msgId);
        }
        if (body == null) {
            return false;
        }

        int partNum = body.getPartsNum();
        for(int i = 0; i < partNum; i++) {
            PduPart part = body.getPart(i);
            String type = new String(part.getContentType());

            if (ContentType.isImageType(type) || ContentType.isVideoType(type) ||
                    ContentType.isAudioType(type) || FileAttachmentModel.isSupportedFile(type)) {
                result &= copyPart(part, Long.toHexString(msgId));   // all parts have to be successful for a valid result.
            }
        }
        return result;
    }

    private boolean copyPart(PduPart part, String fallback) {
        Uri uri = part.getDataUri();

        InputStream input = null;
        FileOutputStream fout = null;
        try {
            input = mContentResolver.openInputStream(uri);
            if (input instanceof FileInputStream) {
                FileInputStream fin = (FileInputStream) input;

                byte[] location = part.getName();
                if (location == null) {
                    location = part.getFilename();
                }
                if (location == null) {
                    location = part.getContentLocation();
                }

                String fileName;
                if (location == null) {
                    // Use fallback name.
                    fileName = fallback;
                } else {
                    // For locally captured videos, fileName can end up being something like this:
                    //      /mnt/sdcard/Android/data/com.android.mms/cache/.temp1.3gp
                    fileName = new String(location);
                }
                File originalFile = new File(fileName);
                fileName = originalFile.getName();  // Strip the full path of where the "part" is
                                                    // stored down to just the leaf filename.

                // Depending on the location, there may be an
                // extension already on the name or not
                String dir = Environment.getExternalStorageDirectory() + "/"
                                + Environment.DIRECTORY_DOWNLOADS  + "/";
                String extension;
                int index;
                if ((index = fileName.lastIndexOf('.')) == -1) {
                    String type = new String(part.getContentType());
                    extension = MimeTypeMap.getSingleton().getExtensionFromMimeType(type);
//a0
                    Log.i(TAG, "Save part extension name is: " + extension);
//a1
                } else {
                    extension = fileName.substring(index + 1, fileName.length());
//a0
                    Log.i(TAG, "Save part extension name is: " + extension);
//a1
                    fileName = fileName.substring(0, index);
                }

                File file = getUniqueDestination(dir + fileName, extension);

                // make sure the path is valid and directories created for this file.
                File parentFile = file.getParentFile();
                if (!parentFile.exists() && !parentFile.mkdirs()) {
                    Log.e(TAG, "[MMS] copyPart: mkdirs for " + parentFile.getPath() + " failed!");
                    return false;
                }

                fout = new FileOutputStream(file);

                byte[] buffer = new byte[8000];
                int size = 0;
                while ((size=fin.read(buffer)) != -1) {
                    fout.write(buffer, 0, size);
                }

                // Notify other applications listening to scanner events
                // that a media file has been added to the sd card
                sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,
                        Uri.fromFile(file)));
            }
        } catch (IOException e) {
            // Ignore
            Log.e(TAG, "IOException caught while opening or reading stream", e);
            return false;
        } finally {
            if (null != input) {
                try {
                    input.close();
                } catch (IOException e) {
                    // Ignore
                    Log.e(TAG, "IOException caught while closing stream", e);
                    return false;
                }
            }
            if (null != fout) {
                try {
                    fout.close();
                } catch (IOException e) {
                    // Ignore
                    Log.e(TAG, "IOException caught while closing stream", e);
                    return false;
                }
            }
        }
        return true;
    }

    private File getUniqueDestination(String base, String extension) {
        File file = new File(base + "." + extension);

        for (int i = 2; file.exists(); i++) {
            file = new File(base + "_" + i + "." + extension);
        }
        return file;
    }

    private void showDeliveryReport(long messageId, String type) {
        Intent intent = new Intent(this, DeliveryReportActivity.class);
        intent.putExtra("message_id", messageId);
        intent.putExtra("message_type", type);

        startActivity(intent);
    }
    // Aurora xuyong 2014-04-15 added for bug #4031 start 
    private final IntentFilter mAirplaneStatusChangeFilter = new IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED);
    private BroadcastReceiver mAirplaneStatusChangeRecever = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            if (Intent.ACTION_AIRPLANE_MODE_CHANGED.equals(intent.getAction())) {
             // Aurora xuyong 2014-06-06 modified for bug #5368 start
                updateSendButtonState();
             // Aurora xuyong 2014-06-06 modified for bug #5368 end
            }
        }
    };
    // Aurora xuyong 2014-04-15 added for bug #4031 end
    // Aurora xuyong 2014-05-23 added for multisim feature start
    private IntentFilter mSimStateChangedFilter = new IntentFilter();
    // Aurora xuyong 2014-06-06 added for bug #5367 start 
    private int mDaultCallSlot = -1;
    // Aurora xuyong 2014-06-06 added for bug #5367 end
    private BroadcastReceiver mSimStateChangedReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            if (TelephonyIntents.ACTION_SIM_STATE_CHANGED.equals(intent.getAction())
                    || intent.getAction().equals("android.intent.action.PHB_STATE_CHANGED")) {
             // Aurora xuyong 2014-06-07 added for bug #5449 start
                if (MmsApp.mGnMultiSimMessage) {
                 // Aurora xuyong 2014-08-06 modified for aurora's new feature start
                     new Thread(new Runnable() {
                         
                         @Override
                         public void run() {
                             initInsertSIMCount();
                         }
                         
                     }).start();
                } else {
             // Aurora xuyong 2014-06-07 added for bug #5449 end
                updateSendButtonState();
                }
              // Aurora xuyong 2014-08-06 modified for aurora's new feature end
            }
        }
    };
    // Aurora xuyong 2014-05-23 added for multisim feature end
    private final IntentFilter mHttpProgressFilter = new IntentFilter(PROGRESS_STATUS_ACTION);

    private final BroadcastReceiver mHttpProgressReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            if (PROGRESS_STATUS_ACTION.equals(intent.getAction())) {
                long token = intent.getLongExtra("token",
                                    SendingProgressTokenManager.NO_TOKEN);
                if (token != mConversation.getThreadId()) {
                    return;
                }

                int progress = intent.getIntExtra("progress", 0);
                switch (progress) {
                    case PROGRESS_START:
                        setProgressBarVisibility(true);
                        break;
                    case PROGRESS_ABORT:
                    case PROGRESS_COMPLETE:
                        setProgressBarVisibility(false);
                        break;
                    default:
                        setProgress(100 * progress);
                }
            }
        }
    };

    private static ContactList sEmptyContactList;

    private ContactList getRecipients() {
        // If the recipients editor is visible, the conversation has
        // not really officially 'started' yet.  Recipients will be set
        // on the conversation once it has been saved or sent.  In the
        // meantime, let anyone who needs the recipient list think it
        // is empty rather than giving them a stale one.
        if (isRecipientsEditorVisible()) {
            if (sEmptyContactList == null) {
                sEmptyContactList = new ContactList();
            }
            return sEmptyContactList;
        }
        return mConversation.getRecipients();
    }

    private void updateTitle(ContactList list) {
        // gionee lwzh add for CR00633086 20120702 begin
        if (MmsApp.mGnMessageSupport) {
            gnUpdateTitle(list);
            return;
        }
        // gionee lwzh add for CR00633086 20120702 end
        
        /*String title = null;;
        String subTitle = null;
        int cnt = list.size();
        Log.d(TAG, "updateTitle(): list.size()" + list.size());
        switch (cnt) {
            case 0: {
                String recipient = null;
                if (mRecipientsEditor != null) {
                    recipient = mRecipientsEditor.getText().toString();
                }
                if (TextUtils.isEmpty(recipient)) {
                    title = getString(R.string.new_message);
                } else {
                    // remove trailing separtors
                    if (recipient.endsWith(", ") || recipient.endsWith(",")) {
                        title = recipient.substring(0, recipient.lastIndexOf(","));
                    } else {
                        title = recipient;
                    }
                    final int c = mRecipientsEditor.getRecipientCount();
                    if (c > 1) {
                        subTitle = getResources().getQuantityString(R.plurals.recipient_count, c, c);
                    }
                }
                break;
            }
            case 1: {
                title = list.get(0).getName();      // get name returns the number if there's no
                                                    // name available.
                String number = list.get(0).getNumber();
                if (!title.equals(number)) {
                    subTitle = PhoneNumberUtils.formatNumber(number, number,
                            MmsApp.getApplication().getCurrentCountryIso());
                }
                break;
            }
            default: {
                // Handle multiple recipients
                title = list.formatNames(", ");
                subTitle = getResources().getQuantityString(R.plurals.recipient_count, cnt, cnt);
                break;
            }
        }
        mDebugRecipients = list.serialize();

        AuroraActionBar actionBar = getAuroraActionBar();
        actionBar.setTitle(title);
        actionBar.setSubtitle(subTitle);*/
    }

    // gionee lwzh add for CR00774362 20130227 begin
    private void gnInitMessageTitle() {
        if (mTitleLayout != null) {
            return;
        }
        // aurora wangth 20140522 add for #4835 begin
        if (isFinishing()) {
            return;
        }
        // aurora wangth 20140522 add for #4835 end
        
        //Aurora xuyong 2013-09-20 modified for aurora's new feature start
        //ViewStub viewStub = (ViewStub) findViewById(R.id.gn_message_title);

        //if (viewStub != null) {
            /*mTitleLayout = (LinearLayout)viewStub.inflate();
            mMenuMoreButton = (ImageButton) mTitleLayout.findViewById(R.id.gn_menu_more);
            mMenuMoreButton.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    // TODO Auto-generated method stub
                    // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
                    //setBatchOperation();
                    // Aurora xuyong 2013-09-13 deleted for aurora's new feature end
//                    openOptionsMenu();
                    /*
                     * popup = constructPopupMenu(v); if (popup != null) {
                     * popup.show(); }
                     */
                /*}
            });*/
            // Aurora xuyong 2013-09-23 added for aurora's new feature start
            mAuroraActionBar.removeItem(0);
            // Aurora xuyong 2013-09-23 added for aurora's new feature end
            addAuroraActionBarItem(AuroraActionBarItem.Type.More,
                AURORA_MORE_BUTTON_ID);
            mAuroraActionBar.setCustomView(R.layout.aurora_message_title_area);
            mTitleLayout = (LinearLayout)mAuroraActionBar.getCustomView(R.id.aurora_title);
            mTitleLayout.setOnClickListener(new View.OnClickListener() {
                
                @Override
                public void onClick(View v) {
                    // TODO Auto-generated method stub
                    if( mMsgListAdapter.mIsDeleteMode) {
                        onFinishMultiChoose();
                        return;
                    }
                    if (mIsLeMei) {
                        if (mWorkingMessage != null) {
                            mWorkingMessage.discard();
                        }
                       // Aurora xuyong 2014-07-14 added for aurora's new feature start
                        if (operConvMap != null && operConvMap.size() > 0) {
                            deleteConvByIds(operConvMap);
                        }
                       // Aurora xuyong 2014-07-14 added for aurora's new feature end
                        finish();
                    } else {
                        if (mAttachmentSlideView != null
                                && View.VISIBLE == mAttachmentSlideView.getVisibility()) {
                            if(mAttachmentSlideViewCurrent == mAttachmentSlideViewHome){
                                    // Aurora xuyong 2014-03-06 added for aurora's new feature start
                                    if (mAddButton != null) {
                                        mAddButton.setImageResource(R.drawable.aurora_insert_attch_selector);
                                    }
                                    // Aurora xuyong 2014-03-06 added for aurora's new feature end
                                mAttachmentSlideView.setVisibility(View.GONE);
                            }else{
                                showAnAttachmentSlide(mAttachmentSlideViewHome);
                            }
                            return;
                        }
                        if (FeatureOption.MTK_SEND_RR_SUPPORT) {
                            checkAndSendReadReport();
                        }
                        // Aurora yudingmin 2014-10-25 modify for bug #9343 start
                        final Context context = getApplicationContext();
                        exitComposeMessageActivity(new Runnable() {
                            public void run() {
                             // Aurora xuyong 2014-07-14 added for aurora's new feature start
                                if (operConvMap != null && operConvMap.size() > 0) {
                                    deleteConvByIds(context, operConvMap);
                                }
                             // Aurora xuyong 2014-07-14 added for aurora's new feature end
                            }
                        // Aurora xuyong 2014-03-06 modified for bug #2819 start
                        }, true);
                        // Aurora xuyong 2014-03-06 modified for bug #2819 end
                        // Aurora yudingmin 2014-10-25 modify for bug #9343 end
                    }
                }
            });
            mTitleName = (TextView)mTitleLayout.findViewById(R.id.aurora_title_name);
            mTitleNumberArea = (TextView)mTitleLayout.findViewById(R.id.aurora_title_number_area);
            //mTitleName = (TextView) mTitleLayout.findViewById(R.id.gn_title_name);
            //mTitleNumberArea = (TextView) mTitleLayout.findViewById(R.id.gn_title_number_area);
           /* mCallButton = (ImageButton) mTitleLayout.findViewById(R.id.gn_call_button);
            mCallButton.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    // TODO Auto-generated method stub
                    // gionee gaoj 2013-1-4 added for CR00756848 start
                    if (mConversation != null && mConversation.getRecipients().size() > 1) {
                        AuroraAlertDialog.Builder builder = new AuroraAlertDialog.Builder(
                                ComposeMessageActivity.this);// ,
                                                             // AuroraAlertDialog.THEME_AMIGO_FULLSCREEN);
                        builder.setTitle(R.string.gn_to_hint);
                        builder.setMessage(mConversation.getRecipients().formatNames(", "));
                        builder.setCancelable(true);
                        // builder.setNegativeButton(R.string.no, null);
                        builder.show();
                    } else {
                        // gionee gaoj 2013-1-4 added for CR00756848 end
                        dialRecipient(false);
                        // gionee gaoj 2013-1-4 added for CR00756848 start
                    }
                    // gionee gaoj 2013-1-4 added for CR00756848 end
                }
            });*/
            // gionee zhouyj 2012-07-05 add for CR00637457 end
       // }
       //Aurora xuyong 2013-09-20 modified for aurora's new feature end
    }
    // gionee lwzh add for CR00774362 20130227 end
    
    // Get the recipients editor ready to be displayed onscreen.
    private void initRecipientsEditor() {
        // gionee lwzh add for CR00633086 20120702 begin
        if (MmsApp.mGnMessageSupport) {
            gnInitRecipientsEditor();
            return;
        }
        // gionee lwzh add for CR00633086 20120702 end
//m0
//        if (isRecipientsEditorVisible()) {
        /*if (isRecipientsEditorVisible() && isInitRecipientsEditor) {
//m1
            return;
        }
        // Must grab the recipients before the view is made visible because getRecipients()
        // returns empty recipients when the editor is visible.
        ContactList recipients = getRecipients();
//a0
        while (!recipients.isEmpty() && recipients.size() > RECIPIENTS_LIMIT_FOR_SMS) {
            recipients.remove(RECIPIENTS_LIMIT_FOR_SMS);
        }
//a1

        ViewStub stub = (ViewStub)findViewById(R.id.recipients_editor_stub);
        if (stub != null) {
            View stubView = stub.inflate();
            mRecipientsEditor = (RecipientsEditor) stubView.findViewById(R.id.recipients_editor);
            mRecipientsPicker = (ImageButton) stubView.findViewById(R.id.recipients_picker);
        } else {
            mRecipientsEditor = (RecipientsEditor)findViewById(R.id.recipients_editor);
            mRecipientsEditor.setVisibility(View.VISIBLE);
            mRecipientsPicker = (ImageButton)findViewById(R.id.recipients_picker);
            mRecipientsPicker.setVisibility(View.VISIBLE);
        }
        mRecipientsPicker.setOnClickListener(this);

        mRecipientsEditor.setAdapter(new RecipientsAdapter(this));
        mRecipientsEditor.populate(recipients);
        mRecipientsEditor.setOnCreateContextMenuListener(mRecipientsMenuCreateListener);
        mRecipientsEditor.addTextChangedListener(mRecipientsWatcher);
        // TODO : Remove the max length limitation due to the multiple phone picker is added and the
        // user is able to select a large number of recipients from the Contacts. The coming
        // potential issue is that it is hard for user to edit a recipient from hundred of
        // recipients in the editor box. We may redesign the editor box UI for this use case.
        // mRecipientsEditor.setFilters(new InputFilter[] {
        //         new InputFilter.LengthFilter(RECIPIENTS_MAX_LENGTH) });
        mRecipientsEditor.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                // After the user selects an item in the pop-up contacts list, move the
                // focus to the text editor if there is only one recipient.  This helps
                // the common case of selecting one recipient and then typing a message,
                // but avoids annoying a user who is trying to add five recipients and
                // keeps having focus stolen away.
                if (mRecipientsEditor.getRecipientCount() == 1) {
                    // if we're in extract mode then don't request focus
                    final InputMethodManager inputManager = (InputMethodManager)
                            getSystemService(Context.INPUT_METHOD_SERVICE);
                    if (inputManager == null || !inputManager.isFullscreenMode()) {
                        mTextEditor.requestFocus();
                    }
                }
            }
        });

        mRecipientsEditor.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            public void onFocusChange(View v, boolean hasFocus) {
                if (!hasFocus) {
                    RecipientsEditor editor = (RecipientsEditor) v;
                    ContactList contacts = editor.constructContactsFromInput(false);
                    updateTitle(contacts);
                }
            }
        });

        mTopPanel.setVisibility(View.VISIBLE);*/
    }

    //==========================================================
    // AuroraActivity methods
    //==========================================================

    public static boolean cancelFailedToDeliverNotification(Intent intent, Context context) {
        if (MessagingNotification.isFailedToDeliver(intent)) {
            // Cancel any failed message notifications
            MessagingNotification.cancelNotification(context,
                        MessagingNotification.MESSAGE_FAILED_NOTIFICATION_ID);
            return true;
        }
        return false;
    }

    public static boolean cancelFailedDownloadNotification(Intent intent, Context context) {
        if (MessagingNotification.isFailedToDownload(intent)) {
            // Cancel any failed download notifications
            MessagingNotification.cancelNotification(context,
                        MessagingNotification.DOWNLOAD_FAILED_NOTIFICATION_ID);
            return true;
        }
        return false;
    }
    // Aurora xuyong 2014-07-02 added for reject feature start
    // Aurora xuyong 2014-09-09 modified for bug #8209 start
    private static boolean mIsFromReject = false;
    // Aurora xuyong 2014-09-09 modified for bug #8209 end
    // Aurora xuyong 2014-07-02 added for reject feature end
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        //gionee gaoj 2012-5-30 added for CR00555790 CR00628364 start
        /*if (MmsApp.mTransparent) {
            setTheme(R.style.TabActivityNewTheme);
        } else if (MmsApp.mLightTheme) {
            setTheme(R.style.GnMmsLightNewTheme);
        } else if (MmsApp.mDarkTheme) {
            setTheme(R.style.GnMmsDarkNewTheme);
        }*/
        //gionee gaoj 2012-5-30 added for CR00555790 CR00628364 end
        super.onCreate(savedInstanceState);
        // Aurora xuyong 2014-10-24 added for privacy feature start
        Utils.addInstance(this);
        // Aurora xuyong 2014-10-24 added for privacy feature end
        // Aurora xuyong 2014-08-05 added for bug #7249 start
        // Aurora xuyong 2014-08-06 modified for aurora's new feature start
        if (MmsApp.mGnMultiSimMessage) {
            new Thread(new Runnable() {
                
                @Override
                public void run() {
                    initSIMInfo();
                }
                
            }).start();
        }
        // Aurora xuyong 2014-08-06 modified for aurora's new feature end
        // Aurora xuyong 2014-08-05 added for bug #7249 end
        // Aurora xuyong 2014-08-14 added for aurora's new feature start
        mIsInitialized = getIntent().getBooleanExtra("quick_query", false);
        // Aurora xuyong 2014-08-14 added for aurora's new feature end
//a0
        // Aurora xuyong 2014-07-02 added for reject feature start
        mIsFromReject = getIntent().getBooleanExtra("isFromReject", false);
        // Aurora xuyong 2014-07-02 added for reject feature end
        // gionee zhouyj 2012-08-27 add for CR00667581 start 
        if (MmsApp.mGnMessageSupport) {
            getContentResolver().bulkInsert(ConfigConstantUtils.IMPORT_SMS_CHANGE_MODE, null);
        }
        // gionee zhouyj 2012-08-27 add for CR00667581 end 
        // If a new ComposeMessageActivity is created, kill old one
        //Gionee <guoyx> <2013-07-03> modify for CR00829344 begin 
        AuroraActivity compose = sCompose == null ? null : sCompose.get();
        if (compose != null && !compose.isFinishing() && savedInstanceState == null) {
          // Aurora xuyong 2014-07-14 added for aurora's new feature start
            if (operConvMap != null && operConvMap.size() > 0) {
                deleteConvByIds(operConvMap);
            }
          // Aurora xuyong 2014-07-14 added for aurora's new feature end
            compose.finish();
        }
        // Aurora xuyong 2014-05-07 modified for bug 4693 start
        mThumbnailWorker = new ThumbnailWorker(this);
       // Aurora xuyong 2014-05-07 modified for bug 4693 end
        // Aurora xuyong 2015-10-15 added for aurora's new feature start
        mAuroraAttachThumbnailWorker = new AuroraAttachThumbnailWorker(this);
        // Aurora xuyong 2015-10-15 added for aurora's new feature end
        sCompose = new WeakReference(this);
        // Aurora xuyong 2014-03-07 added for aurora's new feature start 
        mWindow = this.getWindow();
        mWindowManager = mWindow.getAttributes();
        // Aurora xuyong 2015-07-27 added for bug #14366 start
        // Aurora xuyong 2015-07-30 modified for bug #15022 start
        if (getIntent().getBooleanExtra("fromScreen", false)) {
        	mWindowManager.flags |= WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED;
        }
        // Aurora xuyong 2015-07-30 modified for bug #15022 end
        // Aurora xuyong 2015-07-27 added for bug #14366 end
        mDecorView = mWindow.getDecorView();
        // Aurora xuyong 2014-03-07 added for aurora's new feature end
        //gionee gaoj 2012-4-10 added for CR00555790 start
        if (MmsApp.mEncryption) {
            checkencryption(savedInstanceState);
        }
        //gionee gaoj 2012-4-10 added for CR00555790 end
        //Gionee <guoyx> <2013-07-03> modify for CR00829344 end
        //initMessageSettings();
//a1
        resetConfiguration(getResources().getConfiguration());
        // gionee zhouyj 2012-09-04 remove for CR00679481 start
        //gionee gaoj 2012-7-4 added for CR00637162 start
        /*if (MmsApp.mGnMessageSupport) {
            getAuroraActionBar().hide();
        }*/
        //gionee gaoj 2012-7-4 added for CR00637162 end
        // gionee zhouyj 2012-09-04 remove for CR00679481 end
        //gionee gaoj 2012-4-10 added for CR00555790 start
      // Aurora xuyong 2014-05-23 modified for multisim feature start
        //if (MmsApp.mGnMessageSupport) {
            // Gionee lixiaohu 2012-08-28 added for CR00681687 start
        // Aurora hujunming 2014-5-14 modified for multiSim    start
        //    if (MmsApp.mGnMultiSimMessage) {            
                //setContentView(R.layout.gn_compose_message_activity_sim1sim2);
        //        setAuroraContentView(R.layout.gn_compose_message_activity_multisim,
        //                AuroraActionBar.Type.Custom);
        // Aurora hujunming 2014-5-14 modified for multiSim    end
        //    }else{            
                //setContentView(R.layout.gn_compose_message_activity);
        setAuroraContentView(R.layout.gn_compose_message_activity,
            AuroraActionBar.Type.Custom);
        //    }
            // Gionee lixiaohu 2012-08-28 added for CR00681687 end
        //} else {
            //gionee gaoj 2012-4-10 added for CR00555790 end
            //setContentView(R.layout.compose_message_activity);
        //    setAuroraContentView(R.layout.compose_message_activity,
        //            AuroraActionBar.Type.Custom);
        //gionee gaoj 2012-4-10 added for CR00555790 start
        //}
        // Aurora xuyong 2014-05-23 modified for multisim feature end
        //gionee gaoj 2012-4-10 added for CR00555790 end
        setProgressBarVisibility(false);
        mAuroraActionBar = getAuroraActionBar();
        mAuroraMenu = mAuroraActionBar.getActionBarMenu();
        // Aurora xuyong 2013-09-24 added for aurora;s new feature start
        setAuroraMenuCallBack(auroraMenuCallBack);
        // Aurora xuyong 2013-09-24 added for aurora;s new feature end
        mAuroraActionBar.setOnAuroraActionBarListener(mAuroActionBarItemClickListener);
        // Aurora xuyong 2013-09-23 added for aurora's new feature start
        mAuroraActionBar.setmOnActionBarBackItemListener(auroraActionBarBackItemClickListener);
        // Aurora xuyong 2013-09-23 added for aurora's new feature end
        // Aurora xuyong 2013-09-23 modified for aurora's new feature start
        // Aurora xuyong 2014-03-04 modified for aurora's new feature start
        // Aurora xuyong 2014-07-02 added for reject feature start
        if (!mIsFromReject) {
            mAuroraActionBar.initActionBottomBarMenu(R.menu.aurora_batch_bottom_menu, 4);
        } else {
            mAuroraActionBar.initActionBottomBarMenu(R.menu.aurora_reject_batch_bottom_menu, 2);
        }
        // Aurora xuyong 2014-07-02 added for reject feature end
        // Aurora xuyong 2014-03-04 modified for aurora's new feature end
        // Aurora xuyong 2013-09-23 modified for aurora's new feature end
        // Aurora xuyong 2013-09-24 deleted for aurora;s new feature start
        //setAuroraMenuCallBack(auroraMenuCallBack);
        // Aurora xuyong 2013-09-24 deleted for aurora;s new feature end
        // Aurora xuyong 2014-03-07 modified for aurora's new feature start 
        mWindow.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
        // Aurora xuyong 2014-03-07 modified for aurora's new feature end

        // Initialize members for UI elements.
        initResourceRefs();

//a0
//MTK_OP01_PROTECT_START
        // add for text zoom
        // Initialize members for Zoom UI elements.
        /*if (MmsApp.isTelecomOperator()) {
            initZoomResourceRefs();
        }*/
//MTK_OP01_PROTECT_END
        // SIM indicator manager

        //gionee gaoj 2012-9-21 added for CR00687379 start
        if (MmsApp.mGnMtkGeminiSupport) {
            mSinIndicatorReceiver = new SimIndicatorBroadcastReceiver();
            IntentFilter intentFilter =
                new IntentFilter(GnIntent.ACTION_SMS_DEFAULT_SIM_CHANGED);
            registerReceiver(mSinIndicatorReceiver, intentFilter);
        }
        // Aurora xuyong 2013-12-06 added for bug #1117 start
        // Aurora xuyong 2014-09-17 deleted for bug #8362 start
        //mHomeButtonWatcher = new HomeButtonWatcher();
        //IntentFilter HBintentFilter =
        //       new IntentFilter(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
        //registerReceiver(mHomeButtonWatcher, HBintentFilter);
        // Aurora xuyong 2014-09-17 deleted for bug #8362 end
        // Aurora xuyong 2013-12-06 added for bug #1117 end
        //gionee gaoj 2012-9-21 added for CR00687379 end

        mSimCount = 0;
//a1
        mContentResolver = getContentResolver();
        mBackgroundQueryHandler = new BackgroundQueryHandler(mContentResolver);
        // Aurora xuyong 2015-10-09 added for aurora's new feature start
        mAttachQueryHandler = new AttachQueryHandler(mContentResolver);
        // Aurora xuyong 2015-10-09 added for aurora's new feature end

        initialize(savedInstanceState, 0);

        if (TRACE) {
            android.os.Debug.startMethodTracing("compose");
        }
//a0
        mDestroy = false;
        if (mCellMgr == null) {
            mCellMgr = new GnCellConnMgr();
        }
        mCellMgr.register(getApplication());
        mCellMgrRegisterCount++;
//a1
        mSoloAlertDialog = new SoloAlertDialog(this);

        //gionee gaoj 2012-8-14 added for CR00623375 start
        if (MmsApp.mGnRegularlyMsgSend) {
            mRegularlyMain = new RegularlyMainActivity();
            mRegularlyMain.setMessageInsertListener(mMessageInsertListener);
        }
        //gionee gaoj 2012-8-14 added for CR00623375 end

        //gionee <gaoj> <2013-06-14> delete for CR00818911 begin
        //gionee gaoj 2012-12-10 added for CR00741704 start
        /*bindService(qqContent, serviceConnection, Context.BIND_AUTO_CREATE);*/
        //gionee gaoj 2012-12-10 added for CR00741704 end
        //gionee <gaoj> <2013-06-14> delete for CR00818911 end

        //gionee gaoj 2013-3-26 added for CR00789078 start
       /* sm = (SensorManager)getSystemService(Context.SENSOR_SERVICE);
        aSensor = sm.getDefaultSensor(14);//Sensor.TYPE_HAND_ANSWER);
*/        //gionee gaoj 2013-3-26 added for CR00789078 end
        //Gionee <zhouyj> <2013-06-26> modify for CR00829233 begin
        if (mIsForVoiceHelper && savedInstanceState == null) {
            Intent i = new Intent("gn.android.speech.action.RECOGNIZE_SPEECH"); 
            i.putExtra("appid", getPackageName());
            i.putExtra("scene", "mms_send");
            i.putExtra("hint", getString(R.string.gn_new_voice_message_tip));
            startActivityForResult(i, REQUEST_CODE_VOICE_HELPER);
        }
        //Gionee <zhouyj> <2013-06-26> modify for CR00829233 end
        // Aurora xuyong 2014-01-03 added for aurora;s new feature start
        misPickContatct = false;
          if (MmsApp.mGnPerfOpt2Support) {
          new Thread (new Runnable() {
              @Override
              public void run() {
                  mConversation.blockMarkAsRead(true);
              }
          }).start();
          } else {
               new Thread (new Runnable() {
                      @Override
                      public void run() {
                          mConversation.blockMarkAsRead(true);
                      }
                  }).start();
          }
        initFocus();
        loadMessageContent();
        if (mConversation.getThreadId() == 0) {
          mWorkingMessage.syncWorkingRecipients();
        }
        mNeedUpdateContactForMessageContent = true;
        // Aurora xuyong 2014-01-03 added for aurora;s new feature end
        // Aurora xuyong 2014-04-15 added for bug #4031 start 
        registerReceiver(mAirplaneStatusChangeRecever, mAirplaneStatusChangeFilter);
        // Aurora xuyong 2014-04-15 added for bug #4031 end
        // Aurora xuyong 2014-05-23 added for multisim feature start
        if (MmsApp.mGnMultiSimMessage) {
          // Aurora xuyong 2014-07-03 modified for aurora's new feature start
            this.getContentResolver().registerContentObserver(SimInfo.CONTENT_URI, true, mSimInfoObserver);
            // Aurora xuyong 2015-07-01 added for bug #13930 start
            this.getContentResolver().registerContentObserver(Settings.System.CONTENT_URI, true, mDualSimModeSettingInfoObserver);
            // Aurora xuyong 2015-07-01 added for bug #13930 end
          // Aurora xuyong 2014-07-03 modified for aurora's new feature end
            mSimStateChangedFilter.addAction(TelephonyIntents.ACTION_SIM_STATE_CHANGED);
            mSimStateChangedFilter.addAction("android.intent.action.PHB_STATE_CHANGED");
            registerReceiver(mSimStateChangedReceiver, mSimStateChangedFilter);
        }
        // Aurora xuyong 2014-07-03 added for aurora's new feature start
        // Aurora xuyong modified for aurora's new feature start
        // Aurora yudingmin 2014-09-12 modified for optimize observer start
        // Aurora xuyong 2014-09-15 modified for uptimize start
        Uri mConUri = mConversation.getUri();
        if (mConUri != null) {
            this.getContentResolver().registerContentObserver(mConUri, true, mConvaObserver);
        }
        // Aurora xuyong 2014-09-15 modified for uptimize end
        // Aurora yudingmin 2014-09-12 modified for optimize observer end
        // Aurora xuyong modified for aurora's new feature end
        // Aurora xuyong 2014-07-03 added for aurora's new feature end
        // Aurora xuyong 2014-05-23 added for multisim feature end
        // Aurora xuyong 2015-10-09 deleted for aurora's new feature start
        //mAttachImagesManager = getLoaderManager();
        // Aurora xuyong 2015-10-09 deleted for aurora's new feature end
        // Aurora xuyong 2010-10-09 modified for aurora's new feature start
        // Aurora xuyong 2015-10-09 deleted for aurora's new feature start
        //mAttachImagesManager.initLoader(LOADER_INDEX, null, this);
        // Aurora xuyong 2015-10-09 deleted for aurora's new feature end
        // Aurora xuyong 2010-10-09 modified for aurora's new feature end
    }
    // Aurora xuyong 2014-07-03 added for aurora's new feature start
    private ContentObserver mConvaObserver = new ContentObserver(new Handler()) { 

        @Override
        public void onChange(boolean selfChange) { 
             super.onChange(selfChange);
             //Aurora xuyong 2014-08-16 added for aurora's new feature start
             mStayPos = false;
             //Aurora xuyong 2014-08-16 added for aurora's new feature end
        // Aurora yudingmin 2014-09-12 modified for optimize observer start
             isLastContentChange = true;
             // Aurora yudingmin 2014-09-17 modified for bug 8355 start
             startMsgListQuery();
             // Aurora yudingmin 2014-09-17 modified for bug 8355 end
             //gionee gaoj 2012-9-25 added for CR00693772 end
             if (MmsApp.mGnRegularlyMsgSend && mDateTimeDialog != null && mDateTimeDialog.isShowing()) {
                 mDateTimeDialog.cancel();
             }
        // Aurora yudingmin 2014-09-12 modified for optimize observer start
        }   

    };
    // Aurora xuyong 2014-07-03 modified for aurora's new feature end
    // Aurora xuyong 2014-05-23 added for multisim feature start
    // Aurora xuyong 2014-07-03 modified for aurora's new feature start
    // Aurora xuyong 2014-08-06 added for aurora's new feature start
    // Aurora xuyong 2015-07-22 added for bug #14233 start
    private int mPreSIMStatus = 0;
    // Aurora xuyong 2015-07-22 added for bug #14233 end
    private void initInsertSIMCount() {
        // Aurora xuyong 2015-08-18 added for bug #15792 start
    	getSubInfoList();
        // Aurora xuyong 2015-08-18 added for bug #15792 end
        // Aurora xuyong 2015-07-22 added for bug #14233 start
    	int currentSIMStatus = 0;
        // Aurora xuyong 2015-07-22 added for bug #14233 end
        // Aurora xuyong 2014-12-23 added for aurora's new feature start
        MessageUtils.clearSIMInfos();
        // Aurora xuyong 2014-12-23 added for aurora's new feature end
        // Aurora xuyong 2015-08-18 modified for bug #15792 start
        int insertSimCount = 0;
        if (Utils.hasLollipop()) {
        	insertSimCount = mSubCount; //SIMInfo.getInsertedSIMCount(ComposeMessageActivity.this.getApplicationContext());
        } else {
        	insertSimCount = SIMInfo.getInsertedSIMCount(ComposeMessageActivity.this.getApplicationContext());
        }
        // Aurora xuyong 2015-08-18 modified for bug #15792 end
        try {
            mSIMInfo1 = SIMInfo.getSIMInfoBySlot(ComposeMessageActivity.this.getApplicationContext()
                         , GnPhone.GEMINI_SIM_1);
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
        } catch (SQLiteException e) {
    		e.printStackTrace();
    	}
        // Aurora xuyong 2014-11-17 added for bug #9803 start
        MessageUtils.addSIMInfo(mSIMInfo1);
        // Aurora xuyong 2014-11-17 added for bug #9803 end
      // Aurora xuyong 2014-08-25 added for bug #7912 start
        mSIMInfo1State = mTelephonyManager.getSimStateGemini(GnPhone.GEMINI_SIM_1);
      // Aurora xuyong 2014-08-25 added for bug #7912 end
         try {
		     mSIMInfo2 = SIMInfo.getSIMInfoBySlot(ComposeMessageActivity.this.getApplicationContext()
		                 , GnPhone.GEMINI_SIM_2);
         } catch (IllegalArgumentException e) {
             e.printStackTrace();
         } catch (SQLiteException e) {
     		e.printStackTrace();
     	 }
         // Aurora xuyong 2014-11-17 added for bug #9803 start
         MessageUtils.addSIMInfo(mSIMInfo2);
         // Aurora xuyong 2014-11-17 added for bug #9803 end
       // Aurora xuyong 2014-08-25 added for bug #7912 start
         mSIMInfo2State = mTelephonyManager.getSimStateGemini(GnPhone.GEMINI_SIM_2);
       // Aurora xuyong 2014-08-25 added for bug #7912 end
        if (insertSimCount == 2) {
            // Aurora xuyong 2014-08-25 modified for bug #7912 start
            // Aurora xuyong 2015-07-01 modified for bug #13930 start
            if ((mSIMInfo1 == null || !getSimStateReady(mSIMInfo1State, 0))) {
            // Aurora xuyong 2015-07-01 modfiied for bug #13930 end
            // Aurora xuyong 2014-08-25 modified for bug #7912 end
                insertSimCount--;
            };
            // Aurora xuyong 2014-08-25 modified for bug #7912 start
            // Aurora xuyong 2015-07-01 modified for bug #13930 start
            if ((mSIMInfo2 == null || !getSimStateReady(mSIMInfo2State, 1))) {
            // Aurora xuyong 2015-07-01 modified for bug #13930 end
            // Aurora xuyong 2014-08-25 modified for bug #7912 end
                insertSimCount--;
            };
          }
        // Aurora xuyong 2015-07-22 modified for bug #14233 start
        if (getSimStateReady(mSIMInfo1State, 0)) {
        	currentSIMStatus += 1;
        }
        if (getSimStateReady(mSIMInfo2State, 1)) {
        	currentSIMStatus += 2;
        }
        // Aurora xuyong 2015-08-29 modified for bug #15792 start
        if (currentSIMStatus != mPreSIMStatus || mPreSubCount != mSubCount) {
        // Aurora xuyong 2015-08-29 modified for bug #15792 end
	        Message msg = mHandler.obtainMessage(UPDATE_SEND_STATE_AFTER_SIMINFO_CHANGE);
	        msg.arg1 = insertSimCount;
	        msg.sendToTarget();
	        mPreSIMStatus = currentSIMStatus;
            // Aurora xuyong 2015-08-29 modified for bug #15792 start
	        mPreSubCount = mSubCount;
            // Aurora xuyong 2015-08-29 modified for bug #15792 end
        }
        // Aurora xuyong 2015-07-22 modified for bug #14233 end
    }
    // Aurora xuyong 2014-08-06 added for aurora's new feature end
    private ContentObserver mSimInfoObserver = new ContentObserver(new Handler()) {
    // Aurora xuyong 2014-07-03 modified for aurora's new feature end 

        @Override
        public void onChange(boolean selfChange) { 
             super.onChange(selfChange);
             // Aurora xuyong 2014-08-06 modified for aurora's new feature start
             if (MmsApp.mGnMultiSimMessage) {
                 new Thread(new Runnable() {
                     
                     @Override
                     public void run() {
                         initInsertSIMCount();
                     }
                     
                 }).start();
             } else {
                  updateSendButtonState();
             }
           // Aurora xuyong 2014-08-06 modified for aurora's new feature end 
        }   

    };
    // Aurora xuyong 2015-07-01 added for bug #13930 start
    private int mPreSimCount;
    private int mPreDualSimMode;
    private ContentObserver mDualSimModeSettingInfoObserver = new ContentObserver(new Handler()) {

        @Override
        public void onChange(boolean selfChange) { 
             super.onChange(selfChange);
             int curSimCount = SIMInfo.getInsertedSIMCount(ComposeMessageActivity.this.getApplicationContext());
             int curPreDualSimMode = android.provider.Settings.System.getInt(ComposeMessageActivity.this.getApplicationContext().getContentResolver(), "msim_mode_setting", 3);
             if (mPreSimCount != curSimCount || mPreDualSimMode != curPreDualSimMode) {
            	 mPreSimCount = curSimCount;
            	 mPreDualSimMode = curPreDualSimMode;
	             if (MmsApp.mGnMultiSimMessage) {
	                 new Thread(new Runnable() {
	                     
	                     @Override
	                     public void run() {
	                         initInsertSIMCount();
	                     }
	                     
	                 }).start();
	             } else {
	                  updateSendButtonState();
	             }
             }
        }   

    };
    // Aurora xuyong 2015-07-01 added for bug #13930 end
    // Aurora xuyong 2014-08-13 added for bug #7596 start
    private static final int AURORA_REJECT_DIALOG_ID = 0x11;
    
    @Override 
    public android.app.Dialog onCreateDialog(int id) {
        switch (id) {
            case AURORA_REJECT_DIALOG_ID:
                AuroraProgressDialog rejectProgressDialog = new AuroraProgressDialog(this);
                rejectProgressDialog.setTitle(R.string.aurora_black_resuming);
                rejectProgressDialog.setCanceledOnTouchOutside(false);
                rejectProgressDialog.setCancelable(false);
                  return rejectProgressDialog;
            default:
                return null;
        }
    }
    // Aurora xuyong 2014-08-13 added for bug #7596 end
    // Aurora xuyong 2014-05-23 added for multisim feature end
    private static final int AURORA_MORE_BUTTON_ID = 0x0001;
    private static final int AURORA_ADD_BUTTON_ID = 0x0002;
    // Aurora xuyong 2013-09-26 added for aurora's new feature start
    // Aurora xuyong 2014-03-07 modified for aurora's new feature start 
    Window mWindow;
    View mDecorView;
    // Aurora xuyong 2014-03-07 modified for aurora's new feature end
    // Aurora xuyong 2014-02-18 modified for aurora's new feature start
    //boolean isPopRunning = true;
    //float popImage_alpha = 1.0f;
    // Aurora xuyong 2014-03-07 modified for aurora's new feature start 
    WindowManager.LayoutParams mWindowManager;
    // Aurora xuyong 2014-03-07 modified for aurora's new feature end
    //int popType = 0;
    
    /*Handler mPuwHandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);

            wl.alpha = popImage_alpha;
            window.setAttributes(wl);
        }
    };
    
    private void updateAlpha(int popType) {
        if (popType == 1) {
            popImage_alpha -= 0.08f;
            // Aurora xuyong 2013-09-25 modified for aurora's new feature start
            if (popImage_alpha <= 0.5f) {
                popImage_alpha = 0.5f;
                isPopRunning = false;
            }
            // Aurora xuyong 2013-09-25 modified for aurora's new feature end
        } else if (popType == 0) {
            popImage_alpha += 0.25f;
            if (popImage_alpha >= 1.0f) {
                popImage_alpha = 1.0f;
                isPopRunning = false;
            }
        } else {
            popImage_alpha = 0.65f;
            isPopRunning = false;
        }

        mPuwHandler.sendMessage(mPuwHandler.obtainMessage());
    }*/
    // Aurora xuyong 2014-02-18 modified for aurora's new feature end
    
    private void startMenuDismissThread() {
        // Aurora xuyong 2013-10-14 modified for aurora's new feature start 
        /*new Thread(new Runnable() {
            @Override
            public void run() {
                while (isPopRunning) {
                    try {
                        Thread.sleep(10);
                        updateAlpha(popType);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        }).start();*/
        removeCoverView();
        // Aurora xuyong 2013-10-14 modified for aurora's new feature end
    }
    
    private void startMenuShowThread() {
        // Aurora xuyong 2013-10-14 modified for aurora's new feature start 
        /*new Thread(new Runnable() {
            @Override
            public void run() {
                while (isPopRunning) {
                    try {
                        Thread.sleep(30);
                        updateAlpha(popType);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        }).start();*/
        addCoverView();
        // Aurora xuyong 2013-10-14 modified for aurora's new feature end
    }
    
    /*public void dismissGroupMenu(PopupWindow puw) {
        // Aurora xuyong 2014-02-18 deleted for aurora's new feature start
        //isPopRunning = true;
        //popType = 0;
        // Aurora xuyong 2014-02-18 deleted for aurora's new feature end
        // Aurora xuyong 2013-10-14 deleted for aurora's new feature start 
        //startMenuDismissThread();
        // Aurora xuyong 2013-10-14 deleted for aurora's new feature end
        puw.dismiss();
    }*/
    
    public void dismissGroupNewMenu(PopupWindow puw) {
        // Aurora xuyong 2013-10-14 added for aurora's new feature start 
        removeCoverView();
        // Aurora xuyong 2013-10-14 added for aurora's new feature end
        if (puw != null && puw.isShowing()) {
            puw.dismiss();
        }
    }
    
    class GroupPop extends PopupWindow {
        
        public GroupPop(View view) {
            super(view);
            // Aurora xuyong 2014-02-18 deleted for aurora's new feature start
            //isPopRunning = true;
            //popImage_alpha = 1.0f;
            //popType = 0;
            // Aurora xuyong 2014-02-18 deleted for aurora's new feature end
        }
        
        public void dismiss() {
            // Aurora xuyong 2014-02-18 deleted for aurora's new feature start
            //isPopRunning = true;
            //popType = 0;
            // Aurora xuyong 2014-02-18 deleted for aurora's new feature end
            startMenuDismissThread();
            super.dismiss();
        }
        
    }
    // Aurora xuyong 2014-02-18 deleted for aurora's new feature start
    //private final int CANCEL_POP = 0x127;
    // Aurora xuyong 2014-02-18 deleted for aurora's new feature end
    private GroupPop puw = null;
   // Aurora xuyong 2014-09-12 added for bug #8282 start
    private GroupPop puwGroup = null;
   // Aurora xuyong 2014-09-12 added for bug #8282 end
    // Aurora xuyong 2013-09-26 added for aurora's new feature end
    
    private OnAuroraActionBarItemClickListener mAuroActionBarItemClickListener = new OnAuroraActionBarItemClickListener() {
        
        @Override
        public void onAuroraActionBarItemClicked(int itemId) {
            switch (itemId) {
                case AURORA_ADD_BUTTON_ID:
                     mContactContainer.updateContacts();
                     addContacts(10000);
                     break;
                case AURORA_MORE_BUTTON_ID:
                    // Aurora xuyong 2014-02-18 added for aurora's new feature start
                // Aurora xuyong 2014-09-12 modified for bug #8282 start
                    if (puwGroup != null) {
                        dismissGroupNewMenu(puwGroup);
                    }
                // Aurora xuyong 2014-09-12 modified for bug #8282 end
                     // Aurora xuyong 2014-02-18 added for aurora's new feature end
                    // Aurora xuyong 2014-01-08 modified for aurora's new feature start
                    ContactList list = getRecipients();
                    // Aurora xuyong 2014-10-30 added for privacy feature start
                    boolean showPrivacyFeature = false;
                    if (MmsApp.sHasPrivacyFeature && mConversation != null && mConversation.getPrivacy() > 0) {
                        showPrivacyFeature = true;
                    }
                    // Aurora xuyong 2014-10-30 added for privacy feature end
                    if (list.size() == 1) {
                        // Aurora xuyong 2014-02-25 added for bug #2615 start
                    // Aurora xuyong 2014-05-30 modified for multisim feature start
                    // Aurora xuyong 2014-06-06 modified for bug #5367 start 
                        if (MmsApp.mGnMultiSimMessage && mInsertedSimCount == 2) {
                    // Aurora xuyong 2014-06-06 modififed for bug #5367 end
                            setAuroraMenuAdapter(null);
                            String number = list.get(0).getNumber();
                            if (list.get(0).existsInDatabase()) {
                                int slotIdEx = getLastCallSlotId(ComposeMessageActivity.this.getApplicationContext(), number);
                                switch(slotIdEx) {
                                    case -1:
                                 // Aurora xuyong 2014-07-02 modified for reject feature start
                                        if (!mIsFromReject) {
                                            if (MmsApp.sHasRejectFeature) {
                                                if (Utils.showAddBlack(ComposeMessageActivity.this.getApplicationContext(), number)) {
                                                    // Aurora xuyong 2014-10-30 added for privacy feature start
                                                    if (showPrivacyFeature) {
                                                        setAuroraMenuItems(R.menu.aurora_compose_exist_contact_multisim_menu_ap);
                                                    } else {
                                                        setAuroraMenuItems(R.menu.aurora_compose_exist_contact_multisim_menu_add);
                                                    }
                                                    // Aurora xuyong 2014-10-30 added for privacy feature end
                                                } else if (Utils.showRemoveBlack(ComposeMessageActivity.this.getApplicationContext(), number)) {
                                                    setAuroraMenuItems(R.menu.aurora_compose_exist_contact_multisim_menu_remove);
                                                }
                                            } else {
                                                setAuroraMenuItems(R.menu.aurora_compose_exist_contact_multisim_menu);
                                            }
                                        } else {
                                    // Aurora xuyong 2014-07-26 modified for bug #6897 start
                                            if (Utils.isInBlackList(ComposeMessageActivity.this.getApplicationContext(), number)
                                                    || !Utils.isInWhiteList(ComposeMessageActivity.this.getApplicationContext(), number)) {
                                                setAuroraMenuItems(R.menu.aurora_compose_exist_contact_multisim_menu_reject);
                                            } else {
                                                setAuroraMenuItems(R.menu.aurora_compose_noexist_contact_multisim_menu_reject);
                                            }
                                    // Aurora xuyong 2014-07-26 modified for bug #6897 end
                                        }
                                 // Aurora xuyong 2014-07-02 modified for reject feature end
                                        break;
                                    case 0:
                                 // Aurora xuyong 2014-07-02 modified for reject feature start
                                        if (!mIsFromReject) {
                                            if (MmsApp.sHasRejectFeature) {
                                                if (Utils.showAddBlack(ComposeMessageActivity.this.getApplicationContext(), number)) {
                                                    // Aurora xuyong 2014-10-30 added for privacy feature start
                                                    if (showPrivacyFeature) {
                                                        setAuroraMenuItems(R.menu.aurora_compose_exist_contact_multisim1f_menu_ap);
                                                    } else {
                                                        setAuroraMenuItems(R.menu.aurora_compose_exist_contact_multisim1f_menu_add);
                                                    }
                                                    // Aurora xuyong 2014-10-30 added for privacy feature end
                                                } else if (Utils.showRemoveBlack(ComposeMessageActivity.this.getApplicationContext(), number)) {
                                                    setAuroraMenuItems(R.menu.aurora_compose_exist_contact_multisim1f_menu_remove);
                                                }
                                            } else {
                                                setAuroraMenuItems(R.menu.aurora_compose_exist_contact_multisim1f_menu);
                                            }
                                        } else {
                                    // Aurora xuyong 2014-07-26 modified for bug #6897 start
                                            if (Utils.isInBlackList(ComposeMessageActivity.this.getApplicationContext(), number)
                                                    || !Utils.isInWhiteList(ComposeMessageActivity.this.getApplicationContext(), number)) {
                                                setAuroraMenuItems(R.menu.aurora_compose_exist_contact_multisim1f_menu_reject);
                                            } else {
                                                setAuroraMenuItems(R.menu.aurora_compose_noexist_contact_multisim1f_menu_reject);
                                            }
                                    // Aurora xuyong 2014-07-26 modified for bug #6897 start
                                        }
                                 // Aurora xuyong 2014-07-02 modified for reject feature end
                                        break;
                                    case 1:
                                 // Aurora xuyong 2014-07-02 added for reject feature start
                                        if (!mIsFromReject) {
                                            if (MmsApp.sHasRejectFeature) {
                                                if (Utils.showAddBlack(ComposeMessageActivity.this.getApplicationContext(), number)) {
                                                    // Aurora xuyong 2014-10-30 added for privacy feature start
                                                    if (showPrivacyFeature) {
                                                        setAuroraMenuItems(R.menu.aurora_compose_exist_contact_multisim2f_menu_ap);
                                                    } else {
                                                        setAuroraMenuItems(R.menu.aurora_compose_exist_contact_multisim2f_menu_add);
                                                    }
                                                    // Aurora xuyong 2014-10-30 added for privacy feature end
                                                } else if (Utils.showRemoveBlack(ComposeMessageActivity.this.getApplicationContext(), number)) {
                                                    setAuroraMenuItems(R.menu.aurora_compose_exist_contact_multisim2f_menu_remove);
                                                } 
                                            } else {
                                                setAuroraMenuItems(R.menu.aurora_compose_exist_contact_multisim2f_menu);
                                            }
                                        } else {
                                    // Aurora xuyong 2014-07-26 modified for bug #6897 start
                                            if (Utils.isInBlackList(ComposeMessageActivity.this.getApplicationContext(), number)
                                                    || !Utils.isInWhiteList(ComposeMessageActivity.this.getApplicationContext(), number)) {
                                                setAuroraMenuItems(R.menu.aurora_compose_exist_contact_multisim2f_menu_reject);
                                            } else {
                                                setAuroraMenuItems(R.menu.aurora_compose_noexist_contact_multisim2f_menu_reject);
                                            }
                                    // Aurora xuyong 2014-07-26 modified for bug #6897 end
                                        }
                                 // Aurora xuyong 2014-07-02 added for reject feature end
                                        break;
                                }
                            } else if (!list.get(0).existsInDatabase()) {
                                int slotIdNew = getLastCallSlotId(ComposeMessageActivity.this.getApplicationContext(), number);
                                switch(slotIdNew) {
                                    case -1:
                                 // Aurora xuyong 2014-07-02 modified for reject feature start
                                        if (!mIsFromReject) {
                                            if (MmsApp.sHasRejectFeature) {
                                                if (Utils.showAddBlack(ComposeMessageActivity.this.getApplicationContext(), number)) {
                                                    // Aurora xuyong 2014-10-30 added for privacy feature start
                                                    if (showPrivacyFeature) {
                                                        setAuroraMenuItems(R.menu.aurora_compose_new_contact_multisim_menu_ap);
                                                    } else {
                                                        setAuroraMenuItems(R.menu.aurora_compose_new_contact_multisim_menu_add);
                                                    }
                                                    // Aurora xuyong 2014-10-30 added for privacy feature end
                                                } else if (Utils.showRemoveBlack(ComposeMessageActivity.this.getApplicationContext(), number)) {
                                                    setAuroraMenuItems(R.menu.aurora_compose_new_contact_multisim_menu_remove);
                                                }
                                            } else {
                                                setAuroraMenuItems(R.menu.aurora_compose_new_contact_multisim_menu);
                                            }
                                        } else {
                                    // Aurora xuyong 2014-07-26 modified for bug #6897 start
                                            if (Utils.isInBlackList(ComposeMessageActivity.this.getApplicationContext(), number)
                                                    || !Utils.isInWhiteList(ComposeMessageActivity.this.getApplicationContext(), number)) {
                                                setAuroraMenuItems(R.menu.aurora_compose_new_contact_multisim_menu_reject);
                                            } else {
                                                setAuroraMenuItems(R.menu.aurora_compose_nonew_contact_multisim_menu_reject);
                                            }
                                    // Aurora xuyong 2014-07-26 modified for bug #6897 end
                                        }
                                 // Aurora xuyong 2014-07-02 modified for reject feature end
                                        break;
                                    case 0:
                                // Aurora xuyong 2014-07-02 modified for reject feature start
                                        if (!mIsFromReject) {
                                            if (MmsApp.sHasRejectFeature) {
                                                if (Utils.showAddBlack(ComposeMessageActivity.this.getApplicationContext(), number)) {
                                                    // Aurora xuyong 2014-10-30 added for privacy feature start
                                                    if (showPrivacyFeature) {
                                                        setAuroraMenuItems(R.menu.aurora_compose_new_contact_multisim1f_menu_ap);
                                                    } else {
                                                        setAuroraMenuItems(R.menu.aurora_compose_new_contact_multisim1f_menu_add);
                                                    }
                                                    // Aurora xuyong 2014-10-30 added for privacy feature end
                                                } else if (Utils.showRemoveBlack(ComposeMessageActivity.this.getApplicationContext(), number)) {
                                                    setAuroraMenuItems(R.menu.aurora_compose_new_contact_multisim1f_menu_remove);
                                                }
                                            } else {
                                                setAuroraMenuItems(R.menu.aurora_compose_new_contact_multisim1f_menu);
                                            }
                                        } else {
                                    // Aurora xuyong 2014-07-26 modified for bug #6897 start
                                            if (Utils.isInBlackList(ComposeMessageActivity.this.getApplicationContext(), number)
                                                    || !Utils.isInWhiteList(ComposeMessageActivity.this.getApplicationContext(), number)) {
                                                setAuroraMenuItems(R.menu.aurora_compose_new_contact_multisim1f_menu_reject);
                                            } else {
                                                setAuroraMenuItems(R.menu.aurora_compose_nonew_contact_multisim1f_menu_reject);
                                            }
                                    // Aurora xuyong 2014-07-26 modified for bug #6897 end
                                        }
                                 // Aurora xuyong 2014-07-02 modified for reject feature end
                                        break;
                                    case 1:
                                // Aurora xuyong 2014-07-02 modified for reject feature start
                                        if (!mIsFromReject) {
                                            if (MmsApp.sHasRejectFeature) {
                                                if (Utils.showAddBlack(ComposeMessageActivity.this.getApplicationContext(), number)) {
                                                    // Aurora xuyong 2014-10-30 added for privacy feature start
                                                    if (showPrivacyFeature) {
                                                        setAuroraMenuItems(R.menu.aurora_compose_new_contact_multisim2f_menu_ap);
                                                    } else {
                                                        setAuroraMenuItems(R.menu.aurora_compose_new_contact_multisim2f_menu_add);
                                                    }
                                                    // Aurora xuyong 2014-10-30 added for privacy feature end
                                                } else if (Utils.showRemoveBlack(ComposeMessageActivity.this.getApplicationContext(), number)) {
                                                    setAuroraMenuItems(R.menu.aurora_compose_new_contact_multisim2f_menu_remove);
                                                }
                                            } else {
                                                setAuroraMenuItems(R.menu.aurora_compose_new_contact_multisim2f_menu);
                                            }
                                        } else {
                                    // Aurora xuyong 2014-07-26 modified for bug #6897 start
                                            if (Utils.isInBlackList(ComposeMessageActivity.this.getApplicationContext(), number)
                                                    || !Utils.isInWhiteList(ComposeMessageActivity.this.getApplicationContext(), number)) {
                                                setAuroraMenuItems(R.menu.aurora_compose_new_contact_multisim2f_menu_reject);
                                            } else {
                                                setAuroraMenuItems(R.menu.aurora_compose_nonew_contact_multisim2f_menu_reject);
                                            }
                                    // Aurora xuyong 2014-07-26 modified for bug #6897 end
                                        }
                                 // Aurora xuyong 2014-07-02 modified for reject feature end
                                        break;
                                }
                            }
                            try {
                                showAuroraMenu();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        } else {
                            setAuroraMenuAdapter(null);
                       // Aurora xuyong 2014-07-02 added for reject feature start
                            String number = list.get(0).getNumber();
                       // Aurora xuyong 2014-07-02 added for reject feature end
                            if (list.get(0).existsInDatabase()) {
                          // Aurora xuyong 2014-07-02 modified for reject feature start
                                if (!mIsFromReject) {
                                    if (MmsApp.sHasRejectFeature) {
                                        if (Utils.showAddBlack(ComposeMessageActivity.this.getApplicationContext(), number)) {
                                            // Aurora xuyong 2014-10-30 added for privacy feature start
                                            if (showPrivacyFeature) {
                                                setAuroraMenuItems(R.menu.aurora_compose_exist_contact_menu_ap);
                                            } else {
                                                setAuroraMenuItems(R.menu.aurora_compose_exist_contact_menu_add);
                                            }
                                            // Aurora xuyong 2014-10-30 added for privacy feature end
                                        } else if (Utils.showRemoveBlack(ComposeMessageActivity.this.getApplicationContext(), number)) {
                                            setAuroraMenuItems(R.menu.aurora_compose_exist_contact_menu_remove);
                                        }
                                    } else {
                                        setAuroraMenuItems(R.menu.aurora_compose_exist_contact_menu);
                                    }
                                } else {
                             // Aurora xuyong 2014-07-26 modified for bug #6897 start
                                    if (Utils.isInBlackList(ComposeMessageActivity.this.getApplicationContext(), number)
                                            || !Utils.isInWhiteList(ComposeMessageActivity.this.getApplicationContext(), number)) {
                                        setAuroraMenuItems(R.menu.aurora_compose_exist_contact_menu_reject);
                                    } else {
                                        setAuroraMenuItems(R.menu.aurora_compose_noexist_contact_menu_reject);
                                    }
                             // Aurora xuyong 2014-07-26 modified for bug #6897 end
                                }
                          // Aurora xuyong 2014-07-02 modified for reject feature end
                            } else if (!list.get(0).existsInDatabase()) {
                          // Aurora xuyong 2014-07-02 modified for reject feature start
                                if (!mIsFromReject) {
                                    if (MmsApp.sHasRejectFeature) {
                                        if (Utils.showAddBlack(ComposeMessageActivity.this.getApplicationContext(), number)) {
                                            // Aurora xuyong 2014-10-30 added for privacy feature start
                                            if (showPrivacyFeature) {
                                                setAuroraMenuItems(R.menu.aurora_compose_new_contact_menu_ap);
                                            } else {
                                                setAuroraMenuItems(R.menu.aurora_compose_new_contact_menu_add);
                                            }
                                            // Aurora xuyong 2014-10-30 added for privacy feature end
                                        } else if (Utils.showRemoveBlack(ComposeMessageActivity.this.getApplicationContext(), number)) {
                                            setAuroraMenuItems(R.menu.aurora_compose_new_contact_menu_remove);
                                        }
                                    } else {
                                        setAuroraMenuItems(R.menu.aurora_compose_new_contact_menu);
                                    }
                                } else {
                             // Aurora xuyong 2014-07-26 modified for bug #6897 start
                                    if (Utils.isInBlackList(ComposeMessageActivity.this.getApplicationContext(), number)
                                            || !Utils.isInWhiteList(ComposeMessageActivity.this.getApplicationContext(), number)) {
                                        setAuroraMenuItems(R.menu.aurora_compose_new_contact_menu_reject);
                                    } else {
                                        setAuroraMenuItems(R.menu.aurora_compose_nonew_contact_menu_reject);
                                    }
                             // Aurora xuyong 2014-07-26 modified for bug #6897 end
                                }
                          // Aurora xuyong 2014-07-02 modified for reject feature end
                            }
                            // Aurora xuyong 2014-02-25 added for bug #2615 end
                            try {
                                showAuroraMenu();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                    // Aurora xuyong 2014-05-30 modified for multisim feature end
                        }
                     // Aurora xuyong 2014-01-08 modified for aurora's new feature end
                    } else {
// Aurora xuyong 2013-09-26 added for aurora's new feature start
                       // Aurora xuyong 2014-0108 deleted for aurora's new feature start
                        // Aurora xuyong 2014-0108 deleted for aurora's new feature end
                        // Aurora xuyong 2014-02-18 modified for aurora's new feature start
                    // Aurora xuyong 2014-09-12 modified for bug #8282 start
                        if (puwGroup != null && !puwGroup.isShowing()) {
                    // Aurora xuyong 2014-09-12 modified for bug #8282 end
                            startMenuShowThread();
                            // Aurora xuyong 2014-03-07 modified for aurora's new feature start 
                       // Aurora xuyong 2014-09-12 modified for bug #8282 start
                            puwGroup.showAtLocation(mDecorView,
                       // Aurora xuyong 2014-09-12 modified for bug #8282 end
                                    Gravity.BOTTOM, 0, 0);
                            // Aurora xuyong 2014-03-07 modified for aurora's new feature end
                        }
                        // Aurora xuyong 2014-02-18 modified for aurora's new feature end
                    }
                     // Aurora xuyong 2013-09-26 added for aurora's new feature end
                     break;
                default:
                     break;
            }
            hideInputMethod();
        }
    };
    // Aurora xuyong 2015-03-04 added for bug #11831 start
    private void handleAuroraActionBarBackItemClick() {
        if( mMsgListAdapter.mIsDeleteMode) {
            onFinishMultiChoose();
            return;
        }
        if (mIsLeMei) {
            if (mWorkingMessage != null) {
                mWorkingMessage.discard();
            }
            // Aurora xuyong 2014-07-14 added for aurora's new feature start
            if (operConvMap != null && operConvMap.size() > 0) {
                deleteConvByIds(operConvMap);
            }
            // Aurora xuyong 2014-07-14 added for aurora's new feature end
            finish();
        } else {
            if (mAttachmentSlideView != null
                    && View.VISIBLE == mAttachmentSlideView.getVisibility()) {
                if(mAttachmentSlideViewCurrent == mAttachmentSlideViewHome){
                    // Aurora xuyong 2014-03-06 added for aurora's new feature start
                    if (mAddButton != null) {
                        mAddButton.setImageResource(R.drawable.aurora_insert_attch_selector);
                    }
                    // Aurora xuyong 2014-03-06 added for aurora's new feature end
                    mAttachmentSlideView.setVisibility(View.GONE);
                }else{
                    showAnAttachmentSlide(mAttachmentSlideViewHome);
                }
                return;
            }
            if (FeatureOption.MTK_SEND_RR_SUPPORT) {
                checkAndSendReadReport();
            }
            // Aurora yudingmin 2014-10-25 modify for bug #9343 start
            final Context context = getApplicationContext();
            exitComposeMessageActivity(new Runnable() {
                public void run() {
                  // Aurora xuyong 2014-07-14 added for aurora's new feature start
                    if (operConvMap != null && operConvMap.size() > 0) {
                        deleteConvByIds(context, operConvMap);
                    }
                  // Aurora xuyong 2014-07-14 added for aurora's new feature end
                }
            // Aurora xuyong 2014-03-06 modified for bug #2819 start
            }, true);
            // Aurora xuyong 2014-03-06 modified for bug #2819 end
            // Aurora yudingmin 2014-10-25 modify for bug #9343 end
        }
    }
    // Aurora xuyong 2015-03-04 added for bug #11831 end
    // Aurora xuyong 2013-09-23 added for aurora's new feature start
    // Aurora xuyong 2015-03-04 added for bug #11831 start
    private static final int BACK_TYPE_ACTIONBAR = 0x01;
    private static final int BACK_TYPE_BACKCODE = 0x02;
    // Aurora xuyong 2015-03-04 added for bug #11831 end
    private OnAuroraActionBarBackItemClickListener auroraActionBarBackItemClickListener = new OnAuroraActionBarBackItemClickListener() {
        
        @Override
        public void onAuroraActionBarBackItemClicked(int itemId) {
            switch (itemId) {
            case OnAuroraActionBarBackItemClickListener.HOME_ITEM:
                // Aurora xuyong 2015-03-04 modified for bug #11831 start
                if (isRecipientsEditorVisible()) {
                    // Aurora xuyong 2015-03-06 modified for bug #12051 start
                    if (mContactContainer.isFocused()) {
                        mContactContainer.setAddingRecipient(true);
                    }
                    if (mContactContainer != null && mContactContainer.isAddingRecipient()) {
                    // Aurora xuyong 2015-03-06 modified for bug #12051 end
                        mContactContainer.setOnClickBack(BACK_TYPE_ACTIONBAR);
                        return;
                    }
                }
                handleAuroraActionBarBackItemClick();
                // Aurora xuyong 2015-03-04 modified for bug #11831 end
                break;

            default:
                break;
            }
            
        }
    };
    // Aurora xuyong 2013-09-23 added for aurora's new feature end
    // Aurora xuyong 2013-10-21 added for bug #172 start
    // Aurora xuyong 2014-12-01 modified for bug #10249 start
    private final int AURORA_COPY_ITEM_INDEX = 3;
    // Aurora xuyong 2014-12-01 modified for bug #10249 end
    private final int AURORA_FORWARD_ITEM_INDEX = 2;
    // Aurora xuyong 2014-03-04 modified for aurora's new feature start
    // Aurora xuyong 2014-12-01 modified for bug #10249 start
    private final int AURORA_PICK_ITEM_INDEX = 4;
    private final int AURORA_DELETE_ITEM_INDEX = 1;
    // Aurora xuyong 2014-12-01 modified for bug #10249 end
    // Aurora xuyong 2014-03-04 modified for aurora's new feature end
    // Aurora xuyong 2014-07-02 added for reject feature start
    // Aurora xuyong 2014-12-02 modified for aurora's new feature start
    private final int AURORA_REJECT_RESUME_ITEM_INDEX = 2;
    private final int AURORA_REJECT_DELETE_ITEM_INDEX = 1;
    // Aurora xuyong 2014-12-02 modified for aurora's new feature end
    // Aurora xuyong 2014-07-02 added for reject feature end
    private void refreshBottomMenu() {
        if (mMsgListAdapter.mIsDeleteMode) {
          // Aurora xuyong 2014-08-22 deleted for bug #7739 & #7853 start
            //int selectMmsNum = selectMmsItem();
          // Aurora xuyong 2014-08-22 deleted for bug #7739 & #7853 end
            int selectNum = mMsgListAdapter.getSelectedNumber();
          // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 start
            int selectMmsNum = mMsgListAdapter.getSelectedMmsNumber();
          // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 end
          // Aurora xuyong 2014-07-02 modified for reject feature start
            if (!mIsFromReject) {
                if (selectNum == 0) {
                    // Aurora xuyong 2014-03-04 modified for aurora's new feature start
                    setBottomFlag(false, false, false, false);
                    // Aurora xuyong 2014-03-04 modified for aurora's new feature end
                } else {
                    if (selectMmsNum == 0) {
                        // Aurora xuyong 2014-03-04 modified for aurora's new feature start
                        setBottomFlag(true, true, false, true);
                        // Aurora xuyong 2014-03-04 modified for aurora's new feature end
                    } else if (selectMmsNum == 1) {
                        if (selectNum == 1) {
                            // Aurora xuyong 2014-03-04 modified for aurora's new feature start
                            setBottomFlag(false, true, true, true);
                            // Aurora xuyong 2014-03-04 modified for aurora's new feature end
                        } else {
                            // Aurora xuyong 2014-03-04 modified for aurora's new feature start
                            setBottomFlag(false, false, false, true);
                            // Aurora xuyong 2014-03-04 modified for aurora's new feature end
                        }
                    } else {
                        // Aurora xuyong 2014-03-04 modified for aurora's new feature start
                        setBottomFlag(false, false, false, true);
                        // Aurora xuyong 2014-03-04 modified for aurora's new feature end
                    }    
                }
            } else {
                if (selectNum == 0) {
                    setBottomFlag(false, false, false, false);
                } else {
                    setBottomFlag(true, true, false, false);
                }
            }
          // Aurora xuyong 2014-07-02 modified for reject feature end
        }
    }
    // Aurora xuyong 2014-03-04 added for aurora's new feature start
    private boolean selectedItemhasAttachment(MessageItem item) {
        if (item != null) {
            SlideshowModel slideModel = item.mSlideshow;
            // Aurora xuyong 2014-03-06 added for bug #2821 start
            if (slideModel == null) {
                return false;
            }
            // Aurora xuyong 2014-03-06 added for bug #2821 end
            for (SlideModel model : slideModel) {
                if (model.hasImage() || model.hasAudio() || model.hasVideo()) {
                    return true;
                }
            }
            return false;
        }
        return false;
    }
    // Aurora xuyong 2014-03-04 added for aurora's new feature end
    // Aurora xuyong 2014-08-22 deleted for bug #7739 & #7853 start
    /*private int selectMmsItem() {
        //Cursor cursor = mMsgListAdapter.getCursor();
        //cursor.moveToPosition(-1);
        int sc = 0;
        //int i = 0;
        // Aurora xuyong 2014-08-21 deleted for code optimizing start
        /*while(cursor.moveToNext()) {
        // Aurora xuyong 2014-08-21 deleted for code optimizing end
            //Aurora xuyong 2014-08-16 modified for aurora's new feature start
            if(mSelectMap.get(i) != null && mSelectMap.get(i)) {
            //Aurora xuyong 2014-08-16 modified for aurora's new feature end
                if(cursor.getString(COLUMN_MSG_TYPE).equals("mms")) {
                    sc++;
                }
            }
            i++;
        // Aurora xuyong 2014-08-21 deleted for code optimizing start
        }*/
        // Aurora xuyong 2014-08-21 deleted for code optimizing end
        // Aurora xuyong 2014-08-21 added for code optimizing start
        /*Iterator iter = mSelectMap.entrySet().iterator();
        while (iter.hasNext()) {
            @SuppressWarnings("unchecked")
            Map.Entry<Integer, Boolean> entry = (Entry<Integer, Boolean>) iter.next();
            if (entry.getValue().booleanValue()) {
                cursor.moveToPosition(entry.getKey().intValue());
                if(cursor.getString(COLUMN_MSG_TYPE).equals("mms")) {
                    sc++;
                }
            }
        }
        // Aurora xuyong 2014-08-21 added for code optimizing end
        return sc;
    }*/
   // Aurora xuyong 2014-08-22 deleted for bug #7739 & #7853 end
    // Aurora xuyong 2014-03-04 modified for aurora's new feature start
    // Aurora xuyong 2014-07-02 modified for reject feature start
    private void setBottomFlag(boolean copyOrResumeFlag, boolean forwardOrDeleteFlag, boolean pickFlag, boolean deleteFlag) {
        AuroraMenu auroraMenu = mAuroraActionBar.getAuroraActionBottomBarMenu();
        if (!mIsFromReject) {
            auroraMenu.setBottomMenuItemEnable(AURORA_COPY_ITEM_INDEX, copyOrResumeFlag);
            auroraMenu.setBottomMenuItemEnable(AURORA_FORWARD_ITEM_INDEX, forwardOrDeleteFlag);
            auroraMenu.setBottomMenuItemEnable(AURORA_PICK_ITEM_INDEX, pickFlag);
            auroraMenu.setBottomMenuItemEnable(AURORA_DELETE_ITEM_INDEX, deleteFlag);
        } else {
            auroraMenu.setBottomMenuItemEnable(AURORA_REJECT_RESUME_ITEM_INDEX, copyOrResumeFlag);
            auroraMenu.setBottomMenuItemEnable(AURORA_REJECT_DELETE_ITEM_INDEX, forwardOrDeleteFlag);
        }
     // Aurora xuyong 2014-07-02 modified for reject feature end
    }
    // Aurora xuyong 2014-03-04 modified for aurora's new feature end
    // Aurora xuyong 2013-10-21 added for bug #172 end
    // Aurora xuyong 2014-07-04 added for reject featrue start
    private boolean mAddToBlackList = false;
    // Aurora xuyong 2014-07-04 added for reject featrue end
    private OnAuroraMenuItemClickListener auroraMenuCallBack = new OnAuroraMenuItemClickListener() {
        
        @Override
        public void auroraMenuItemClick(int itemId) {
            switch (itemId) {
          // Aurora xuyong 2014-07-02 added for reject feature start
            case R.id.aurora_back_sms_id:
                 Intent smsReplyIntent = createIntent(ComposeMessageActivity.this, 0);
                 smsReplyIntent.putExtra("address", mConversation.getRecipients().get(0).getNumber());
                 smsReplyIntent.putExtra(FORWARD_MESSAGE, true);
                 smsReplyIntent.setClassName(ComposeMessageActivity.this, "com.android.mms.ui.ForwardMessageActivity");
                 startActivity(smsReplyIntent);
                 break;
            case R.id.aurora_not_reject_more_id:
                 View view1 = LayoutInflater.from(ComposeMessageActivity.this).inflate(R.layout.aurora_resume_layout, null);
                 final AuroraCheckBox auroraResumeCheckBox1 = (AuroraCheckBox)view1.findViewById(R.id.aurora_black_resume);
                 auroraResumeCheckBox1.setChecked(true);
                 final TextView auroraResumeText1 = (TextView)view1.findViewById(R.id.aurora_remove_message);
                 auroraResumeText1.setText(R.string.aurora_not_reject_more_message);
              // Aurora xuyong 2014-09-02 added for whitelist feature start
                 final String number = mConversation.getRecipients().get(0).getNumber();
                 final boolean isInBlackList = Utils.isInBlackList(ComposeMessageActivity.this, number);
              // Aurora xuyong 2014-09-02 added for whitelist feature end
                 AuroraAlertDialog dialogs1 = new AuroraAlertDialog.Builder(ComposeMessageActivity.this)
                    .setTitle(ComposeMessageActivity.this.getResources().getString(R.string.aurora_not_reject_more))
                    .setView(view1)
                    .setPositiveButton(android.R.string.ok,
                        new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int whichButton) {
                             // Aurora xuyong 2014-08-01 added for bug #7079 start
                                dialog.dismiss();
                             // Aurora xuyong 2014-09-02 added for whitelist feature start
                                if (isInBlackList) {
                                    if (mHandler != null) {
                                        Message msg = mHandler.obtainMessage(SHOW_REJECT_DIALOG);
                                        msg.sendToTarget();
                                    }
                                 // Aurora xuyong 2014-08-01 added for bug #7079 end
                                    //String num = mConversation.getRecipients().get(0).getNumber();
                                      ContentValues cv = new ContentValues();
                                      cv.put("number", number);
                                      try {
                                        mContentResolver.insert(Uri.parse("content://white-list/recipient"), cv);
                                    } catch (SQLiteException e) {
                                        e.printStackTrace();
                                    }
                                    if(auroraResumeCheckBox1.isChecked()){
                                        cv.put("isblack", 0);
                                    }else{
                                        cv.put("isblack", -1);
                                    }
                                    //cv.put("number", number);
                                 // Aurora xuyong 2014-08-01 modified for bug #7079 start
                                    try {
                                        int uri2 = mContentResolver.update(Uri.parse("content://com.android.contacts/black"), cv, "PHONE_NUMBERS_EQUAL(number, " + number + ", 0)", null);
                                    } catch (SQLiteException e) {
                                        e.printStackTrace();
                                    } finally {
                                        if (mHandler != null) {
                                            Message msg = mHandler.obtainMessage(DISMISS_REJECT_DIALOG);
                                            msg.sendToTarget();
                                        }
                                    }
                                } else {
                                    if (mHandler != null) {
                                        Message msg = mHandler.obtainMessage(SHOW_REJECT_DIALOG);
                                        msg.sendToTarget();
                                    }
                                    boolean needFinishActivity = false;
                                    if(auroraResumeCheckBox1.isChecked()){
                                        if (mConversation != null) {
                                            long threadId = mConversation.getThreadId();
                                            Uri threadUriInsert = Uri.parse(
                                                            "content://mms-sms/conversations_resume_all/" + threadId);
                                            ContentValues threadValuesInsert = new ContentValues();
                                            threadValuesInsert.put("reject", 0);
                                            ComposeMessageActivity.this.getContentResolver().update(threadUriInsert, threadValuesInsert, null, null);
                                            needFinishActivity = true;
                                        }
                                    }
                                    ContentValues cv = new ContentValues();
                                    cv.put("number", number);
                                    try {
                                        //mContentResolver.update(Uri.parse("content://whitelist/recipient"), cv, "PHONE_NUMBERS_EQUAL(number, " + num + ", 0)", null);
                                        mContentResolver.insert(Uri.parse("content://white-list/recipient"), cv);
                                    } catch (SQLiteException e) {
                                        e.printStackTrace();
                                    } finally {
                                        if (mHandler != null) {
                                            Message msg = mHandler.obtainMessage(DISMISS_REJECT_DIALOG);
                                            msg.obj = new Boolean(needFinishActivity);
                                            msg.sendToTarget();
                                        }
                    // Aurora xuyong 2014-09-02 added for whitelist feature end
                                    }
                                }
                             // Aurora xuyong 2014-08-01 modified for bug #7079 end
                            }
                        }
                    )
                    .setNegativeButton(android.R.string.cancel,   
                            new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int whichButton) {
                            dialog.dismiss();
                        }
                    }).show();
                 break;
            case R.id.aurora_resume_all_id:
              // Aurora xuyong 2014-08-05 modified for bug #7079 start
                 new Thread(new Runnable() {
                     
                     @Override
                     public void run() {
                         resumeAllMsg();
                     }
                     
                 }).start();
                 onFinishMultiChoose();
              // Aurora xuyong 2014-08-05 modified for bug #7079 end
                 break;
            case R.id.aurora_add_to_black:
               // Aurora xuyong 2014-07-04 added for reject featrue start 
                  mAddToBlackList = true;
               // Aurora xuyong 2014-07-04 added for reject featrue end
                    Intent addIntent = new Intent(Intent.ACTION_MAIN, null);
               // Aurora xuyong 2014-09-09 deleted for bug #8178 start
                    //addIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK
                    //     | Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
               // Aurora xuyong 2014-09-09 deleted for bug #8178 end
                    addIntent.setClassName("com.aurora.reject", "com.aurora.reject.AuroraManuallyAddActivity");
                 Bundle bundle = new Bundle();
                 Contact addContact = mConversation.getRecipients().get(0);
                 bundle.putString("add_number", addContact.getNumber()); 
                 bundle.putString("add_name", addContact.getNameOnly());
                 bundle.putBoolean("add", true);
                 addIntent.putExtras(bundle); 
                 ComposeMessageActivity.this.startActivity(addIntent);
                 break;
            case R.id.aurora_remove_from_black:
                 View view2 = LayoutInflater.from(ComposeMessageActivity.this).inflate(R.layout.aurora_resume_layout, null);
                 final AuroraCheckBox auroraResumeCheckBox2 = (AuroraCheckBox)view2.findViewById(R.id.aurora_black_resume);
                 auroraResumeCheckBox2.setChecked(true);
                 final TextView auroraResumeText2 = (TextView)view2.findViewById(R.id.aurora_remove_message);
                 auroraResumeText2.setText(R.string.aurora_resume_tag1);
                 AuroraAlertDialog dialogs2 = new AuroraAlertDialog.Builder(ComposeMessageActivity.this)
                    .setTitle(ComposeMessageActivity.this.getResources().getString(R.string.aurora_remove_black))
                    .setView(view2)
                    .setPositiveButton(android.R.string.ok,
                        new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int whichButton) {
                                String num = mConversation.getRecipients().get(0).getNumber();
                                  ContentValues cv = new ContentValues();
                                if(auroraResumeCheckBox2.isChecked()){
                                    cv.put("isblack", 0);
                                }else{
                                    cv.put("isblack", -1);
                                }
                                cv.put("number", num);
                             // Aurora xuyong 2014-08-01 modified for bug #7079 start
                                try {
                                    int uri2 = mContentResolver.update(Uri.parse("content://com.android.contacts/black"), cv,  "PHONE_NUMBERS_EQUAL(number, " + num + ", 0)", null);
                                } catch (SQLiteException e) {
                                    e.printStackTrace();
                                } finally {
                             // Aurora xuyong 2014-08-01 modified for bug #7079 end
                                    dialog.dismiss();
                                }
                            }
                        }
                    )
                    .setNegativeButton(android.R.string.cancel,   
                            new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int whichButton) {
                            dialog.dismiss();
                        }
                    }).show();
                 break;
          // Aurora xuyong 2014-07-02 added for reject feature end
            // Aurora xuyong 2013-09-23 added for aurora's new feature start
            case R.id.aurora_batch_copy:
                 // Aurora xuyong 2013-09-24 added for aurora;s new feature start
              //Aurora xuyong 2014-08-16 deleted for aurora's new feature start
                 //onFinishMultiChoose();
              //Aurora xuyong 2014-08-16 deleted for aurora's new feature end
              // Aurora xuyong 2014-08-19 modified for bug #7739 start
                 if (copyMsg()) {
              // Aurora xuyong 2014-08-19 modified for bug #7739 end
              //Aurora xuyong 2014-08-16 added for aurora's new feature start
              // Aurora xuyong 2014-08-19 modified for bug #7739 start
                     onFinishMultiChoose();
                 }
              // Aurora xuyong 2014-08-19 modified for bug #7739 end
              //Aurora xuyong 2014-08-16 added for aurora's new feature end
                 // Aurora xuyong 2013-09-24 added for aurora;s new feature end
                    break;
               case R.id.aurora_batch_forward:
                 // Aurora xuyong 2013-09-24 added for aurora;s new feature start
              //Aurora xuyong 2014-08-16 deleted for aurora's new feature start
                    //onFinishMultiChoose();
              //Aurora xuyong 2014-08-16 deleted for aurora's new feature end
              // Aurora xuyong 2014-08-19 modified for bug #7739 start
                    if (forwardMsg()) {
              // Aurora xuyong 2014-08-19 modified for bug #7739 end
              //Aurora xuyong 2014-08-16 added for aurora's new feature start
              // Aurora xuyong 2014-08-19 modified for bug #7739 start
                        onFinishMultiChoose();
                    }
              // Aurora xuyong 2014-08-19 modified for bug #7739 end
              //Aurora xuyong 2014-08-16 added for aurora's new feature end
                 // Aurora xuyong 2013-09-24 added for aurora;s new feature end
                    break;
            // Aurora xuyong 2014-03-04 added for aurora's new feature start
               case R.id.aurora_batch_pick:
                    pickMms();
                    break;
            // Aurora xuyong 2014-03-04 added for aurora's new feature end
               case R.id.aurora_batch_delete:
                 // Aurora xuyong 2013-09-24 added for aurora;s new feature start
                 // Aurora xuyong deleted 2013-11-29 deleted for aurora's new feature start
                    //onFinishMultiChoose();
                 // Aurora xuyong deleted 2013-11-29 deleted for aurora's new feature end
                    deleteMsg();
                 // Aurora xuyong 2013-09-24 added for aurora;s new feature end
                    break;
            // Aurora xuyong 2013-09-23 added for aurora's new feature end
           // Aurora xuyong 2014-07-02 added for reject feature start
               case R.id.aurora_batch_resume:
                    resumeMsg();
                    break;
           // Aurora xuyong 2014-07-02 added for reject feature end
            case R.id.aurora_exsit_dail:
            case R.id.aurora_new_dail:
                {
                    dialRecipient(false);
                }
                break;
          // Aurora xuyong 2014-05-30 added for multisim feature start
            case R.id.aurora_exsit_dail_sim1:
            case R.id.aurora_new_dail_sim1:
                 {
                     multiSimDialRecipient(0, false);
                 }
                 break;
            case R.id.aurora_exsit_dail_sim2:
            case R.id.aurora_new_dail_sim2:
                 {
                     multiSimDialRecipient(1, false);
                 }
                 break;
            case R.id.aurora_dail_multi_sim1:
                 {
                     multiSimDialCorresRecipient(0, mSelectedNumberInGroup, false);
                 }
                 break;
            case R.id.aurora_dail_multi_sim2:
                 {
                     multiSimDialCorresRecipient(1, mSelectedNumberInGroup, false);
                 }
                 break;
          // Aurora xuyong 2014-05-30 added for multisim feature end
          // Aurora xuyong 2014-04-21 added for bug #4438 start
            case R.id.aurora_current_view:
                if (mCurrentContact != null && mCurrentContact.existsInDatabase()) {
                     Uri contactUri = mCurrentContact.getUri();
                     Intent intent = new Intent(Intent.ACTION_VIEW, contactUri);
                     intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);
                     startActivity(intent);
                }
                break;
          // Aurora xuyong 2014-04-21 added for bug #4438 end
            case R.id.aurora_exsit_view:
                {
                    ContactList list = getRecipients();
                // Aurora xuyong 2014-01-29 modified for privacy feature start
                    Contact viewContact = list.get(0);
                    if (list.size() == 1 && viewContact.existsInDatabase()) {
                        Uri contactUri = viewContact.getUri();
                // Aurora xuyong 2014-01-29 modified for privacy feature end
                        Intent intent = new Intent(Intent.ACTION_VIEW, contactUri);
                        // Aurora xuyong 2014-01-29 added for privacy feature start
                        intent.putExtra("is_privacy_contact", viewContact.getPrivacy() > 0);
                        // Aurora xuyong 2014-01-29 added for privacy feature end
                        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);
                        startActivity(intent);
                    }
                }
                break;
            case R.id.aurora_new_create:
                {
                    Contact contact = mConversation.getRecipients().get(0);
                    Intent intent = new Intent(Intent.ACTION_INSERT,Contacts.CONTENT_URI);
                    intent.setComponent(new ComponentName("com.android.contacts",
                        "com.android.contacts.activities.ContactEditorActivity"));
                    if (Mms.isEmailAddress(contact.getNumber())) {
                        intent.putExtra(Insert.EMAIL, contact.getNumber());
                    } else {
                        intent.putExtra(Insert.PHONE, contact.getNumber());
                    }
                    startActivity(intent);
                }
                break;
          // Aurora xuyong 2014-09-16 added for aurora's new feature start
            case R.id.aurora_new_create_op:
                {
                    Contact contact = mConversation.getRecipients().get(0);
                    Intent intent = new Intent(Intent.ACTION_INSERT,Contacts.CONTENT_URI);
                    intent.setComponent(new ComponentName("com.android.contacts",
                        "com.android.contacts.activities.ContactEditorActivity"));
                    if (Mms.isEmailAddress(mAddOpNumber)) {
                        intent.putExtra(Insert.EMAIL, mAddOpNumber);
                    } else {
                        intent.putExtra(Insert.PHONE, mAddOpNumber);
                    }
                    startActivity(intent);
                }
                break;
          // Aurora xuyong 2014-09-16 added for aurora's new feature end
            case R.id.aurora_new_patch:
                {
                     Contact contact = mConversation.getRecipients().get(0);
                     Intent newintent = new Intent(Intent.ACTION_INSERT_OR_EDIT);
                     newintent.setComponent(new ComponentName("com.android.contacts",
                         "com.android.contacts.activities.ContactSelectionActivity"));
                     if (Mms.isEmailAddress(contact.getNumber())) {
                         newintent.putExtra(Insert.EMAIL, contact.getNumber());
                     } else {
                         newintent.putExtra(Insert.PHONE, contact.getNumber());
                     }
                     newintent.setType(People.CONTENT_ITEM_TYPE);
                     startActivity(newintent);
                }
                break;
          // Aurora xuyong 2014-09-16 added for aurora's new feature start
            case R.id.aurora_new_patch_op:
                {
                     Intent newintent = new Intent(Intent.ACTION_INSERT_OR_EDIT);
                     newintent.setComponent(new ComponentName("com.android.contacts",
                         "com.android.contacts.activities.ContactSelectionActivity"));
                     if (Mms.isEmailAddress(mAddOpNumber)) {
                         newintent.putExtra(Insert.EMAIL, mAddOpNumber);
                     } else {
                         newintent.putExtra(Insert.PHONE, mAddOpNumber);
                     }
                     newintent.setType(People.CONTENT_ITEM_TYPE);
                     startActivity(newintent);
                }
                break;
          // Aurora xuyong 2014-09-16 added for aurora's new feature end
            case R.id.aurora_msg_phone_dail:
                // Aurora xuyong 2014-05-30 deleted for multisim feature start
                //int[] location = new  int[2] ;
                //DisplayMetrics dm = new DisplayMetrics();
                //getWindowManager().getDefaultDisplay().getMetrics(dm);
                //int x = location[0] - dm.widthPixels/2 - 80;
                //int y = location[1] - dm.heightPixels/2 + 30;
                //Intent intent = new Intent("com.android.contacts.action.GNSELECTSIM");
                //intent.putExtra("x", x);
                //intent.putExtra("y", y);
                    // Aurora liugj 2013-11-08 modified for bug-524 start
                //if (mClickContent != null && mClickContent.getValue() != null) {
                //    intent.putExtra("number", mClickContent.getValue().substring(4));
                //}
                // Aurora xuyong 2014-05-30 deleted for multisim feature end
                    // Aurora liugj 2013-11-08 modified for bug-524 end
                // Aurora xuyong 2014-05-30 modified for multisim feature start
                if (mClickContent != null && mClickContent.getValue() != null) {
                // Aurora xuyong 2014-06-06 modified for bug #5367 start 
                    if (MmsApp.mGnMultiSimMessage) {
                            Intent dialIntent = AuroraTelephoneManager.getCallNumberIntent(mClickContent.getValue().substring(4), mDaultCallSlot);
                            startActivity(dialIntent); 
                       } else {
                           Intent dialIntent = new Intent(Intent.ACTION_CALL, Uri.parse("tel:" + mClickContent.getValue().substring(4)));
                        startActivity(dialIntent);
                       }
                 // Aurora xuyong 2014-06-06 modified for bug #5367 end
                }
                // Aurora xuyong 2014-05-30 modified for multisim feature end
                break;
          // Aurora xuyong 2014-05-30 added for multisim feature start
            case R.id.aurora_msg_phone_dail_sim1:
             // Aurora xuyong 2014-08-28 modified for NullpointerException start
                if (mClickContent != null && mClickContent.getValue() != null) {
                    multiSimDialCorresRecipient(0, mClickContent.getValue().substring(4), false);
                }
             // Aurora xuyong 2014-08-28 modified for NullpointerException end
                break;
            case R.id.aurora_msg_phone_dail_sim2:
             // Aurora xuyong 2014-06-18 modified for bug #5929 start
             // Aurora xuyong 2014-08-28 modified for NullpointerException start
                if (mClickContent != null && mClickContent.getValue() != null) {
                    multiSimDialCorresRecipient(1, mClickContent.getValue().substring(4), false);
                }
             // Aurora xuyong 2014-08-28 modified for NullpointerException end
             // Aurora xuyong 2014-06-18 modified for bug #5929 end
                break;
          // Aurora xuyong 2014-05-30 added for multisim feature end
            case R.id.aurora_msg_phone_forward:
                Intent smsIntent = new Intent();
                smsIntent.setClassName(ComposeMessageActivity.this, "com.android.mms.ui.ForwardMessageActivity");
                // Aurora xuyong 2013-11-20 modify for monkey-running checked exception start
                if (mClickContent != null && mClickContent.getValue() != null) {
                    smsIntent.putExtra("SENDMSGNUMBER", mClickContent.getValue().substring(4));
                }
                // Aurora xuyong 2013-11-20 modify for monkey-running checked exception end
                smsIntent.putExtra("ISSENDMSG", true);
                smsIntent.putExtra("forwarded_message", true);
                ComposeMessageActivity.this.startActivity(smsIntent);
                break;
            case R.id.aurora_msg_phone_created:
                 {
                      Intent mgcIntent = new Intent(Intent.ACTION_INSERT, Contacts.CONTENT_URI);
                      mgcIntent.setComponent(new ComponentName("com.android.contacts",
                           "com.android.contacts.activities.ContactEditorActivity"));
                            // Aurora liugj 2013-11-08 modified for bug-524 start
                      if (mClickContent != null && mClickContent.getValue() != null) {
                          mgcIntent.putExtra(Insert.PHONE, mClickContent.getValue().substring(4));
                      }
                            // Aurora liugj 2013-11-08 modified for bug-524 end
                      startActivity(mgcIntent);
                 }
                 break;
            case R.id.aurora_msg_phone_add:
                 {
                     Intent newintent = new Intent(Intent.ACTION_INSERT_OR_EDIT);
                     newintent.setComponent(new ComponentName("com.android.contacts",
                               "com.android.contacts.activities.ContactSelectionActivity"));
                          // Aurora liugj 2013-11-08 modified for bug-524 start
                     if (mClickContent != null && mClickContent.getValue() != null) {
                         newintent.putExtra(Insert.PHONE, mClickContent.getValue().substring(4));
                     }
                          // Aurora liugj 2013-11-08 modified for bug-524 end
                     newintent.setType(People.CONTENT_ITEM_TYPE);
                     startActivity(newintent);
                 }
                 break;
            case R.id.aurora_msg_num_copy:
                 {
                      // Aurora xuyong 2013-10-19 modified for bug #148 start
                      //ClipboardManager mncClip = (ClipboardManager) ComposeMessageActivity.this.getSystemService(Context.CLIPBOARD_SERVICE);
                      //mncClip.setText(mClickContent.getValue().substring(4));
                        // Aurora liugj 2013-11-08 modified for bug-524 start
                     if (mClickContent != null && mClickContent.getValue() != null) {
                         copyToClipboard(mClickContent.getValue().substring(4));
                     }
                        // Aurora liugj 2013-11-08 modified for bug-524 end
                      // Aurora xuyong 2013-10-19 modified for bug #148 end
                 }
                break;
            case R.id.aurora_msg_http_visit:
                 {
                     // Aurora xuyong 2013-11-20 modify for monkey-running checked exception start
                     if (mClickContent != null && mClickContent.getValue() != null) {
                         Uri mgvUri = Uri.parse(mClickContent.getValue());
                        // Aurora xuyong 2014-05-30 added for multisim feature start
                         Intent httpIntent = new Intent(Intent.ACTION_VIEW, mgvUri);
                         httpIntent.putExtra(Browser.EXTRA_APPLICATION_ID, ComposeMessageActivity.this.getPackageName());
                         httpIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);
                         ComposeMessageActivity.this.startActivity(httpIntent);
                        // Aurora xuyong 2014-05-30 added for multisim feature end
                     }
                     // Aurora xuyong 2013-11-20 modify for monkey-running checked exception end
                 }
                 break;
            case R.id.aurora_msg_http_copy:
                 {
                     // Aurora xuyong 2013-10-19 modified for bug #148 start
                     //ClipboardManager mhcClip = (ClipboardManager) ComposeMessageActivity.this.getSystemService(Context.CLIPBOARD_SERVICE);
                     String urlString = mClickContent.getValue().toString();
                     if (urlString.startsWith("http:")) {
                         //mhcClip.setText(mClickContent.getValue().substring(7));
                        // Aurora liugj 2013-11-08 modified for bug-524 start
                         if (mClickContent != null && mClickContent.getValue() != null) {
                             copyToClipboard(mClickContent.getValue().substring(7));
                         }
                        // Aurora liugj 2013-11-08 modified for bug-524 end
                     } else if (urlString.startsWith("https:")) {
                         //mhcClip.setText(mClickContent.getValue().substring(8));
                        // Aurora liugj 2013-11-08 modified for bug-524 start
                         if (mClickContent != null && mClickContent.getValue() != null) {
                             copyToClipboard(mClickContent.getValue().substring(8));
                         }
                        // Aurora liugj 2013-11-08 modified for bug-524 end
                     // Aurora xuyong 2013-10-19 modified for bug #148 end
                     }
                 }
                 break;
            case R.id.aurora_msg_mail_send:
                 {
                      // Aurora liugj 2013-11-08 modified for bug-524 start
                     if (mClickContent != null && mClickContent.getValue() != null) {
                         Uri uri = Uri.parse(mClickContent.getValue());
                         Intent mmsIntent = new Intent(Intent.ACTION_VIEW, uri);
                         mmsIntent.putExtra(Browser.EXTRA_APPLICATION_ID, ComposeMessageActivity.this.getPackageName());
                         mmsIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);
                         ComposeMessageActivity.this.startActivity(mmsIntent);
                     }
                      // Aurora liugj 2013-11-08 modified for bug-524 end
                 }
                 break;
            case R.id.aurora_msg_mail_created:
                 {
                     Intent mmcIntent = new Intent(Intent.ACTION_INSERT, Contacts.CONTENT_URI);
                     mmcIntent.setComponent(new ComponentName("com.android.contacts",
                     "com.android.contacts.activities.ContactEditorActivity"));
                     // Aurora liugj 2013-11-08 modified for bug-524 start
                     if (mClickContent != null && mClickContent.getValue() != null) {
                         mmcIntent.putExtra(ContactsContract.Intents.Insert.EMAIL, mClickContent.getValue().substring(7));
                     }
                     // Aurora liugj 2013-11-08 modified for bug-524 end
                     ComposeMessageActivity.this.startActivity(mmcIntent);
                 }
                 break;
            case R.id.aurora_msg_mail_add:
                 {
                     Intent mmaIntent = new Intent(Intent.ACTION_INSERT_OR_EDIT);
                     mmaIntent.setComponent(new ComponentName("com.android.contacts",
                          "com.android.contacts.activities.ContactSelectionActivity")); 
                     mmaIntent.setType(Contacts.CONTENT_ITEM_TYPE);
                     // Aurora liugj 2013-11-08 modified for bug-524 start
                     if (mClickContent != null && mClickContent.getValue() != null) {
                         mmaIntent.putExtra(ContactsContract.Intents.Insert.EMAIL, mClickContent.getValue().substring(7));
                     }
                     // Aurora liugj 2013-11-08 modified for bug-524 end
                     ComposeMessageActivity.this.startActivity(mmaIntent);
                 }
                 break;
            case R.id.aurora_msg_mail_copy:
                 // Aurora xuyong 2013-10-19 modified for bug #148 start
                 //ClipboardManager mmcClip = (ClipboardManager) ComposeMessageActivity.this.getSystemService(Context.CLIPBOARD_SERVICE);
                 //mmcClip.setText(mClickContent.getValue().substring(7));
                // Aurora liugj 2013-11-08 modified for bug-524 start
                if (mClickContent != null && mClickContent.getValue() != null) {
                    copyToClipboard(mClickContent.getValue().substring(7));
                }
                // Aurora liugj 2013-11-08 modified for bug-524 end
                 // Aurora xuyong 2013-10-19 modified for bug #148 end
                 break;
            case R.id.aurora_msg_rtsp_visit:
                 {
                 // Aurora xuyong 2014-08-28 modified for NullpointerException start
                     if (mClickContent != null && mClickContent.getValue() != null) {
                        Uri mrvUri = Uri.parse(mClickContent.getValue());
                      Intent msrvIntent = new Intent(Intent.ACTION_VIEW, mrvUri);
                      msrvIntent.putExtra(Browser.EXTRA_APPLICATION_ID, ComposeMessageActivity.this.getPackageName());
                      msrvIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);
                      ComposeMessageActivity.this.startActivity(msrvIntent);
                     }
                 // Aurora xuyong 2014-08-28 modified for NullpointerException end
                 }
                 break;
            case R.id.aurora_msg_rtsp_copy:
                 {
                     // Aurora xuyong 2013-10-19 modified for bug #148 start
                     //ClipboardManager mrcClip = (ClipboardManager) ComposeMessageActivity.this.getSystemService(Context.CLIPBOARD_SERVICE);
                     //mrcClip.setText(mClickContent.getValue().substring(5));
                      // Aurora liugj 2013-11-08 modified for bug-524 start
                     if (mClickContent != null && mClickContent.getValue() != null) {
                         copyToClipboard(mClickContent.getValue().substring(5));
                     }
                     // Aurora liugj 2013-11-08 modified for bug-524 end
                     // Aurora xuyong 2013-10-19 modified for bug #148 end
                 }
                 break;
            case R.id.aurora_attach_record_video:
                 int currentSlideSize = 0;
                 SlideshowModel slideShow = mWorkingMessage.getSlideshow();
                 long sizeLimit = MmsConfig.getUserSetMmsSizeLimit(true) - SlideshowModel.SLIDESHOW_SLOP - TEXT_SPACE;
                 if (sizeLimit > 0) {
                         // Aurora liugj 2013-11-12 modified for bug-627 start
                    //StorageManager mSM = (StorageManager) getApplicationContext().getSystemService(STORAGE_SERVICE);
                    // Aurora xuyong 2013-11-14 modified for S4 adapt start
                // Aurora xuyong 2014-04-18 modified for bug #4361 start
                    if (hasNoStorage()) {
                // Aurora xuyong 2014-04-18 modified for bug #4361 end
                    // Aurora xuyong 2013-11-14 modified for S4 adapt end
                         // Aurora liugj 2013-11-12 modified for bug-627 end
                        Toast.makeText(ComposeMessageActivity.this, getString(R.string.gn_no_storage), Toast.LENGTH_LONG).show();
                    }else if(null == TempFileProvider.getAvailableSdcard(ComposeMessageActivity.this, MmsConfig.getMaxMessageSize())) {
                        Toast.makeText(ComposeMessageActivity.this, getString(R.string.storage_has_no_space),Toast.LENGTH_SHORT).show();
                    } else {
                        MessageUtils.recordVideo(ComposeMessageActivity.this, REQUEST_CODE_TAKE_VIDEO, sizeLimit);
                    }
                 }
                 else {
                     Toast.makeText(ComposeMessageActivity.this,
                            getString(R.string.message_too_big_for_video),
                            Toast.LENGTH_SHORT).show();
                 }
                 break;
            case R.id.aurora_attach_select_video:
                 MessageUtils.selectVideo(ComposeMessageActivity.this, REQUEST_CODE_ATTACH_VIDEO);
                 break;
            case R.id.aurora_attach_record_audio:
                int currentAudioSlideSize = 0;
                SlideshowModel slideAudioShow = mWorkingMessage.getSlideshow();
                if (false) {
                    mAppendAttachmentSign = true;
                }
                if (slideAudioShow != null) {
                    SlideModel slide = slideAudioShow.get(0);
                    currentAudioSlideSize = slide == null ? 0 : slide.getSlideSize();
                }
                long sizeAudioLimit = 0;
                if(mAppendAttachmentSign){
                    sizeAudioLimit = computeAttachmentSizeLimitForAppen(slideAudioShow);
                }
                else {
                    sizeAudioLimit = computeAttachmentSizeLimit(slideAudioShow, currentAudioSlideSize);
                }
                MessageUtils.recordSound(ComposeMessageActivity.this, REQUEST_CODE_RECORD_SOUND, sizeAudioLimit);
                 break;
            case R.id.aurora_attach_select_audio:
                 if(!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
                     if (MmsApp.mGnMessageSupport == true) {
                         Toast.makeText(ComposeMessageActivity.this,
                                getString(R.string.insert_sd_card), Toast.LENGTH_LONG).show();
                     } else {
                         Toast.makeText(ComposeMessageActivity.this,
                                "Please Insert SD card!", Toast.LENGTH_LONG).show();;
                     }
                     return ;
                     }
                 MessageUtils.selectAudio(ComposeMessageActivity.this,REQUEST_CODE_ATTACH_SOUND);
                 break;
            // Aurora liugj 2013-09-24 modified for bug-322 start
            /*case R.id.aurora_attach_select_ringtone:
                 MessageUtils.selectRingtone(ComposeMessageActivity.this,REQUEST_CODE_ATTACH_RINGTONE);
                 break;*/
            // Aurora liugj 2013-09-24 modified for bug-322 end
            default:
                    break;
            }
        }
    };
    // Aurora xuyong 2013-09-17 added for aurora's new feature end
    //gionee gaoj 2012-12-10 added for CR00741704 start
    private static final Intent qqContent = new Intent("com.tencent.gionee.aidl.GioneeService");
    private GioneeTencentService mGioneeTencentService = null;
    private ServiceConnection serviceConnection = new ServiceConnection() {

        @Override
        public void onServiceDisconnected(ComponentName name) {
            mGioneeTencentService = null;
        }

        @Override
        public void onServiceConnected(ComponentName name, IBinder service) {
            mGioneeTencentService = GioneeTencentService.Stub
                    .asInterface(service);
        }
    };
    //gionee gaoj 2012-12-10 added for CR00741704 end
    // Aurora xuyong 2014-04-18 added for bug #4361 start
    private boolean inStorageIsNotMounted() {
        String internalStoragePath = GnStorageManager.getInstance(ComposeMessageActivity.this).getInternalStoragePath();
        return internalStoragePath != null && !GnStorageManager.getVolumeState(internalStoragePath).equals(Environment.MEDIA_MOUNTED);
    }
    
    private boolean exStorageIsNotMounted() {
        // Aurora xuyong 2015-10-20 modified for aurora's new feature start
        String externalStoragePath = GnStorageManager.getInstance(ComposeMessageActivity.this).getExternalStoragePath();
        // Aurora xuyong 2015-10-20 modified for aurora's new feature end
        return externalStoragePath != null && !GnStorageManager.getVolumeState(externalStoragePath).equals(Environment.MEDIA_MOUNTED);
    }
    
    private boolean hasNoStorage() {
        return inStorageIsNotMounted() && exStorageIsNotMounted();
    }
    // Aurora xuyong 2014-04-18 added for bug #4361 end
    private void showSubjectEditor(boolean show) {
        if(mIsLeMei) {
            return;
        }
        if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
//m0
//            log("" + show);
            log("showSubjectEditor: " + show);
//m1
        }
        if (MmsApp.mGnMessageSupport) {
            gnInitAttachmentLayout();
        } else {
            if (mSubjectTextEditor == null) {
                // Don't bother to initialize the subject editor if
                // we're just going to hide it.
                if (show == false) {
                    return;
                }
                mSubjectTextEditor = (AuroraEditText)findViewById(R.id.subject);
                //gionee gaoj 2012-4-10 added for CR00555790 start
                if (MmsApp.mGnMessageSupport) {
                    mSubjectDivider = (View) findViewById(R.id.subject_divider);
                }
                //gionee gaoj 2012-4-10 added for CR00555790 end
    //m0
    /*
                mSubjectTextEditor.setFilters(new InputFilter[] {
                        new LengthFilter(MmsConfig.getMaxSubjectLength())});
    */
    //MTK_OP01_PROTECT_START
            if (MmsApp.isTelecomOperator()) {
                    // cmcc request subject <= 40bytes and need a tips, other op has no constraint.
                    mSubjectTextEditor.setFilters(new InputFilter[] { new MyLengthFilter(DEFAULT_LENGTH) });
                }
    //MTK_OP01_PROTECT_END
    //m1
            }
        }

        //gionee gaoj 2012-4-10 added for CR00555790 start
        if(MmsApp.mGnMessageSupport){
            mSubjectTextEditor.setOnClickListener(mEditorOnClickListener);
            // gionee zhouyj 2012-06-28 add for CR00628332 start 
            mSubjectTextEditor.setOnFocusChangeListener(mEditorOnFocusChangeListener);
            // gionee zhouyj 2012-06-28 add for CR00628332 end 
        }
        //gionee gaoj 2012-4-10 added for CR00555790 end
        mSubjectTextEditor.setOnKeyListener(show ? mSubjectKeyListener : null);

        if (show) {
            mSubjectTextEditor.addTextChangedListener(mSubjectEditorWatcher);
        } else {
            mSubjectTextEditor.removeTextChangedListener(mSubjectEditorWatcher);
        }

        mSubjectTextEditor.setText(mWorkingMessage.getSubject());
        mSubjectTextEditor.setVisibility(show ? View.VISIBLE : View.GONE);
        //gionee gaoj 2012-4-10 added for CR00555790 start
        if (MmsApp.mGnMessageSupport) {
            if (show) {
                // gionee zhouyj 2012-06-29 add for CR00632132 start 
                if(mSubjectEditorFocus) {
                    mSubjectEditorFocus = false;
                    mSubjectTextEditor.requestFocus();
                    // Aurora xuyong 2014-03-07 modified for aurora's new feature start 
                    showInputMethod(mWindow.getCurrentFocus());
                    // Aurora xuyong 2014-03-07 modified for aurora's new feature end
                }
                // gionee zhouyj 2012-06-29 add for CR00632132 end 
              //Gionee <guoyx> <2013-07-18> delete for CR00780083 begin
//                if (mAttachmentSlideView != null) {
//                    mAttachmentSlideView.setVisibility(View.GONE);
//                }
              //Gionee <guoyx> <2013-07-18> delete for CR00780083 end
            }
            mSubjectDivider.setVisibility(show ? View.VISIBLE : View.GONE);
        }
        //gionee gaoj 2012-4-10 added for CR00555790 end
        //hideOrShowTopPanel();
    }

    /*private void hideOrShowTopPanel() {
        //gionee gaoj 2012-6-28 added for CR00629130 start
        if (MmsApp.mGnMessageSupport) {
            mTopPanel.setVisibility(isRecipientsEditorVisible() ? View.VISIBLE : View.GONE);
        } else {
        //gionee gaoj 2012-6-28 added for CR00629130 end
        boolean anySubViewsVisible = (isSubjectEditorVisible() || isRecipientsEditorVisible());
        mTopPanel.setVisibility(anySubViewsVisible ? View.VISIBLE : View.GONE);
        //gionee gaoj 2012-6-28 added for CR00629130 start
        }
        //gionee gaoj 2012-6-28 added for CR00629130 end
    }*/

    public void initialize(Bundle savedInstanceState, long originalThreadId) {
        Intent intent = getIntent();
        // add for cmcc dir ui begin
        boolean showInput = false;
        boolean hiderecipient = false;
        if (MmsConfig.getMmsDirMode()) {
            mHomeBox = intent.getIntExtra("folderbox", 0);
            showInput = intent.getBooleanExtra("showinput", false);
            hiderecipient = intent.getBooleanExtra("hiderecipient", false);
        }
        // add for cmcc dir ui end

        // Create a new empty working message.
        mWorkingMessage = WorkingMessage.createEmpty(this);

        // Read parameters or previously saved state of this activity. This will load a new
        // mConversation
        initActivityState(savedInstanceState);

        if (LogTag.SEVERE_WARNING && originalThreadId != 0 &&
                originalThreadId == mConversation.getThreadId()) {
            LogTag.warnPossibleRecipientMismatch("ComposeMessageActivity.initialize: " +
                    " threadId didn't change from: " + originalThreadId, this);
        }

        log("savedInstanceState = " + savedInstanceState +
            ", intent = " + intent +
            ", originalThreadId = " + originalThreadId +
            ", mConversation = " + mConversation);

        // add for cmcc dir ui begin
        if (!MmsConfig.getMmsDirMode()) {
            // add for cmcc dir ui end
            if (cancelFailedToDeliverNotification(getIntent(), this)) {
                // Show a pop-up dialog to inform user the message was
                // failed to deliver.
                undeliveredMessageDialog(getMessageDate(null));
            }
            cancelFailedDownloadNotification(getIntent(), this);
            // add for cmcc dir ui begin
        }
        // add for cmcc dir ui end
        // Set up the message history ListAdapter
        initMessageList();

        // Load the draft for this thread, if we aren't already handling
        // existing data, such as a shared picture or forwarded message.
        boolean isForwardedMessage = false;
        // We don't attempt to handle the Intent.ACTION_SEND when saveInstanceState is non-null.
        // saveInstanceState is non-null when this activity is killed. In that case, we already
        // handled the attachment or the send, so we don't try and parse the intent again.
        boolean intentHandled = savedInstanceState == null &&
            (handleSendIntent() || (handleForwardedMessage() && !mConversation.hasDraft()));
        
        // gionee lwzh modify for CR00774362 20130227 begin
        if (!intentHandled) {
            if (MmsApp.mGnMessageSupport) {
                if (mConversation.hasDraft()) {
                 //Gionee <Gaoj> <2013-05-20> delete for CR00809727 begin
                    //Gionee <guoyx> <2013-04-20> added for CR00797658 begin
                    /*mDrawBottomPanelTimes = 1;*/
                    //Gionee <guoyx> <2013-04-20> added for CR00797658 end
                   //Gionee <Gaoj> <2013-05-20> delete for CR00809727 end
                    loadDraft();
                }
            } else {
                loadDraft();
            }
        }
        // gionee lwzh modify for CR00774362 20130227 begin

        // gionee lwzh add for CR00633086 20120702 begin
        if (MmsApp.mGnMessageSupport) {
            isForwardedMessage = intent.getBooleanExtra(FORWARD_MESSAGE, false);
            isGnForwardMessage = isForwardedMessage;
            mIsFromDraftBox = intent.getBooleanExtra("from_draft_box", false);
            //Gionee <zhouyj> <2013-05-09> add for CR00810588 begin
            mIsForVoiceHelper = intent.getBooleanExtra("voice_helper", false);
            //Gionee <zhouyj> <2013-05-09> add for CR00810588 end
            // gionee zhouyj 2012-11-19 add for CR00729484 start 
            DraftFragment.resumeNeedQuery(false);
            // gionee zhouyj 2012-11-19 add for CR00729484 end 
        }
        // gionee lwzh add for CR00633086 20120702 end
        
        // Let the working message know what conversation it belongs to
        mWorkingMessage.setConversation(mConversation);

        // Show the recipients editor if we don't have a valid thread. Hide it otherwise.
//m0
        //gionee gaoj 2012-5-17 added for CR00600583 start
        boolean isRecipientsEditor = false;
        if (savedInstanceState != null) {
            isRecipientsEditor = savedInstanceState.getBoolean("isrecipientseditor");
        }
        //gionee gaoj 2012-5-17 added for CR00600583 end
//        if (mConversation.getThreadId() <= 0) {
//gionee gaoj 2012-5-17 added for CR00600583 start
        // Aurora xuyong 2014-07-19 modified for bug #6646 start
        if (!mIsFromReject && (mConversation.getThreadId() <= 0l || 
                  (mConversation.getMessageCount() <= 0 && (intent.getAction() != null || mConversation.hasDraft()))
                  || isRecipientsEditor)) {
        // Aurora xuyong 2014-07-19 modified for bug #6646 end
//gionee gaoj 2012-5-17 added for CR00600583 end
//m1
            // Hide the recipients editor so the call to initRecipientsEditor won't get
            // short-circuited.
            // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
            //mMsgListView.removeHeaderView(mMsgListViewHeader);
            // Aurora xuyong 2013-09-13 deleted for aurora's new feature end
            hideRecipientEditor();
//a0
            isInitRecipientsEditor = true;
//a1
            initRecipientsEditor();

            // Bring up the softkeyboard so the user can immediately enter recipients. This
            // call won't do anything on devices with a hard keyboard.
            // Aurora xuyong 2014-03-07 modified for aurora's new feature start 
            mWindow.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE |
                    WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);
            // Aurora xuyong 2014-03-07 modified for aurora's new feature end
        } else {
            hideRecipientEditor();
//a0
            // gionee lwzh add for CR00774362 20130227 begin
            gnInitMessageTitle();
            // gionee lwzh add for CR00774362 20130227 end
            
            //gionee gaoj 2012-4-10 added for CR00555790 start
            if (MmsApp.mEncryption) {
                if (!mConversation.getEncryption()) {
                    mConversation.markAsRead();
                }
            } else {
                //gionee gaoj 2012-4-10 added for CR00555790 end
            mConversation.markAsRead();
            //gionee gaoj 2012-4-10 added for CR00555790 start
            }
            //gionee gaoj 2012-4-10 added for CR00555790 end
//a1
        }

        // add for cmcc dir mode begin
        if (MmsConfig.getMmsDirMode()) {
            if (showInput) {
                // Aurora xuyong 2014-03-07 modified for aurora's new feature start 
                mWindow.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE |
                        WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);
                // Aurora xuyong 2014-03-07 modified for aurora's new feature end
            } else {
                // Aurora xuyong 2014-03-07 modified for aurora's new feature start 
                mWindow.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE |
                        WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
                // Aurora xuyong 2014-03-07 modified for aurora's new feature end
            }
            if (hiderecipient) {
                if (isRecipientsEditorVisible()) {
                    hideRecipientEditor();
                }
            }
        }
        // add for cmcc dir mode end
        invalidateOptionsMenu();
//Gionee <guoyx> <2013-04-20> removed for CR00797658 begin  
        if (!MmsApp.mGnPerfOpt2Support) {  
        updateSendButtonState();

        drawTopPanel(false);
        // Aurora xuyong 2015-03-03 modified for bug #11860 start
        drawBottomPanel(true);
        // Aurora xuyong 2015-03-03 modified for bug #11860 end
        }
//Gionee <guoyx> <2013-04-20> modified for CR00797658 end

        onKeyboardStateChanged(mIsKeyboardOpen);

        if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
            log("update title, mConversation=" + mConversation.toString());
        }

        // gionee lwzh modify for CR00774362 20130227 begin onResume inoke it;
        // updateTitle(mConversation.getRecipients());
        // gionee lwzh modify for CR00774362 20130227 end

        if (isForwardedMessage && isRecipientsEditorVisible()) {
            // The user is forwarding the message to someone. Put the focus on the
            // recipient editor rather than in the message editor.
            //gionee gaoj 2012-4-10 added for CR00555790 start
            if (MmsApp.mGnMessageSupport) {
                mContactContainer.resetMode();
                mContactContainer.requestFocus();
            } else {
                //gionee gaoj 2012-4-10 added for CR00555790 end
            mRecipientsEditor.requestFocus();
            //gionee gaoj 2012-4-10 added for CR00555790 start
            }
            //gionee gaoj 2012-4-10 added for CR00555790 end
        }
        //gionee gaoj 2012-4-10 added for CR00555790 start
        if (MmsApp.mGnMessageSupport && !isForwardedMessage) {
            // Aurora xuyong 2013-09-24 deleted for aurora;s new feature start
            // Aurora xuyong 2013-10-19 modified for aurora's new feature start
            if (!(isRecipientsEditorVisible() && mContactContainer.getContactsCount() == 0)) {
                mTextEditor.requestFocus();
            } else {
                if (mContactContainer != null) {
                    mContactContainer.requestFocus();
                }
            }
            // Aurora xuyong 2013-10-19 modified for aurora's new feature end
            // Aurora xuyong 2013-09-24 deleted for aurora;s new feature end
        }
        //gionee gaoj 2012-4-10 added for CR00555790 end
    }

    @Override
    protected void onNewIntent(Intent intent) {
        super.onNewIntent(intent);

        setIntent(intent);

        //gionee gaoj 2012-4-10 added for CR00555790 start
        if (MmsApp.mEncryption) {
            checkencryption(null);
        }
        //gionee gaoj 2012-4-10 added for CR00555790 end
        Conversation conversation = null;
        mSentMessage = false;
        
        //Gionee <zhouyj> <2013-06-14> add for CR00824571 begin
        String forwardMessageClassName = "com.android.mms.ui.ForwardMessageActivity";
        if (forwardMessageClassName.equals(getComponentName().getClassName())) {
            Log.i(TAG, "onNewIntent   for   com.android.mms.ui.ForwardMessageActivity");
            if (mContactContainer != null) {
                mContactContainer.clearmNumberMap();
            }
        }
        //Gionee <zhouyj> <2013-06-14> add for CR00824571 end

        // If we have been passed a thread_id, use that to find our
        // conversation.

        // Note that originalThreadId might be zero but if this is a draft and we save the
        // draft, ensureThreadId gets called async from WorkingMessage.asyncUpdateDraftSmsMessage
        // the thread will get a threadId behind the UI thread's back.
        long originalThreadId = mConversation.getThreadId();
        long threadId = intent.getLongExtra("thread_id", 0);
        Uri intentUri = intent.getData();
        boolean sameThread = false;
        if (threadId > 0) {
            conversation = Conversation.get(this, threadId, false);
        } else {
            if (mConversation.getThreadId() == 0) {
                // We've got a draft. Make sure the working recipients are synched
                // to the conversation so when we compare conversations later in this function,
                // the compare will work.
                mWorkingMessage.syncWorkingRecipients();
            }
            // Get the "real" conversation based on the intentUri. The intentUri might specify
            // the conversation by a phone number or by a thread id. We'll typically get a threadId
            // based uri when the user pulls down a notification while in ComposeMessageActivity and
            // we end up here in onNewIntent. mConversation can have a threadId of zero when we're
            // working on a draft. When a new message comes in for that same recipient, a
            // conversation will get created behind CMA's back when the message is inserted into
            // the database and the corresponding entry made in the threads table. The code should
            // use the real conversation as soon as it can rather than finding out the threadId
            // when sending with "ensureThreadId".
            conversation = Conversation.get(this, intentUri, false);
        }

        if (LogTag.VERBOSE || Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
            log("onNewIntent: data=" + intentUri + ", thread_id extra is " + threadId +
                    ", new conversation=" + conversation + ", mConversation=" + mConversation);
        }

        // this is probably paranoid to compare both thread_ids and recipient lists,
        // but we want to make double sure because this is a last minute fix for Froyo
        // and the previous code checked thread ids only.
        // (we cannot just compare thread ids because there is a case where mConversation
        // has a stale/obsolete thread id (=1) that could collide against the new thread_id(=1),
        // even though the recipient lists are different)
        sameThread = ((conversation.getThreadId() == mConversation.getThreadId() ||
                mConversation.getThreadId() == 0) &&
                conversation.equals(mConversation));

        // Don't let any markAsRead DB updates occur before we've loaded the messages for
        // the thread. Unblocking occurs when we're done querying for the conversation
        // items.
        conversation.blockMarkAsRead(true);

        if (sameThread) {
            log("onNewIntent: same conversation");
            if (mConversation.getThreadId() == 0) {
                mConversation = conversation;
                mWorkingMessage.setConversation(mConversation);
                invalidateOptionsMenu();
            }
            mConversation.markAsRead();         // dismiss any notifications for this convo
        } else {
            if (LogTag.VERBOSE || Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
                log("onNewIntent: different conversation");
            }
//a0
            // Don't let any markAsRead DB updates occur before we've loaded the messages for
            // the thread.
            conversation.blockMarkAsRead(true);
//a1
            
            saveDraft(false);    // if we've got a draft, save it first
//a0
            //Gionee <guoyx> <2013-06-09> modify for CR00824219 begin
            //merge from 4.2 Mms
            //aurora yudingmin 2014-08-22 modified for bug #7671 start
            mMsgListAdapter.changeData(null, null);
//            mMsgListAdapter.changeCursor(null);
            //aurora yudingmin 2014-08-22 modified for bug #7671 end
            //Gionee <guoyx> <2013-06-09> modify for CR00824219 end
            mConversation = conversation;
//a1
            // gionee zhouyj 2012-12-04 add for CR00737750 start 
            if (MmsApp.mGnMessageSupport) {
                mSubjectEditorNull = false;
                //Gionee <zhouyj> <2013-05-03> add for CR00803857 begin
                if (mRegularlyMain != null) {
                    mRegularlyMain.setIsRegularly(false);
                }
                //if (mRegButton != null && mRegButton.getVisibility() == View.VISIBLE) {
                //    mRegButton.setVisibility(View.GONE);
                //}
                if (mLocation != null) {
                    mLocation.setLocationListener(null);
                    mLocation.onDestroy();
                }
                //if (mPoiButton != null && mPoiButton.getVisibility() == View.VISIBLE) {
                //    mPoiButton.setVisibility(View.GONE);
                //}
                //Gionee <zhouyj> <2013-05-03> add for CR00803857 end
                //Gionee <guoyx> <2013-06-09> add for CR00824219 begin
                if (mSoloAlertDialog != null 
                        && mSoloAlertDialog.mAlertDialog != null 
                        && mSoloAlertDialog.mAlertDialog.isShowing()) {
                    mSoloAlertDialog.mAlertDialog.dismiss();
                }
                //Gione <guoyx> <2013-06-09> add for CR00824219 begin
                if (mDeleteConfirmDialog != null && mDeleteConfirmDialog.isShowing()) {
                    mDeleteConfirmDialog.dismiss();
                    mDeleteConfirmDialog = null;
                } 
                //Gione <guoyx> <2013-06-09> add for CR00824219 end
                //Gionee <guoyx> <2013-06-09> add for CR00824219 end
                //Gionee <zhouyj> <2013-06-15> add for CR00826106 begin
                //mTextSize = DEFAULT_TEXT_SIZE;
                //changeTextSize(mTextSize);
                //Gionee <zhouyj> <2013-06-15> add for CR00826106 end
            }
            // gionee zhouyj 2012-12-04 add for CR00737750 end 
            initialize(null, originalThreadId);
        }
        loadMessageContent();
        //a0
        send_sim_id = intent.getIntExtra(GnPhone.GEMINI_SIM_ID_KEY, -1);
        Log.d(TAG, "get simId from intent = " + send_sim_id);
        //a1
        //MTK_OP01_PROTECT_START
        if (MmsApp.isTelecomOperator()) {
            if (mZoomIn != null) {
                mZoomIn.setEnabled(true);
                mZoomOut.setEnabled(true);
                //mCurrentSize = DEFAULT_TEXT_SIZE;
            }
        }
        //MTK_OP01_PROTECT_END
        // gionee zhouyj 2013-01-04 add for CR00753821 start 
        if (MmsApp.mGnMessageSupport) {
            sendBroadcast(new Intent("reset_flag"));
        }
        // gionee zhouyj 2013-01-04 add for CR00753821 end 

        // Aurora yudingmin 2014-10-08 added for contact change start
        registerContactObserver();
        // Aurora yudingmin 2014-10-08 added for contact change end
    }

    private void sanityCheckConversation() {
        if (mWorkingMessage.getConversation() != mConversation) {
            LogTag.warnPossibleRecipientMismatch(
                    "ComposeMessageActivity: mWorkingMessage.mConversation=" +
                    mWorkingMessage.getConversation() + ", mConversation=" +
                    mConversation + ", MISMATCH!", this);
        }
    }

    @Override
    protected void onRestart() {
        super.onRestart();
        // Aurora xuyong 2015-09-02 added for bug #15968 start
        if (null != mMsgListAdapter && mMsgListAdapter.mIsDeleteMode) {
        	getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
        }
        // Aurora xuyong 2015-09-02 added for bug #15968 end
        //gionee gaoj 2012-4-10 added for CR00555790 start
        if (MmsApp.mGnMessageSupport) {
            //Gionee <guoyx> <2013-07-18> modify for CR00780083 begin
              // Aurora liugj 2013-10-30 modified for fix bug-321 start 
            //hideAttachmentSlideView();
              // Aurora liugj 2013-10-30 modified for fix bug-321 end
            // gionee zhouyj 2012-12-18 add for CR00747015 start 
          //Gionee <guoyx> <2013-07-25> delete for CR00780083 begin
//            mcontactView = null;
          //Gionee <guoyx> <2013-07-25> delete for CR00780083 end
            // gionee zhouyj 2012-12-18 add for CR00747015 end 
            //Gionee <guoyx> <2013-07-18> modify for CR00780083 end
            //Gionee <guoyx> <2013-05-16> removed for CR00808548 begin
//            hideInputMethod();
            //Gionee <guoyx> <2013-05-16> removed for CR00808548 end
        }
        //gionee gaoj 2012-4-10 added for CR00555790 end
        if (mWorkingMessage.isDiscarded()) {
            // If the message isn't worth saving, don't resurrect it. Doing so can lead to
            // a situation where a new incoming message gets the old thread id of the discarded
            // draft. This activity can end up displaying the recipients of the old message with
            // the contents of the new message. Recognize that dangerous situation and bail out
            // to the ConversationList where the user can enter this in a clean manner.
            mWorkingMessage.unDiscard();    // it was discarded in onStop().
            if (mWorkingMessage.isWorthSaving()) {
                if (LogTag.VERBOSE) {
                    log("onRestart: mWorkingMessage.unDiscard()");
                }
//                mWorkingMessage.unDiscard();    // it was discarded in onStop().

                sanityCheckConversation();
            } else if (isRecipientsEditorVisible()) {
                if (LogTag.VERBOSE) {
                    log("onRestart: goToConversationList");
                }
                goToConversationList();
            } else {
                if (LogTag.VERBOSE) {
                    log("onRestart: loadDraft");
                }
//m0
//                loadDraft();
//m1
                mWorkingMessage.setConversation(mConversation);
                
                if (mAttachmentEditor != null) {
                    mAttachmentEditor.update(mWorkingMessage);
                }
                
                invalidateOptionsMenu();
            }
        }
    }

    @Override
    protected void onStart() {
        super.onStart();
        // Aurora xuyong 2014-09-17 added for bug #8362 start
        mHomeButtonWatcher = new HomeButtonWatcher();
        IntentFilter HBintentFilter =
                new IntentFilter(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
        registerReceiver(mHomeButtonWatcher, HBintentFilter);
       // Aurora xuyong 2014-09-17 added for bug #8362 end
        // Aurora xuyong 2014-01-03 modified for aurora;s new feature start
        registerReceiver(mHttpProgressReceiver, mHttpProgressFilter);
        // Aurora xuyong 2014-01-06 added for aurora's new feature start
        misPickContatct = false;
        mNeedUpdateContactForMessageContent = true;
        // Aurora xuyong 2014-01-06 added for aurora's new feature end
    // Aurora xuyong 2014-01-03 modified for aurora;s new feature start
    }

    public void loadMessageContent() {
        //Gionee <guoyx> <2013-04-20> modified for CR00797658 begin
        // gionee lwzh modify for CR00774362 20130227 begin
        if (MmsApp.mGnPerfOpt2Support) {
            startMsgListQuery(1);
        } else {
            startMsgListQuery(200);
        }
        
        // gionee lwzh modify for CR00774362 20130227 begin
        //Gionee <guoyx> <2013-04-20> modified for CR00797658 end
        
        updateSendFailedNotification();
        //Gionee <Gaoj> <2013-05-20> modified for CR00809727 begin
        //Gionee <guoyx> <2013-04-20> modified for CR00797658 begin
        /*if (MmsApp.mGnPerfOpt2Support) {
        if (mDrawBottomPanelTimes < 1){
            drawBottomPanel();
            drawTopPanel(true);
        }
        mDrawBottomPanelTimes = 0;
        } else {
            drawBottomPanel();
        }*/
        //Gionee <guoyx> <2013-04-20> modified for CR00797658 end
        // Aurora xuyong 2015-03-03 modified for bug #11860 start
        drawBottomPanel(true);
        // Aurora xuyong 2015-03-03 modified for bug #11860 end
        //Gionee <Gaoj> <2013-05-20> modified for CR00809727 end
    }

    private void updateSendFailedNotification() {
        final long threadId = mConversation.getThreadId();
        if (threadId <= 0)
            return;

        // updateSendFailedNotificationForThread makes a database call, so do the work off
        // of the ui thread.
        new Thread(new Runnable() {
            public void run() {
                MessagingNotification.updateSendFailedNotificationForThread(
                        ComposeMessageActivity.this, threadId);
            }
        }, "updateSendFailedNotification").start();
    }

    @Override
    public void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);

        //gionee gaoj 2012-4-10 added for CR00555790 start
        if (MmsApp.mGnMessageSupport) {
            if (mContactContainer != null && isRecipientsEditorVisible()) {
                outState.putString("recipients", mContactContainer.allNumberToString());
            } else {
                outState.putString("recipients", getRecipients().serialize());
            }
            
            //gionee gaoj 2012-5-17 added for CR00600583 start
            outState.putBoolean("isrecipientseditor", isRecipientsEditorVisible());
            //gionee gaoj 2012-5-17 added for CR00600583 end
        } else {
            //gionee gaoj 2012-4-10 added for CR00555790 end
        // save recipients of this coversation
        if (mRecipientsEditor != null && isRecipientsEditorVisible()) {
            // TODO need re-coding for below code
//            outState.putString("recipients", mRecipientsEditor.allNumberToString());
            // We are compressing the image, so save the thread id in order to restore the draft when activity
            // restarting.
            if (mCompressingImage) {
                outState.putLong("thread", mConversation.ensureThreadId());
            } else if (mRecipientsEditor.getRecipientCount() < 1) {
                outState.putLong("thread",mConversation.ensureThreadId());
            }
                
        } else {
            // save the current thread id
            outState.putLong("thread", mConversation.getThreadId());
            Log.i(TAG, "saved thread id:" + mConversation.getThreadId());
        }
        //gionee gaoj 2012-4-10 added for CR00555790 start
        }
        //gionee gaoj 2012-4-10 added for CR00555790 end
        mWorkingMessage.writeStateToBundle(outState);

        if (mExitOnSent) {
            outState.putBoolean("exit_on_sent", mExitOnSent);
        }

        outState.putBoolean("compressing_image", mCompressingImage);
    }
    // Aurora xuyong 2014-06-07 added for bug #5449 start
    private int mInsertedSimCount = 0;
    // Aurora xuyong 2014-06-07 added for bug #5449 end
    // Aurora xuyong 2015-07-01 added for bug #13930 start
    private boolean getSimStateReady(int simState, int slot) {
    	if (!Utils.hasLollipop()) {
    		return simState == TelephonyManager.SIM_STATE_READY;
    	} else {
    		int dualSimMode = android.provider.Settings.System.getInt(ComposeMessageActivity.this.getApplicationContext().getContentResolver(), "msim_mode_setting", 3);
    		return dualSimMode == slot + 1 || dualSimMode == 3;
    	}
    }
    // Aurora xuyong 2015-07-01 added for bug #13930 end
    @Override
    protected void onResume() {
        super.onResume();
        // Aurora xuyong 2014-06-07 added for bug #5449 start
        if (MmsApp.mGnMultiSimMessage) {
            mInsertedSimCount = SIMInfo.getInsertedSIMCount(ComposeMessageActivity.this.getApplicationContext());
          // Aurora xuyong 2014-08-05 added for bug #7249 start
            if (mSIMInfo1 == null) {
            	try {
                    mSIMInfo1 = SIMInfo.getSIMInfoBySlot(this, GnPhone.GEMINI_SIM_1);
                } catch (IllegalArgumentException e) {
                    e.printStackTrace();
                } catch (SQLiteException e) {
            		e.printStackTrace();
            	}
                // Aurora xuyong 2014-11-17 added for bug #9803 start
                MessageUtils.addSIMInfo(mSIMInfo1);
                // Aurora xuyong 2014-11-17 added for bug #9803 end
            }
            if (mSIMInfo2 == null) {
            	try {
                    mSIMInfo2 = SIMInfo.getSIMInfoBySlot(this, GnPhone.GEMINI_SIM_2);
	            } catch (IllegalArgumentException e) {
	                e.printStackTrace();
	            } catch (SQLiteException e) {
	        		e.printStackTrace();
	        	}
                // Aurora xuyong 2014-11-17 added for bug #9803 start
                MessageUtils.addSIMInfo(mSIMInfo2);
                // Aurora xuyong 2014-11-17 added for bug #9803 end
            }
          // Aurora xuyong 2014-08-05 added for bug #7249 end
            if (mInsertedSimCount == 2) {
                // Aurora xuyong 2014-08-05 modified for bug #7249 start
                // Aurora xuyong 2014-08-25 modified for bug #7912 start
                // Aurora xuyong 2015-07-01 modified for bug #13930 start
                if (mSIMInfo1 == null || !getSimStateReady(mSIMInfo1State, 0)) {
                // Aurora xuyong 2015-07-01 modified for bug #13930 end
                // Aurora xuyong 2014-08-25 modified for bug #7912 end
                    mInsertedSimCount--;
                };
                // Aurora xuyong 2014-08-25 modified for bug #7912 start
                // Aurora xuyong 2015-07-01 modified for bug #13930 start
                if (mSIMInfo2 == null || !getSimStateReady(mSIMInfo2State, 1)) {
                // Aurora xuyong 2015-07-01 modified for bug #13930 end
                // Aurora xuyong 2014-08-25 modified for bug #7912 end
                // Aurora xuyong 2014-08-05 modified for bug #7249 end
                    mInsertedSimCount--;
                };
            }
        }
        // Aurora xuyong 2014-06-07 added for bug #5449 end
        // Aurora xuyong 2014-05-05 added for aurora's new feature start
        ThumbnailWorker.setNeedCache(true);
        // Aurora xuyong 2014-05-05 added for aurora's new feature end
        // Aurora xuyong 2013-11-16 added for bug#336 start
        mAddVilable = true;
        // Aurora xuyong 2013-11-16 added for bug#336 end
        //Gionee guoyx 20121023 by CR00705464 for MTK ALPS00283177 BEGIN
        mIsEditingSlideshow = false;
        //Gionee guoyx 20121023 by CR00705464 for MTK ALPS00283177 END
//a0
        // Aurora xuyong 2013-09-26 added for aurora's new feature start
        // Aurora xuyong 2014-03-07 deleted for aurora's new feature start 
        //window = this.getWindow();
        //wl = window.getAttributes();
        //decorView = window.getDecorView();
        // Aurora xuyong 2014-03-07 deleted for aurora's new feature end
        // Aurora xuyong 2013-09-26 added for aurora's new feature end

        //gionee gaoj 2012-4-10 added for CR00555790 start
        if (MmsApp.mGnMessageSupport) {
            autoRegulationMessageLayoutHeight();
        }
        //gionee gaoj 2012-4-10 added for CR00555790 end
        if(mProgressDialog != null && !mProgressDialog.isShowing())  {
            mProgressDialog.show();
        }

        Configuration config = getResources().getConfiguration();
        Log.d(TAG, "onResume - config.orientation="+config.orientation);
        if (config.orientation == Configuration.ORIENTATION_LANDSCAPE) {
            Log.e(TAG, "onResume Set setSoftInputMode to 0x"+Integer.toHexString(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE |WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN));
            // Aurora xuyong 2014-03-07 modified for aurora's new feature start 
            mWindow.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE |WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
            // Aurora xuyong 2014-03-07 modified for aurora's new feature end
        }
//a1
        // OLD: get notified of presence updates to update the titlebar.
        // NEW: we are using ContactHeaderWidget which displays presence, but updating presence
        //      there is out of our control.
        //Contact.startPresenceObserver();
        // Aurora xuyong 2014-02-28 deleted for bug #2696 start
        //addRecipientsListeners();
        // Aurora xuyong 2014-02-28 deleted for bug #2696 end

        if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
//m1
//            log("update title, mConversation=" + mConversation.toString());
            log("onResume: update title, mConversation=" + mConversation.toString());
//m1
        }
//a0
        //Gionee <zhouyj> <2013-06-250> modify for CR00829673 begin
        // get all SIM info ,it takes only 10ms
        mGetSimInfoRunnable.run();
        //Gionee <zhouyj> <2013-06-250> modify for CR00829673 end
        
        //MTK_OP02_PROTECT_START
        if (MmsApp.isUnicomOperator()) {
            if (mIsLeMei) {
                TextView sendButton = (TextView)findViewById(R.id.send_button_mms);
                sendButton.setText(R.string.send);
            }
        }
        //MTK_OP02_PROTECT_END
        
        updateSendButtonState();
//a1

        //Gionee <guoyx> <2013-05-03> modified for CR00797658 begin
        if (!MmsApp.mGnPerfOpt2Support) {
        // There seems to be a bug in the framework such that setting the title
        // here gets overwritten to the original title.  Do this delayed as a
        // workaround.
        mMessageListItemHandler.postDelayed(new Runnable() {
            public void run() {
                //gionee gaoj 2012-4-10 added for CR00555790 start
                if (MmsApp.mGnMessageSupport) {
                    // gionee lwzh modify for CR00774362 20130227 begin
                    ContactList recipients;
                    if (isRecipientsEditorVisible()) {
                        recipients = mContactContainer.constructContactsFromInput(false);
                    } else {
                        recipients = getRecipients();
                          // gionee lwzh modify for CR00774362 20130227 begin
//                        if (!recipients.isEmpty()) {
//                            int i = 0;
//                            for (Contact contact : recipients) {
//                                contact.reload(true);
//                                // begin
//                                if (MmsApp.mGnMessageSupport) {
//                                    if (i > CONTACT_HEADER_SHOW_CONTACTS_MAX) {
//                                        break;
//                                    }
//                                    i++;
//                                }
//                            }
//                        }
                          // gionee lwzh modify for CR00774362 20130227 end
                    }
                    updateTitle(recipients);
                    // gionee lwzh modify for CR00774362 20130227 end
                } else {
                    //gionee gaoj 2012-4-10 added for CR00555790 end
                ContactList recipients = isRecipientsEditorVisible() ?
                        mRecipientsEditor.constructContactsFromInput(false) : getRecipients();
                updateTitle(recipients);
                //gionee gaoj 2012-4-10 added for CR00555790 start
                }
                //gionee gaoj 2012-4-10 added for CR00555790 end
            }
//m0
//        }, 100);
        }, 10);
//m1
//a0
        }
        //Gionee <guoyx> <2013-05-03> modified for CR00797658 end
        // show SMS indicator
        //gionee gaoj 2012-9-21 added for CR00687379 start
        if (MmsApp.mGnMtkGeminiSupport) {
            Log.d("Test", "onResume, setSimIndicatorVisibility ");
            setSimIndicatorVisibility(true);
            mShowSimIndicator = true;
        }
        //gionee gaoj 2012-9-21 added for CR00687379 end
        // make button can response to start other activity
        mClickCanResponse = true;
//a1

        //gionee gaoj 2012-4-23 added for CR00555790 start
        if (MmsApp.mGnMessageSupport && isRecipientsEditorVisible()) {
            if (getIntent().getBooleanExtra("ISSENDMSG", false)/* && mIsInit*/) {
                //mIsInit = false;
                String curNumber = getIntent().getStringExtra("SENDMSGNUMBER");
                if (null != curNumber && !mContactContainer.isDuplicateNumber(curNumber)) {
                    if (Mms.isEmailAddress(curNumber)) {
                            mWorkingMessage.setHasEmail(true,
                                    !mWorkingMessage.requiresMms());
                    }
                    // Aurora xuyong 2014-02-13 modified for bug #11672 start
                    mContactContainer.processEnterKey(curNumber, ContactContainer.FOUCUS_CHANGE_TYPE);
                    // Aurora xuyong 2014-02-13 modified for bug #11672 end
                    mContactContainer.updateFreezeText();
                }
                // Aurora xuyong 2014-05-06 added for bug #13438 start
                if (mTextEditor != null) {
                    mTextEditor.requestFocus();
                }
                // Aurora xuyong 2014-05-06 added for bug #13438 end
            // Aurora xuyong 2015-05-15 added for bug #13651 start
            } else if (mContactContainer != null && mContactContainer.getContactsCount() <= 0) {
                // Aurora xuyong 2015-07-22 modified for bug #14637 start
            	mContactContainer.requestFocus();
                // Aurora xuyong 2015-07-22 modified for bug #14637 end
            }
            // Aurora xuyong 2015-05-15 added for bug #13651 end
//gionee lwzh modify for CR00774362 20130227 begin
//            if (!mContactContainer.isFocusable()) {
//                mContactContainerScroll.setBackgroundDrawable(getResources().getDrawable(R.drawable.gn_textfield_default));
//            }
//gionee lwzh modify for CR00774362 20130227 end
        }
        //gionee gaoj 2012-4-23 added for CR00555790 end

/*        //gionee gaoj 2013-3-26 added for CR00789078 start
        // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
        mSsOpen = false; //AuroraSettings.getInt(mContentResolver, AuroraSettings.SSG_AUTO_DIAL, 0) != 0;
        // Aurora xuyong 2013-09-13 deleted for aurora's new feature end
        if (mSsOpen && mSensorDailFeature) {
            sm.registerListener(myListener, aSensor, SensorManager.SENSOR_DELAY_NORMAL); 
        }
        //gionee gaoj 2013-3-26 added for CR00789078 end
*/        //Gionee <zhouyj> <2013-05-15> add for CR00810588 begin
        if (MmsApp.mGnVoiceReadMsgSupport) {
            /*mVoiceReadMsgEnable = getSharedPreferences("com.android.mms_preferences",
                    MODE_WORLD_READABLE).getBoolean("pref_key_voice_read", false);*/
            if (mVoiceReadMsgEnable) {
                registerReceiver(mVoiceHelpServiceStopReceiver, new IntentFilter(
                        MessageUtils.VOICEHELPER_SERVICE_STOP));
            }
        }
        //Gionee <zhouyj> <2013-05-15> add for CR00810588 end
        //Gionee <zhouyj> <2013-07-15> add for CR00835703 begin
        new Thread(new Runnable() {
            
            @Override
            public void run() {
                // TODO Auto-generated method stub
                // Aurora yudingmin 2014-09-29 modified for bug #8895 start
                String number = null;
                synchronized (mConversation) {
                    if (mConversation != null && mConversation.getRecipients() != null && mConversation.getRecipients().size() > 0) {
                        //Contact.ContactsCache.get(String number, boolean isMe, boolean canBlock); if canBlock == true,
                        // make sure the block can update contact immediately
                        number = mConversation.getRecipients().get(0).getNumber();
                        Message msg = mHandler.obtainMessage(SYNC_RECIPIENTS_CONTACTS);
                        // Aurora xuyong 2014-04-23 modified for bug #13181 start
                        mHandler.sendMessageDelayed(msg, 100);
                        // Aurora xuyong 2014-04-23 modified for bug #13181 end
                    }
                }
                if(number != null){
                    Log.i(TAG, "onResume   contact.getName() = " + Contact.get(number,true));
                }
                // Aurora yudingmin 2014-09-29 modified for bug #8895 end
            }
        }).start();
        //Gionee <zhouyj> <2013-07-15> add for CR00835703 end
    }

    @Override
    protected void onPause() {
        super.onPause();
        // Aurora xuyong 2015-09-14 added for aurora's new feature start
        // Aurora xuyong 2015-10-08 modified for aurora's new feature start
        dismissPops();
        // Aurora xuyong 2015-10-08 modified for aurora's new feature end
        // Aurora xuyong 2015-09-14 added for aurora's new feature end
        // Aurora xuyong 2014-03-11 added for aurora's new feature start
        hideAttachmentSlideView();
        // Aurora xuyong 2014-03-11 added for aurora's new feature end
        //gionee gaoj 2012-5-24 added for CR00588933 start
        /*if (popup != null) {
            popup.dismiss();
        }*/
        //gionee gaoj 2012-5-24 added for CR00588933 end
        // OLD: stop getting notified of presence updates to update the titlebar.
        // NEW: we are using ContactHeaderWidget which displays presence, but updating presence
        //      there is out of our control.
        //Contact.stopPresenceObserver();
//a0
        //gionee gaoj 2012-4-10 added for CR00555790 start
        if (MmsApp.mGnMessageSupport) {
            if (null != mContextMenu) {
                mContextMenu.close();
            }
            MessageListItem.resetDialog();
            //Gionee <guoyx> <2013-05-16> removed for CR00808548 begin
//            InputMethodManager inputMethodManager = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
//            if (getWindow() != null && getWindow().getCurrentFocus() != null && !isShowSimSelectView) {
//                inputMethodManager.hideSoftInputFromWindow(getWindow()
//                        .getCurrentFocus().getWindowToken(), 0);
//            }
            //Gionee <guoyx> <2013-05-16> removed for CR00808548 end
        }
        //gionee gaoj 2012-4-10 added for CR00555790 emd

        //gionee gaoj 2012-7-10 modified for CR00633449 start
        if (mSIMSelectDialog != null) {
            mSIMSelectDialog.dismiss();
        }
        //gionee gaoj 2012-7-10 modified for CR00633449 end
        if (mDetailDialog != null){
            mDetailDialog.dismiss();
        }
        if (mSendDialog != null){
            mSendDialog.dismiss();
        }
        // hide SIM indicator

        //gionee gaoj 2012-9-21 added for CR00687379 start
        if (MmsApp.mGnMtkGeminiSupport) {
            Log.d("Test", "onPause, setSimIndicatorVisibility ");
            setSimIndicatorVisibility(false);
            mShowSimIndicator = false;
        }
        //gionee gaoj 2012-9-21 added for CR00687379 end
//a1
        removeRecipientsListeners();

        clearPendingProgressDialog();

        // we thought that the contacts data can be changed as long as the user leave.
        Contact.invalidateCache();

/*        //gionee gaoj 2013-3-26 added for CR00789078 start
        if (mSsOpen && mSensorDailFeature) {
            sm.unregisterListener(myListener);
        }
        //gionee gaoj 2013-3-26 added for CR00789078 end
*/        //Gionee <zhouyj> <2013-05-15> add for CR00810588 begin
        if (MmsApp.mGnVoiceReadMsgSupport) {
            if (mVoiceReadMsgEnable) {
                unregisterReceiver(mVoiceHelpServiceStopReceiver);
                stopVoiceHelperService();
                setStopServiceBtnGone();
            }
        }
        //Gionee <zhouyj> <2013-05-15> add for CR00810588 end
    }

    @Override
    protected void onStop() {
        super.onStop();
        // Aurora xuyong 2014-04-15 added for bug #4187 start
        // Aurora xuyong 2014-09-02 deleted for bug-check start
        // Aurora xuyong 2014-09-17 added for bug #8362 start
        if (mHomeButtonWatcher != null) {
            unregisterReceiver(mHomeButtonWatcher);
            mHomeButtonWatcher = null;
        }
        // Aurora xuyong 2014-09-17 added for bug #8362 end
        // Aurora xuyong 2014-05-23 added for multisim feature start
        //if (MmsApp.mGnMultiSimMessage && mSimStateChangedReceiver != null) {
        //    unregisterReceiver(mSimStateChangedReceiver);
        //    mSimStateChangedReceiver = null;
        //}
        // Aurora xuyong 2014-09-02 deleted for bug-check end
        // Aurora xuyong 2014-05-23 added for multisim feature end
        // Aurora xuyong 2014-04-15 added for bug #4187 end
        // Aurora xuyong 2013-11-13 added for bug #500 start
        // Aurora xuyong 2014-03-11 deleted for aurora's new feature start
        //hideAttachmentSlideView();
        // Aurora xuyong 2014-03-11 deleted for aurora's new feature end
        // Aurora xuyong 2013-11-13 added for bug #500 end
        //gionee luoguangming 2012.08.29 modify for CR00682236 begin
    if(gnNGMflag == true){
            mGnInsertGpsFlag = false;
        }
        //gionee luoguangming 2012.08.29 modify for CR00682236  end 
        
//a0
        if (misPickContatct){
            return;
        }
//a1
        // Allow any blocked calls to update the thread's read status.
        mConversation.blockMarkAsRead(false);

        /*if (mMsgListAdapter != null) {
            mMsgListAdapter.changeCursor(null);
        }*/

        //gionee gaoj 2012-8-6 added for CR00663678 start
        if (MmsApp.mGnMessageSupport && mContactContainer != null) {
            //Gionee <zhouyj> <2013-05-22> modify for CR00818496 begin
            if (!MmsApp.mGnOptimizeAutoComplete) {
                CursorAdapter recipientsAdapter = (CursorAdapter)mContactContainer.getAdapter();
                if (recipientsAdapter != null) {
                    recipientsAdapter.changeCursor(null);
                }
            }
            //Gionee <zhouyj> <2013-05-22> modify for CR00818496 end
        } else if (mRecipientsEditor != null) {
            CursorAdapter recipientsAdapter = (CursorAdapter)mRecipientsEditor.getAdapter();
            if (recipientsAdapter != null) {
                recipientsAdapter.changeCursor(null);
            }
        }
        //gionee gaoj 2012-8-6 added for CR00663678 end

        if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
//m0
//            log("save draft");
            log("onStop: save draft");
//m1
        }

        //gionee gaoj 2013-4-1 modified for CR00788343 start
        //gionee gaoj 2012-4-10 added for CR00555790 start
        if (MmsApp.mGnMessageSupport && mMsgListAdapter.getCount() == 0 && isRecipientsEditorVisible() && MmsApp.mIsDraftOpen) {
                // gionee zhouyj 2012-11-19 add for CR00729484 start 
                //gionee gaoj 2013-4-1 modified for CR00788343 end
                DraftFragment.resumeNeedQuery(true);
                // gionee zhouyj 2012-11-19 add for CR00729484 end 
                if (mNeedSaveDraft || (mWaitingForSubActivity && mWorkingMessage.requiresMms())) {
                    mNeedSaveDraft = false;
                    saveDraft(true);
                }
                else {
                    
                    if (!mWaitingForSubActivity && !mWorkingMessage.isWorthSaving() ) {
                        // gionee zhouyj 2012-04-23 add for CR00573937 start
                        if (!mWorkingMessage.isInComposePage()) {
                        // gionee zhouyj 2012-04-23 add for CR00573937 end
                        mWorkingMessage.discard();
                        // gionee zhouyj 2012-04-23 add for CR00573937 start
                        }
                        // gionee zhouyj 2012-04-23 add for CR00573937 end
                    }
                    // gionee zhouyj 2012-11-09 add for CR00725755 start 
                    if(mIsFromDraftBox) {
                        sendBroadcast(new Intent("query_draft"));
                    }
                    // gionee zhouyj 2012-11-09 add for CR00725755 end 
                }
                unregisterReceiver(mHttpProgressReceiver);
                return;
            }
        //gionee gaoj 2012-4-10 added for CR00555790 end
        // If image is being compressed, wait for it
        if (isFinishing()) {
            waitForCompressing();
        }
//m0
//        saveDraft(true);
        //gionee gaoj 2012-4-10 added for CR00555790 start
        if (MmsApp.mGnMessageSupport) {
            //gionee gaoj 2013-4-1 modified for CR00788343 start
            if (MmsApp.mIsDraftOpen) {
                //gionee gaoj 2013-4-1 modified for CR00788343 end
            // gionee zhouyj 2013-01-07 add for CR00756648 start 
            if(mIsFromDraftBox) {
                sendBroadcast(new Intent("query_draft"));
            }
            // gionee zhouyj 2013-01-07 add for CR00756648 end 
            //gionee gaoj 2013-4-1 modified for CR00788343 start
            }
            //gionee gaoj 2013-4-1 modified for CR00788343 end
            if ((!isRecipientsEditorVisible()) || (mContactContainer.hasValidRecipient(mWorkingMessage.requiresMms()))) {
                saveDraft(true);
            }
        } else {
            //gionee gaoj 2012-4-10 added for CR00555790 end
        if ((!isRecipientsEditorVisible()) || (mRecipientsEditor.hasValidRecipient(mWorkingMessage.requiresMms()))) {
            saveDraft(true);
        }
        //gionee gaoj 2012-4-10 added for CR00555790 start
        }
        //gionee gaoj 2012-4-10 added for CR00555790 end
//m1
        // Cleanup the BroadcastReceiver.
        unregisterReceiver(mHttpProgressReceiver);
//a0
        Log.i(TAG, "onStop(): mWorkingMessage.isDiscarded() == " + mWorkingMessage.isDiscarded());
//a1
    }

    private boolean needSaveDraft() {
        //gionee gaoj 2012-4-10 added for CR00555790 start
        if (MmsApp.mGnMessageSupport) {
            return ((!isRecipientsEditorVisible()) || (mContactContainer.hasValidRecipient(mWorkingMessage.requiresMms())))
                   && !mWorkingMessage.isDiscarded() && mWorkingMessage.isWorthSaving();
        } else {
            //gionee gaoj 2012-4-10 added for CR00555790 end
        return ((!isRecipientsEditorVisible())
                    || (mRecipientsEditor.hasValidRecipient(mWorkingMessage.requiresMms())))
                && !mWorkingMessage.isDiscarded()
                && mWorkingMessage.isWorthSaving();
        //gionee gaoj 2012-4-10 added for CR00555790 start
        }
        //gionee gaoj 2012-4-10 added for CR00555790 end
    }

    @Override
    protected void onDestroy() {
       // Aurora xuyong 2014-09-02 added for bug-check start
       // Aurora xuyong 2014-09-17 deleted for bug #8362 start
        //if (mHomeButtonWatcher != null) {
       //     unregisterReceiver(mHomeButtonWatcher);
       //     mHomeButtonWatcher = null;
       // }
       // Aurora xuyong 2014-09-17 deleted for bug #8362 end
      // Aurora xuyong 2014-10-24 added for privacy feature start
      // Aurora xuyong 2014-10-25 added for privacy feature start
        mShowPriMsgCount = 0;
      // Aurora xuyong 2014-10-25 added for privacy feature end
        Utils.removeInstance(this);
      // Aurora xuyong 2014-10-24 added for privacy feature end
        if (MmsApp.mGnMultiSimMessage && mSimStateChangedReceiver != null) {
            unregisterReceiver(mSimStateChangedReceiver);
            mSimStateChangedReceiver = null;
        }
        if (mMsgListAdapter != null && mMsgListAdapter.mIsDeleteMode) {
            onFinishMultiChoose();
        }
       // Aurora xuyong 2014-09=10 added for uptimize start
        if (mConvaObserver != null) {
            this.getContentResolver().unregisterContentObserver(mConvaObserver);
            mConvaObserver = null;
        }
        if (mSimInfoObserver != null) {
            this.getContentResolver().unregisterContentObserver(mSimInfoObserver);
            mSimInfoObserver = null;
        }
        // Aurora xuyong 2015-07-01 added for bug #13930 start
        if (mDualSimModeSettingInfoObserver != null) {
        	this.getContentResolver().unregisterContentObserver(mDualSimModeSettingInfoObserver);
        	mDualSimModeSettingInfoObserver = null;
        }
        // Aurora xuyong 2015-07-01 added for bug #13930 end
        // Aurora xuyong 2014-09=10 added for uptimize end
       // Aurora xuyong 2014-09-02 added for bug-check end
        // Aurora xuyong 2014-05-06 added for aurora's new feature start
       // Aurora xuyong 2014-05-07 modified for bug 4693 start
         mThumbnailWorker.clearTaskSet();
       // Aurora xuyong 2014-05-07 modified for bug 4693 end
        // Aurora xuyong 2014-05-06 added for aurora's new feature end
        //gionee gaoj 2012-8-14 added for CR00623375 start
        if (MmsApp.mGnRegularlyMsgSend) {
            mRegularlyMain.setIsRegularly(false);
            mWorkingMessage.setRegularly(false);
            //gionee zhouyj 2012-08-16 add for CR00678252 start 
            if(null != mLocation) {
                mLocation.onDestroy();
                mLocation = null;
            }
            //gionee zhouyj 2012-08-16 add for CR00678252 end
            
          //Gionee <guoyx> <2013-05-14> modified for CR00796160 begin
            if (mHandler != null) {
                mHandler.removeCallbacks(hideToolBar);
                if (mRegularlyToolBar != null && mRegularlyToolBar.isShowing()) {
                    mRegularlyToolBar.hide();
                }
            }
          //Gionee <guoyx> <2013-05-14> modified for CR00796160 end
        }
        //gionee gaoj 2012-8-14 added for CR00623375 end
        if (TRACE) {
            android.os.Debug.stopMethodTracing();
        }
//a0
        if (mCellMgrRegisterCount == 1) {
            mCellMgr.unregister();
        }
        mCellMgrRegisterCount--;
        mDestroy = true;
        // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
        //mScrollListener.destroyThread();
        // Aurora xuyong 2013-09-13 deleted for aurora's new feature end
//a1
        //gionee gaoj 2012-4-23 added for CR00555790 CR00614058 start
        if (MmsApp.mGnMessageSupport && !isGnForwardMessage) {
            ContactsCacheSingleton.destoryInstance();
        }
        isGnForwardMessage = false;
        //gionee gaoj 2012-4-23 added for CR00555790 CR00614058 end
        // gionee zhouyj 2012-07-03 modify for CR00633165 start 
        if(MmsApp.mGnMessageSupport && AddReceiptorTab.mCurrent != null) {
            AddReceiptorTab.mCurrent.finish();
        }
        // gionee zhouyj 2012-07-03 modify for CR00633165 end 

        //gionee gaoj 2012-9-21 added for CR00687379 start
        if (MmsApp.mGnMtkGeminiSupport) {
            if (mSinIndicatorReceiver != null) {
                unregisterReceiver(mSinIndicatorReceiver);
                mSinIndicatorReceiver = null;
            }
        }
        // Aurora xuyong 2014-04-15 added for bug #4031 start 
        if (mAirplaneStatusChangeRecever != null) {
            unregisterReceiver(mAirplaneStatusChangeRecever);
            mAirplaneStatusChangeRecever = null;
        }
        // Aurora xuyong 2014-04-15 added for bug #4031 end
        // Aurora xuyong 2013-12-06 added for bug #1117 start 
        // Aurora xuyong 2014-04-15 deleted for bug #4187 start
        //if (mHomeButtonWatcher != null) {
        //    unregisterReceiver(mHomeButtonWatcher);
        //    mHomeButtonWatcher = null;
        //}
        // Aurora xuyong 2014-04-15 deleted for bug #4187 end
        // Aurora xuyong 2013-12-06 added for bug #1117 end
        //gionee gaoj 2012-9-21 added for CR00687379 end
        //gionee <gaoj> <2013-06-14> delete for CR00818911 begin
        //gionee gaoj 2013-1-21 added for CR00764025 start
        /*unbindService(serviceConnection);*/
        //gionee gaoj 2013-1-21 added for CR00764025 end
        //gionee <gaoj> <2013-06-14> delete for CR00818911 end
        //Gionee <zhouyj> <2013-05-15> add for CR00810588 begin
        if (MmsApp.mGnVoiceReadMsgSupport) {
            stopVoiceHelperService();
        }
        //Gionee <zhouyj> <2013-05-15> add for CR00810588 end
        if (mMsgListAdapter != null) {
            //aurora yudingmin 2014-08-22 modified for bug #7671 start
            mMsgListAdapter.changeData(null, null);
//            mMsgListAdapter.changeCursor(null);
            //aurora yudingmin 2014-08-22 modified for bug #7671 end
        }
        // Aurora xuyong 2014-03-22 modified for bug #3428 start
        if (mDiscardDraftDialog != null) {
            mDiscardDraftDialog.dismiss();
        }
        // Aurora xuyong 2014-03-22 modified for bug #3428 end
        // Aurora xuyong 2014-11-17 added for bug #9803 start
        // change the map 
        if (MmsApp.mGnMultiSimMessage) {
            new Thread(new Runnable() {
                
                public void run() {
                    MessageUtils.removeSIMInfo(mSIMInfo1);
                    MessageUtils.removeSIMInfo(mSIMInfo2);
                }
                
            }).start();
        }
        // Aurora xuyong 2014-11-17 added for bug #9803 end
        super.onDestroy();
    }

    @Override
    public void onConfigurationChanged(Configuration newConfig) {

        super.onConfigurationChanged(newConfig);
        if (LOCAL_LOGV) {
            Log.v(TAG, "onConfigurationChanged: " + newConfig);
        }
/*
        if (mIsLandscape != isLandscape) {
            mIsLandscape = isLandscape;
            // Have to re-layout the attachment editor because we have different layouts
            // depending on whether we're portrait or landscape.
            //add for multi-delete
            if (!mMsgListAdapter.mIsDeleteMode) {
                mAttachmentEditor.update(mWorkingMessage);
            }
        }
        onKeyboardStateChanged(mIsKeyboardOpen);
*/
        if (resetConfiguration(newConfig)) {
            // Have to re-layout the attachment editor because we have different layouts
            // depending on whether we're portrait or landscape.
//m0
//            drawTopPanel(isSubjectEditorVisible());
            if (!mMsgListAdapter.mIsDeleteMode) {
                drawTopPanel(isSubjectEditorVisible());
            }
//m1
        }
        onKeyboardStateChanged(mIsKeyboardOpen);
        //gionee gaoj 2012-4-10 added for CR00555790 start
        if (MmsApp.mGnMessageSupport) {
            if (mWorkingMessage.requiresMms()) {
                mTextCounter.setVisibility(View.GONE);
                // Aurora xuyong 2014-08-05 added for aurora multisim feature start
                if (mMultiTextCounter != null) {
                    mMultiTextCounter.setVisibility(View.GONE);
                }
                // Aurora xuyong 2014-08-05 added for aurora multisim feature end
                //gionee lwzh modify for CR00774362 20130227 begin
                //Gionee <guoyx> <2013-08-05> modify for CR00845227 begin
                if (mWorkingMessage.hasText()//!TextUtils.isEmpty(mWorkingMessage.getText()) 
                //Gionee <guoyx> <2013-08-05> modify for CR00845227 end 
                        && mTextEditor.getLineCount() > 1 
                        || mWorkingMessage.hasAttachment()
                        || mWorkingMessage.hasSubject() 
                        || (null != mSubjectTextEditor 
                            && mSubjectTextEditor.getVisibility() == View.VISIBLE)) {
                    mediaTextView.setVisibility(View.VISIBLE);
                    // Aurora xuyong 2014-08-05 added for aurora multisim feature start
                    if (mMultiMediaSizeInfo != null) {
                        mMultiMediaSizeInfo.setVisibility(View.VISIBLE);
                    }
                    // Aurora xuyong 2014-08-05 added for aurora multisim feature end
                    if (!mWorkingMessage.hasAttachment()) {
                        //Gionee <guoyx> <2013-08-05> add for CR00845227 begin
                  //gionee lwzh modify for CR00774362 20130227 end
                        setMediaTextSizeInfo(mWorkingMessage.getSubject(), mWorkingMessage.getText());
                        //Gionee <guoyx> <2013-08-05> add for CR00845227 end
                    }
                } else {
                    mediaTextView.setVisibility(View.GONE);
                    // Aurora xuyong 2014-08-05 added for aurora multisim feature start
                    if (mMultiMediaSizeInfo != null) {
                        mMultiMediaSizeInfo.setVisibility(View.GONE);
                    }
                    // Aurora xuyong 2014-08-05 added for aurora multisim feature end
                }
            } else {
                resetTextCounterState();
            }
        }
        //gionee gaoj 2012-4-10 added for CR00555790 end
//a0
        /*if (mDeletePanel != null && mDeletePanel.getVisibility() == View.VISIBLE) {
            LinearLayout.LayoutParams mParams = new LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);
            mParams.height = getAuroraActionBar().getHeight();
            mDeletePanel.setLayoutParams(mParams);
        }*/
//a1
    }

    // returns true if landscape/portrait configuration has changed
    private boolean resetConfiguration(Configuration config) {
        mIsKeyboardOpen = config.keyboardHidden == KEYBOARDHIDDEN_NO;
        boolean isLandscape = config.orientation == Configuration.ORIENTATION_LANDSCAPE;
//a0
        // gionee zhouyj 2012-11-06 modify for CR00717468(CR00699178 CR00704739) start
        if (MmsApp.mGnMessageSupport && mBottomPanel != null) {
            autoRegulationMessageLayoutHeight();
        }
        // gionee zhouyj 2012-11-06 modify for CR00717468(CR00699178 CR00704739) end
        if (isLandscape) {
            // Hide input Method.
            // gionee zhouyj 2012-09-21 remove for CR00699149 start 
            if(!MmsApp.mGnMessageSupport) {
            hideInputMethod();
            }
            // gionee zhouyj 2012-09-21 remove for CR00699149 end
          //Gionee <guoyx> <2013-07-18> delete for CR00780083 begin
//            //gionee gaoj 2012-4-10 added for CR00555790 start
//            if (MmsApp.mGnMessageSupport ) {
//                if ((mAttachmentSlideView != null) && (mAttachmentSlideView.getVisibility() == View.VISIBLE)) {
//                    mAttachmentSlideView.setVisibility(View.GONE);
//                }
//            }
//            //gionee gaoj 2012-4-10 added for CR00555790 end
          //Gionee <guoyx> <2013-07-18> delete for CR00780083 end
            
        }
//a1
        if (mIsLandscape != isLandscape) {
            mIsLandscape = isLandscape;
            //gionee gaoj 2012-4-10 added for CR00555790 start
            if(MmsApp.mGnMessageSupport){
                //Gionee <guoyx> <2013-07-18> modify for CR00780083 begin
                // gionee zhouyj 2012-08-29 modify for CR00680737 start 
                hideAttachmentSlideView();
                // gionee zhouyj 2012-08-29 modify for CR00680737 end
                //Gionee <guoyx> <2013-07-18> modify for CR00780083 end
            }
            //gionee gaoj 2012-4-10 added for CR00555790 end
            return true;
        }
        return false;
    }

    private void onKeyboardStateChanged(boolean isKeyboardOpen) {
        // If the keyboard is hidden, don't show focus highlights for
        // things that cannot receive input.
        if (isKeyboardOpen) {
            //gionee gaoj 2012-4-10 added for CR00555790 start
            if (!MmsApp.mGnMessageSupport) {
                //gionee gaoj 2012-4-10 added for CR00555790 end
            if (mRecipientsEditor != null) {
                mRecipientsEditor.setFocusableInTouchMode(true);
            }
            //gionee gaoj 2012-4-10 added for CR00555790 start
            }
            //gionee gaoj 2012-4-10 added for CR00555790 end
            if (mSubjectTextEditor != null) {
                mSubjectTextEditor.setFocusableInTouchMode(true);
            }
            // Aurora xuyong 2013-09-24 deleted for aurora;s new feature start
            //mTextEditor.setFocusableInTouchMode(true);
            // Aurora xuyong 2013-09-24 deleted for aurora;s new feature end
            mTextEditor.setHint(R.string.type_to_compose_text_enter_to_send);
        } else {
            //gionee gaoj 2012-4-10 added for CR00555790 start
            if (!MmsApp.mGnMessageSupport) {
                //gionee gaoj 2012-4-10 added for CR00555790 end
            if (mRecipientsEditor != null) {
                mRecipientsEditor.setFocusable(false);
            }
            //gionee gaoj 2012-4-10 added for CR00555790 start
            }
            //gionee gaoj 2012-4-10 added for CR00555790 end
            if (mSubjectTextEditor != null) {
                mSubjectTextEditor.setFocusable(false);
            }
            // Aurora xuyong 2013-09-24 added for aurora;s new feature start
            //mTextEditor.setFocusable(false);
            // Aurora xuyong 2013-09-24 added for aurora;s new feature end
            mTextEditor.setHint(R.string.open_keyboard_to_compose_message);
        }
    }

    @Override
    public void onUserInteraction() {
        checkPendingNotification();
    }

    @Override
    public void onWindowFocusChanged(boolean hasFocus) {
        if (hasFocus) {
            checkPendingNotification();
        }
    }
    // Aurora xuyong 2014-07-10 added for bug #6089 start
    private long mLastDelTime = -1l;
    // Aurora xuyong 2014-07-10 added for bug #6089 end
    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        switch (keyCode) {
            // Aurora xuyong 2013-10-11 modified for aurora's new feature start
            case KeyEvent.KEYCODE_MENU:
                 return true;
            // Aurora xuyong 2013-10-11 modified for aurora's new feature start
            case KeyEvent.KEYCODE_DEL:
                 // Aurora xuyong 2014-07-10 added for bug #6089 start
                    long duration = System.currentTimeMillis() - mLastDelTime;
                    mLastDelTime += duration;
                    if (duration <= 100) {
                        mNeedReturn = true;
                    } else {
                        mNeedReturn = false;
                    }
                 // Aurora xuyong 2014-07-10 added for bug #6089 end
                if ((mMsgListAdapter != null) && mMsgListView.isFocused()) {
                    Cursor cursor;
                    try {
                        cursor = (Cursor) mMsgListView.getSelectedItem();
                    } catch (ClassCastException e) {
                        Log.e(TAG, "Unexpected ClassCastException.", e);
                        return super.onKeyDown(keyCode, event);
                    }

                    if (cursor != null) {
                        boolean locked = cursor.getInt(COLUMN_MMS_LOCKED) != 0;
                        DeleteMessageListener l = new DeleteMessageListener(
                                cursor.getLong(COLUMN_ID),
                                cursor.getString(COLUMN_MSG_TYPE),
                                locked);
                        //Gione <guoyx> <2013-06-09> modify for CR00824219 begin
                        mDeleteConfirmDialog = confirmDeleteDialog(l, locked);
                        //Gione <guoyx> <2013-06-09> modify for CR00824219 end
                        return true;
                    }
                }
                break;
            case KeyEvent.KEYCODE_DPAD_CENTER:
//a0
                break;
//a1
            case KeyEvent.KEYCODE_ENTER:
//m0
/*
                if (isPreparedForSending()) {
                    confirmSendMessageIfNeeded();
                    return true;
                }
*/
                if (isPreparedForSending()) {
                    //simSelection();
                    checkRecipientsCount();
                    return true;
                } else {
                    if (!isHasRecipientCount()) {
                            new AuroraAlertDialog.Builder(this)
                                .setIconAttribute(android.R.attr.alertDialogIcon)
                                .setTitle(R.string.cannot_send_message)
                                .setMessage(R.string.cannot_send_message_reason)
                                .setPositiveButton(R.string.yes,new CancelSendingListener()).show();
                    } else {
                        new AuroraAlertDialog.Builder(this)
                            .setIconAttribute(android.R.attr.alertDialogIcon)
                            .setTitle(R.string.cannot_send_message)
                            .setMessage(R.string.cannot_send_message_reason_no_content)
                            .setPositiveButton(R.string.yes,new CancelSendingListener()).show();
                    }
                }
//m1
                break;
            case KeyEvent.KEYCODE_BACK:
                // Aurora xuyong 2015-09-14 added for aurora's new feature start
            	if (mPopsIsShowing) {
            		AuroraHotizontalListItem.clearSelectedItems();
            		return true;
            	}
                // Aurora xuyong 2015-09-14 added for aurora's new feature end
                // Aurora xuyong 2015-03-04 modified for bug #11831 start
                if (isRecipientsEditorVisible()) {
                    // Aurora xuyong 2015-03-06 modified for bug #12051 start
                    if (mContactContainer.isFocused()) {
                        mContactContainer.setAddingRecipient(true);
                    }
                    if (mContactContainer != null && mContactContainer.isAddingRecipient()) {
                    // Aurora xuyong 2015-03-06 modified for bug #12051  end
                        mContactContainer.setOnClickBack(BACK_TYPE_ACTIONBAR);
                        return true;
                    }
                }
                return handleKeyBackDownEvent();
                // Aurora xuyong 2015-03-04 modified for bug #11831 end
//            case KeyEvent.KEYCODE_MENU:
//                invalidateOptionsMenu();
//                return false;
        }

        return super.onKeyDown(keyCode, event);
    }
    // Aurora xuyong 2015-03-04 added for bug #11831 start
    private boolean handleKeyBackDownEvent() {
     // Aurora xuyong 2014-03-22 modified for aurora's new feature start
        // Aurora xuyong 2014-06-18 modified for bug #5920 start
        if (mAuroraActionBar != null && ((!mMsgListAdapter.mIsDeleteMode && mAuroraActionBar.auroraIsExitEditModeAnimRunning()) || 
                (mMsgListAdapter.mIsDeleteMode && mAuroraActionBar.auroraIsEntryEditModeAnimRunning()))) {
        // Aurora xuyong 2014-06-18 modified for bug #5920 end
              return true;
           }
        // Aurora xuyong 2014-03-22 modified for aurora's new feature end
        // Aurora xuyong 2013-09-17 deleted for aurora's new feature start 
        //if (isOptionsMenuExpand()) {
        //    return super.onKeyDown(keyCode, event);
        //}
        // Aurora xuyong 2013-09-17 deleted for aurora's new feature end
//m0
/*
        exitComposeMessageActivity(new Runnable() {
            public void run() {
                finish();
            }
        });
*/
//        if (isRecipientsEditorVisible()) {
//            mRecipientsEditor.structLastRecipient();
//        }

        // M: when out of composemessageactivity,try to send read report
        // gionee zhouyj 2012-07-05 add for CR00637457 start
        if(MmsApp.mGnMessageSupport && mMsgListAdapter.mIsDeleteMode) {
            onFinishMultiChoose();
            return true;
        }
        // Aurora xuyong 2013-12-27 added for aurora]s new feature start
        if (mAuroraMenu != null && mAuroraMenu.isShowing()) {
            return true;
        }
        // Aurora xuyong 2013-12-27 added for aurora]s new feature end
        // gionee zhouyj 2012-07-05 add for CR00637457 end
        if (mIsLeMei) {
            if (mWorkingMessage != null) {
                mWorkingMessage.discard();
            }
            // Aurora xuyong 2014-07-14 added for aurora's new feature start
            if (operConvMap != null && operConvMap.size() > 0) {
                deleteConvByIds(operConvMap);
            }
            // Aurora xuyong 2014-07-14 added for aurora's new feature end
            finish();
        } else {
            //gionee gaoj 2012-4-10 added for CR00555790 start
            if(MmsApp.mGnMessageSupport){
                if (mAttachmentSlideView != null
                        && View.VISIBLE == mAttachmentSlideView.getVisibility()) {
                    if(mAttachmentSlideViewCurrent == mAttachmentSlideViewHome){
                        // Aurora xuyong 2014-03-06 added for aurora's new feature start
                        if (mAddButton != null) {
                            mAddButton.setImageResource(R.drawable.aurora_insert_attch_selector);
                        }
                        // Aurora xuyong 2014-03-06 added for aurora's new feature end
                        mAttachmentSlideView.setVisibility(View.GONE);
                    }else{
                        showAnAttachmentSlide(mAttachmentSlideViewHome);
                    }
                    return true;
                }
            }
            //gionee gaoj 2012-4-10 added for CR00555790 end
            if (FeatureOption.MTK_SEND_RR_SUPPORT) {
                checkAndSendReadReport();
            }
            // Aurora yudingmin 2014-10-25 modify for bug #9343 start
            final Context context = getApplicationContext();
            exitComposeMessageActivity(new Runnable() {
                public void run() {
                  // Aurora xuyong 2014-07-14 added for aurora's new feature start
                    if (operConvMap != null && operConvMap.size() > 0) {
                        deleteConvByIds(context, operConvMap);
                    }
                  // Aurora xuyong 2014-07-14 added for aurora's new feature end
                }
            // Aurora xuyong 2014-03-06 modified for bug #2819 start
            }, true);
            // Aurora xuyong 2014-03-06 modified for bug #2819 end
            // Aurora yudingmin 2014-10-25 modify for bug #9343 end
        }
//m1
        return true;
    }
    // Aurora xuyong 2015-03-04 added for bug #11831 end
    // Aurora xuyong 2014-03-06 modified for bug #2819 start
    AuroraAlertDialog mDiscardDraftDialog;

    private void exitComposeMessageActivity(final Runnable exit, boolean needShowDiscardDialog) {
    // Aurora xuyong 2014-03-06 modified for bug #2819 end
        // If the message is empty, just quit -- finishing the
        // activity will cause an empty draft to be deleted.
        if (!mWorkingMessage.isWorthSaving()) {
            mWorkingMessage.discard();
//            Conversation c = mWorkingMessage.getConversation();
//            if (c != null && !mWaitingForSendMessage) {
//                mWorkingMessage.asyncDeleteAllMmsDraft(c.getThreadId());
//            }
            // Aurora yudingmin 2014-10-25 modified for bug #9343 start
            exitFinish(exit);
            // Aurora yudingmin 2014-10-25 modified for bug #9343 end
            return;
        }

        //gionee gaoj 2013-4-1 modified for CR00788343 start
        //gionee gaoj 2012-4-10 added for CR00555790 start
        if (MmsApp.mGnMessageSupport && mMsgListAdapter.getCount() == 0 && isRecipientsEditorVisible() && MmsApp.mIsDraftOpen) {
            //gionee gaoj 2013-4-1 modified for CR00788343 end
            Log.i(TAG, "exitComposeMessageActivity");
            if (mContactContainer != null) {
                mContactContainer.updateContacts();
            }
            if (!mIsFromDraftBox) {
                MessageUtils.showSaveDraftConfirmDialog(this, new SaveDraftListener());
            } else {
                mToastForDraftSave = false;
                mNeedSaveDraft = true;
                // Aurora yudingmin 2014-10-25 modified for bug #9343 start
                exitFinish(exit);
                // Aurora yudingmin 2014-10-25 modified for bug #9343 end
            }
            return;
        }
        //gionee gaoj 2012-4-10 added for CR00555790 end
        //gionee gaoj 2012-4-10 added for CR00555790 start
        if (MmsApp.mGnMessageSupport) {
            //gionee gaoj 2013-4-1 added for CR00788343 start
            Log.i(TAG, "MmsApp.mIsDraftOpen = false exitComposeMessageActivity");
            if (mContactContainer != null) {
                mContactContainer.updateContacts();
            }
            //gionee gaoj 2013-4-1 added for CR00788343 end
            if (isRecipientsEditorVisible() &&
                    !mContactContainer.hasValidRecipient(mWorkingMessage.requiresMms())) {
                // Aurora xuyong 2014-03-06 modified for bug #2819 start
                if (mDiscardDraftDialog == null) {
                    mDiscardDraftDialog = MessageUtils.showDiscardDraftConfirmDialog(this, new DiscardDraftListener());
                }
                if (needShowDiscardDialog) {
                    mDiscardDraftDialog.show();
                }
                // Aurora xuyong 2014-03-06 modified for bug #2819 end
                return;
            }
        } else {
            //gionee gaoj 2012-4-10 added for CR00555790 end
        if (isRecipientsEditorVisible() &&
                !mRecipientsEditor.hasValidRecipient(mWorkingMessage.requiresMms())) {
            // Aurora xuyong 2014-03-06 modified for bug #2819 start
            if (mDiscardDraftDialog == null) {
                mDiscardDraftDialog = MessageUtils.showDiscardDraftConfirmDialog(this, new DiscardDraftListener());
            }
            if (needShowDiscardDialog) {
                mDiscardDraftDialog.show();
            }
            // Aurora xuyong 2014-03-06 modified for bug #2819 end
            return;
        }
        //gionee gaoj 2012-4-10 added for CR00555790 start
        }
        //gionee gaoj 2012-4-10 added for CR00555790 end

        if (needSaveDraft()) {
            DraftCache.getInstance().setSavingDraft(true);
        }
        mWorkingMessage.setNeedDeleteOldMmsDraft(true);
        mToastForDraftSave = true;
        // Aurora yudingmin 2014-10-25 modified for bug #9343 start
        exitFinish(exit);
        // Aurora yudingmin 2014-10-25 modified for bug #9343 end
    }

    // Aurora yudingmin 2014-10-25 added for bug #9343 start
    private void exitFinish(Runnable exit){
        new Thread(exit).start();
        finish();
    }
    // Aurora yudingmin 2014-10-25 added for bug #9343 end

    private void goToConversationList() {
       // Aurora xuyong 2014-07-14 added for aurora's new feature start
        if (operConvMap != null && operConvMap.size() > 0) {
            deleteConvByIds(operConvMap);
        }
       // Aurora xuyong 2014-07-14 added for aurora's new feature end
        finish();
          // Aurora liugj 2013-10-31 modified for aurora's new feature start 
        // add for cmcc dir ui begin
        /*if(MmsConfig.getMmsDirMode()) {
            Intent it = new Intent(this, FolderViewList.class);
            it.putExtra("floderview_key", mHomeBox);
            startActivity(it);
        } else {
        // add for cmcc dir ui end
            //gionee gaoj 2012-3-22 added for CR00555790 start
            if (MmsApp.mGnMessageSupport) {
                startActivity(new Intent(this, TabActivity.class));
            } else {
            //gionee gaoj 2012-3-22 added for CR00555790 end 
        startActivity(new Intent(this, ConversationList.class));
            //gionee gaoj 2012-3-22 added for CR00555790 start
            }
            //gionee gaoj 2012-3-22 added for CR00555790 end
        // add for cmcc dir ui begin
        }*/
        // add for cmcc dir ui end
         // Aurora liugj 2013-10-31 modified for aurora's new feature end 
    }

    private void hideRecipientEditor() {
        //gionee gaoj 2012-4-10 added for CR00555790 start
        if (MmsApp.mGnMessageSupport) {
            if(mContactContainerScroll != null)
            {
                mContactContainerScroll.setVisibility(View.GONE);
                //hideOrShowTopPanel();
            }
        } else {
            //gionee gaoj 2012-4-10 added for CR00555790 end
        if (mRecipientsEditor != null) {
            mRecipientsEditor.removeTextChangedListener(mRecipientsWatcher);
            mRecipientsEditor.setVisibility(View.GONE);
            mRecipientsPicker.setVisibility(View.GONE);
            //hideOrShowTopPanel();
        }
        //gionee gaoj 2012-4-10 added for CR00555790 start
        }
        //gionee gaoj 2012-4-10 added for CR00555790 end
    }

    private boolean isRecipientsEditorVisible() {
        return mContactContainer != null && mContactContainer.getVisibility() == View.VISIBLE
            && mContactContainerScroll.getVisibility() == View.VISIBLE;
    }

    private boolean isSubjectEditorVisible() {
        return (null != mSubjectTextEditor)
                    && (View.VISIBLE == mSubjectTextEditor.getVisibility());
    }

    public void onAttachmentChanged() {
        // Have to make sure we're on the UI thread. This function can be called off of the UI
        // thread when we're adding multi-attachments
        // Aurora yudingmin 2014-10-15 added for bug #7946 start
        if(mHandler.hasMessages(ATTACHMENT_CHANGED)){
            mHandler.removeMessages(ATTACHMENT_CHANGED);
        }
        mHandler.sendEmptyMessageDelayed(ATTACHMENT_CHANGED, 50);
        // Aurora yudingmin 2014-10-15 added for bug #7946 end
        // Aurora yudingmin 2014-10-15 deleted for bug #7946 start
//        runOnUiThread(new Runnable() {
//            public void run() {
//                drawBottomPanel();
//                updateSendButtonState();
//                drawTopPanel(isSubjectEditorVisible());
//                //gionee gaoj 2012-4-10 added for CR00555790 start
//                if (!MmsApp.mGnMessageSupport) {
//                    //gionee gaoj 2012-4-10 added for CR00555790 end
//                if (null != mRecipientsEditor) {
//                    if (mWorkingMessage.hasSlideshow()) {
//                             // Aurora liugj 2013-10-30 modified for delete android.internal start
//                        mRecipientsEditor.setImeActionLabel(getString(R.string.ime_action_done), EditorInfo.IME_ACTION_DONE);
//                             // Aurora liugj 2013-10-30 modified for delete android.internal end
//                        mRecipientsEditor.setImeOptions(EditorInfo.IME_ACTION_DONE);                             
//                    } else {
//                             // Aurora liugj 2013-10-30 modified for delete android.internal start
//                        mRecipientsEditor.setImeActionLabel(getString(R.string.ime_action_next), EditorInfo.IME_ACTION_NEXT);
//                             // Aurora liugj 2013-10-30 modified for delete android.internal end
//                        mRecipientsEditor.setImeOptions(EditorInfo.IME_ACTION_NEXT);
//                    }
//                }
//                // Aurora xuyong 2014-07-26 deleted for bug #6844 start
//                //((InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE)).restartInput(mRecipientsEditor);
//                // Aurora xuyong 2014-07-26 deleted for bug #6844 end
//                //gionee gaoj 2012-4-10 added for CR00555790 start
//                }
//                //gionee gaoj 2012-4-10 added for CR00555790 end
//            }
//        });
        // Aurora yudingmin 2014-10-15 deleted for bug #7946 end
    }

//m0
/*
    public void onProtocolChanged(final boolean mms) {
        // Have to make sure we're on the UI thread. This function can be called off of the UI
        // thread when we're adding multi-attachments
        runOnUiThread(new Runnable() {
            public void run() {
                toastConvertInfo(mms);
                showSmsOrMmsSendButton(mms);

                if (mms) {
                    // In the case we went from a long sms with a counter to an mms because
                    // the user added an attachment or a subject, hide the counter --
                    // it doesn't apply to mms.
                    mTextCounter.setVisibility(View.GONE);
                }
            }
        });
    }
*/
    public void onProtocolChanged(final boolean mms, final boolean needToast) {
        // Have to make sure we're on the UI thread. This function can be called off of the UI
        // thread when we're adding multi-attachments
        runOnUiThread(new Runnable() {
            public void run() {
                //gionee gaoj 2012-4-10 added for CR00555790 start
                /*if (!MmsApp.mGnMessageSupport) {
                showSmsOrMmsSendButton(mms);
                }*/
                //gionee gaoj 2012-4-10 added for CR00555790 end

                if (mms == true) {
                    mTextCounter.setVisibility(View.GONE);
                    // Aurora xuyong 2014-08-05 added for aurora multisim feature start
                    if (mMultiTextCounter != null) {
                        mMultiTextCounter.setVisibility(View.GONE);
                    }
                    // Aurora xuyong 2014-08-05 added for aurora multisim feature end
                    //gionee gaoj 2012-4-10 added for CR00555790 start
                    if (MmsApp.mGnMessageSupport) {
                        //Gionee <guoyx> <2013-08-05> modify for CR00845227 begin
                        if (mWorkingMessage.hasText()//!TextUtils.isEmpty(mWorkingMessage.getText())
                        //Gionee <guoyx> <2013-08-05> modify for CR00845227 end
                                && mTextEditor.getLineCount() > 1 
                                || mWorkingMessage.hasAttachment()
                                || mWorkingMessage.hasSubject() 
                                || (null != mSubjectTextEditor && mSubjectTextEditor.getVisibility() == View.VISIBLE)) {
                            mediaTextView.setVisibility(View.VISIBLE);
                            // Aurora xuyong 2014-08-05 added for aurora multisim feature start
                            if (mMultiMediaSizeInfo != null) {
                                mMultiMediaSizeInfo.setVisibility(View.VISIBLE);
                            }
                            // Aurora xuyong 2014-08-05 added for aurora multisim feature end
                            if (!mWorkingMessage.hasAttachment()) {
                                //Gionee <guoyx> <2013-08-05> add for CR00845227 begin
                                setMediaTextSizeInfo(mWorkingMessage.getSubject(), mWorkingMessage.getText());
                                //Gionee <guoyx> <2013-08-05> add for CR00845227 end
                            }
                        } else {
                            mediaTextView.setVisibility(View.GONE);
                            // Aurora xuyong 2014-08-05 added for aurora multisim feature start
                            if (mMultiMediaSizeInfo != null) {
                                mMultiMediaSizeInfo.setVisibility(View.GONE);
                            }
                            // Aurora xuyong 2014-08-05 added for aurora multisim feature end
                        }
                    //gionee gaoj 2012-4-10 added for CR00555790 end
                    }
                } else {
                    //gionee gaoj 2012-4-10 added for CR00555790 start
                    if (MmsApp.mGnMessageSupport) {
                        ensureTextCounterState();
                    } else {
                        //gionee gaoj 2012-4-10 added for CR00555790 end
                    mTextCounter.setVisibility(View.VISIBLE);
                    // Aurora xuyong 2014-08-05 added for aurora multisim feature start
                    if (mMultiTextCounter != null) {
                        mMultiTextCounter.setVisibility(View.VISIBLE);
                    }
                    // Aurora xuyong 2014-08-05 added for aurora multisim feature end
                    //gionee gaoj 2012-4-10 added for CR00555790 start
                    }
                    //gionee gaoj 2012-4-10 added for CR00555790 end
                }
                updateSendButtonState();
                if(needToast && !mIsLeMei){
                    toastConvertInfo(mms);
                }
            }
        });
    }
//m1

    // Show or hide the Sms or Mms button as appropriate. Return the view so that the caller
    // can adjust the enableness and focusability.
    /*private View showSmsOrMmsSendButton(boolean isMms) {
        View showButton;
        View hideButton;
        if (isMms) {
            showButton = mSendButtonMms;
            hideButton = mSendButtonSms;
        } else {
            showButton = mSendButtonSms;
            hideButton = mSendButtonMms;
        }
        showButton.setVisibility(View.VISIBLE);
        hideButton.setVisibility(View.GONE);

        return showButton;
    }*/

    Runnable mResetMessageRunnable = new Runnable() {
        public void run() {
            resetMessage();
        }
    };

    public void onPreMmsSent() {
        startMsgListQuery(0);
    }

    public void onPreMessageSent() {
        runOnUiThread(mResetMessageRunnable);
    }

    public void onMessageSent() {
        //gionee gaoj 2012-12-19 added for CR00751983 start
        isSendingMsg = true;
        //gionee gaoj 2012-12-19 added for CR00751983 end
//a0
        mWaitingForSendMessage = false;
//a1
        // If we already have messages in the list adapter, it
        // will be auto-requerying; don't thrash another query in.
        if (mMsgListAdapter.getCount() == 0) {
            if (LogTag.VERBOSE) {
                log("onMessageSent");
            }
            //gionee gaoj 2012-4-10 added for CR00555790 start //CR00788343
            if (MmsApp.mGnMessageSupport && MmsApp.mIsDraftOpen) {
                mConversation.setDraftState(false);
                mConversation.clearThreadId();
                mConversation.ensureThreadId();
            }
            //gionee gaoj 2012-4-10 added for CR00555790 end
            startMsgListQuery(0);
        }
    }

    public void onMaxPendingMessagesReached() {
        saveDraft(false);

        runOnUiThread(new Runnable() {
            public void run() {
                Toast.makeText(ComposeMessageActivity.this, R.string.too_many_unsent_mms,
                        Toast.LENGTH_LONG).show();
                mSendingMessage = false;
                updateSendButtonState();
            }
        });
    }

    public void onAttachmentError(final int error) {
        runOnUiThread(new Runnable() {
            public void run() {
                handleAddAttachmentError(error, R.string.type_picture);
                onMessageSent();        // now requery the list of messages
            }
        });
    }

    // We don't want to show the "call" option unless there is only one
    // recipient and it's a phone number.
    private boolean isRecipientCallable() {
        ContactList recipients = getRecipients();
        // Gionee: 20120906 chenrui modify for CR00688259 begin
        //return (recipients.size() == 1 && !recipients.containsEmail());
        return (recipients.size() == 1 && !recipients.containsEmail() && Mms.isPhoneNumber(recipients.get(0).getNumber()));
        // Gionee: 20120906 chenrui modify for CR00688259 end
    }
    // Aurora xuyong 2015-09-06 added for bug #16002 start
    private boolean isRecipientCallable(String number) {
        return Mms.isPhoneNumber(number);
    }
    // Aurora xuyong 2015-09-06 added for bug #16002 end
    // Aurora xuyong 2014-05-30 added for multisim feature start
    private void multiSimDialRecipient(int slotId, Boolean isVideoCall) {
        String number = getRecipients().get(0).getNumber();
        // Aurora xuyong 2015-09-06 modified for bug #16002 start
    	if (isRecipientCallable(number)) {
	        Intent dialIntent = AuroraTelephoneManager.getCallNumberIntent(number, slotId);
	        startActivity(dialIntent);
    	} else {
    		Toast.makeText(this, R.string.aurora_phonenum_invalid, Toast.LENGTH_SHORT).show();
    	}
        // Aurora xuyong 2015-09-06 modified for bug #16002 end
    }
    
    private void multiSimDialCorresRecipient(int slotId, String number, Boolean isVideoCall) {
        // Aurora xuyong 2015-09-06 modified for bug #16002 start
    	if (isRecipientCallable(number)) {
	        Intent dialIntent = AuroraTelephoneManager.getCallNumberIntent(number, slotId);
	        startActivity(dialIntent);
    	} else {
    		Toast.makeText(this, R.string.aurora_phonenum_invalid, Toast.LENGTH_SHORT).show();
    	}
        // Aurora xuyong 2015-09-06 modified for bug #16002 end
    }
    
    public int getLastCallSlotId(Context context, String number) {

        int lastSimId = -1;
        String[] projection = { Calls.SIM_ID };
        Cursor cursor = null;
        if (null != context) {
            cursor = context.getContentResolver().query(Calls.CONTENT_URI,
                    projection, Calls.NUMBER + " = '" + number + "'", null,
                    "_id desc");
        }

        if (null != cursor) {
            if (true == cursor.moveToFirst()) {
                lastSimId = Integer.valueOf(cursor.getInt(0));
            }

            cursor.close();
        }
        // Aurora xuyong 2014-08-05 modified for bug #7249 start
        if (mSIMInfo1 == null) {
        	try {
                mSIMInfo1 = SIMInfo.getSIMInfoBySlot(this, GnPhone.GEMINI_SIM_1);
	        } catch (IllegalArgumentException e) {
	            e.printStackTrace();
	        } catch (SQLiteException e) {
	    		e.printStackTrace();
	    	}
            // Aurora xuyong 2014-11-17 added for bug #9803 start
            MessageUtils.addSIMInfo(mSIMInfo1);
            // Aurora xuyong 2014-11-17 added for bug #9803 end
        }
        if (mSIMInfo2 == null) {
        	try {
        		mSIMInfo2 = SIMInfo.getSIMInfoBySlot(this, GnPhone.GEMINI_SIM_2);
	        } catch (IllegalArgumentException e) {
	            e.printStackTrace();
	        } catch (SQLiteException e) {
	    		e.printStackTrace();
	    	}
            // Aurora xuyong 2014-11-17 added for bug #9803 start
            MessageUtils.addSIMInfo(mSIMInfo2);
            // Aurora xuyong 2014-11-17 added for bug #9803 end
        }
        long simId1 = -2;
        if (mSIMInfo1 != null) {
            simId1 = mSIMInfo1.mSimId;
        }
        long simId2 = -2;
        if (mSIMInfo2 != null) {
            simId2 = mSIMInfo2.mSimId;
        // Aurora xuyong 2014-08-05 modified for bug #7249 end
        }
        
        if (lastSimId == simId1) {
            return 0;
        } else if (lastSimId == simId2) {
            return 1;
        } else {
            return -1;
        }
    }
    // Aurora xuyong 2014-05-30 added for multisim feature end

    private void dialRecipient(Boolean isVideoCall) {
        if (isRecipientCallable()) {
            String number = getRecipients().get(0).getNumber();
            //gionee gaoj 2012-7-16 added for CR00647727 start
            // Aurora xuyong 2014-05-30 deleted for multisim feature start
            //if (MmsApp.mGnMessageSupport) {
                /*Intent intent = new Intent(Intent.ACTION_CALL_PRIVILEGED, Uri.fromParts("tel", number, null));
                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                intent.putExtra("autoIpDial", true);
                intent.setClassName("com.android.phone", "com.android.phone.OutgoingCallBroadcaster");
                intent.setFlags(
                        Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
                startActivity(intent);*/
            //    int[] location = new  int[2] ;
                //mCallButton.getLocationOnScreen(location);
           //     DisplayMetrics dm = new DisplayMetrics();
           //     getWindowManager().getDefaultDisplay().getMetrics(dm);
           //     int x = location[0] - dm.widthPixels/2 - 80;
           //     int y = location[1] - dm.heightPixels/2 + 30;
           //     Intent intent = new Intent("com.android.contacts.action.GNSELECTSIM");
           //     intent.putExtra("x", x);
           //     intent.putExtra("y", y);
           //     intent.putExtra("number", number);
           //     startActivity(intent);
           // } else {
           // Aurora xuyong 2014-05-30 deleted for multisim feature end
            //gionee gaoj 2012-7-16 added for CR00647727 end
            // Aurora xuyong 2014-06-06 modified for bug #5367 start 
            if (MmsApp.mGnMultiSimMessage) {
                   Intent dialIntent = AuroraTelephoneManager.getCallNumberIntent(number, mDaultCallSlot);
                   startActivity(dialIntent); 
            } else {
                   Intent dialIntent = new Intent(Intent.ACTION_CALL, Uri.parse("tel:" + number));
                 startActivity(dialIntent);
            }
          // Aurora xuyong 2014-06-06 modified for bug #5367 end
            //gionee gaoj 2012-7-16 added for CR00647727 start
          // Aurora xuyong 2014-05-30 added for multisim feature start
          //  }
          // Aurora xuyong 2014-05-30 deleted for multisim feature end
            //gionee gaoj 2012-7-16 added for CR00647727 end
          // Aurora liugj 2013-11-08 modified for NO TOAST start
        }else {
            Toast.makeText(this, R.string.aurora_phonenum_invalid, Toast.LENGTH_SHORT).show();
        }
        // Aurora liugj 2013-11-08 modified for NO TOAST end
    }

    //@Override
    //public boolean onCreateOptionsMenu(Menu menu) {
        /*mMenu = menu;
        getMenuInflater().inflate(R.menu.gn_compose_batch_menu, menu);
        mMenuBatchDeleteItem = menu.findItem(R.id.gn_menu_batch_delete);
        mMenuBatchCopyItem = menu.findItem(R.id.gn_menu_batch_copy);
        mMenuBatchForwardItem = menu.findItem(R.id.gn_menu_batch_forward);
        mMenuBatchStarItem = menu.findItem(R.id.gn_menu_batch_star);
        mMenuBatchEditItem = menu.findItem(R.id.gn_menu_batch_edit);
        mMenuBatchSlidshowItem = menu.findItem(R.id.gn_menu_batch_slidshow);
        mMenuBatchCopySimItem = menu.findItem(R.id.gn_menu_batch_copy_sim);
        mMenuBatchCopySdcardItem = menu.findItem(R.id.gn_menu_batch_copy_sdcard);
        mMenuBatchDetailsItem = menu.findItem(R.id.gn_menu_batch_details);*/
     //   return super.onCreateOptionsMenu(menu);
    //}
    
    //@Override
    //public boolean onPrepareOptionsMenu(Menu menu) {

        // gionee lwzh add for CR00633086 20120702 begin
       // if (MmsApp.mGnMessageSupport) {
//            gnOnPrepareOptionsMenu(menu);
            // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
            //batchMoreMenu(menu);
            // Aurora xuyong 2013-09-13 deleted for aurora's new feature end
           // return super.onPrepareOptionsMenu(menu);
        //}
        // gionee lwzh add for CR00633086 20120702 end
        /*
        menu.clear();
        if (mIsLeMei) {
            menu.add(0, MENU_DISCARD, 0, R.string.discard).setIcon(
                    android.R.drawable.ic_menu_delete);
            return true;
        }
        
        TelephonyManager telephony = MmsApp.getApplication().getTelephonyManager();
                
        if (telephony != null && telephony.isVoiceCapable() && isRecipientCallable()) {
            MenuItem item = menu.add(0, MENU_CALL_RECIPIENT, 0, R.string.menu_call)
                    .setIcon(R.drawable.ic_menu_call)
                    .setTitle(R.string.menu_call);
            if (!isRecipientsEditorVisible()) {
                // If we're not composing a new message, show the call icon in the actionbar
                item.setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
            }

            menu.add(0, MENU_CALL_RECIPIENT_BY_VT, 0, R.string.call_video_call)
                    .setIcon(R.drawable.ic_video_call)
                    .setTitle(R.string.call_video_call);
        }

        if (MmsConfig.getMmsEnabled()) {
            if (!isSubjectEditorVisible()) {
                menu.add(0, MENU_ADD_SUBJECT, 0, R.string.add_subject).setIcon(
                        R.drawable.ic_menu_edit);
            }
            menu.add(0, MENU_ADD_ATTACHMENT, 0, R.string.add_attachment)
                .setIcon(R.drawable.ic_menu_attachment)
                .setTitle(R.string.add_attachment)
                .setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);    // add to actionbar
        }

        if (isPreparedForSending()) {
            menu.add(0, MENU_SEND, 0, R.string.send).setIcon(android.R.drawable.ic_menu_send);
        }

        if (mMsgListAdapter.getCount() > 0) {
            //MTK_OP01_PROTECT_START
            if (!MmsConfig.getMmsDirMode()) {
            //MTK_OP01_PROTECT_END
            // Removed search as part of b/1205708
            //menu.add(0, MENU_SEARCH, 0, R.string.menu_search).setIcon(
            //        R.drawable.ic_menu_search);
            Cursor cursor = mMsgListAdapter.getCursor();
            if ((null != cursor) && (cursor.getCount() > 0)) {
                menu.add(0, MENU_DELETE_THREAD, 0, R.string.menu_delete_messages).setIcon(
                    android.R.drawable.ic_menu_delete);
            }
            //MTK_OP01_PROTECT_START
            }
            //MTK_OP01_PROTECT_END
        } else {
            menu.add(0, MENU_DISCARD, 0, R.string.discard).setIcon(android.R.drawable.ic_menu_delete);
        }
        if (!mWorkingMessage.hasSlideshow() || (mSubjectTextEditor != null && mSubjectTextEditor.isFocused())) {
            menu.add(0, MENU_ADD_QUICK_TEXT, 0, R.string.menu_insert_quick_text).setIcon(
                R.drawable.ic_menu_quick_text);
        }
//a0
        if (!mWorkingMessage.hasSlideshow() || (mSubjectTextEditor != null && mSubjectTextEditor.isFocused())) {
            menu.add(0, MENU_INSERT_SMILEY, 0, R.string.menu_insert_smiley).setIcon(
                R.drawable.ic_menu_emoticons);
        }

        if (!mWorkingMessage.hasSlideshow()){
            menu.add(0, MENU_ADD_TEXT_VCARD, 0, R.string.menu_insert_text_vcard).setIcon(
                    R.drawable.ic_menu_text_vcard);
        }
//a1

        buildAddAddressToContactMenuItem(menu);

        menu.add(0, MENU_PREFERENCES, 0, R.string.menu_preferences).setIcon(
                android.R.drawable.ic_menu_preferences);

        if (LogTag.DEBUG_DUMP) {
            menu.add(0, MENU_DEBUG_DUMP, 0, R.string.menu_debug_dump);
        }*/

       // return super.onPrepareOptionsMenu(menu);
    //}

    private void buildAddAddressToContactMenuItem(Menu menu) {
        // Look for the first recipient we don't have a contact for and create a menu item to
        // add the number to contacts.
        for (Contact c : getRecipients()) {
            if (!c.existsInDatabase() && MessageUtils.canAddToContacts(c)) {
                Intent intent = ConversationList.createAddContactIntent(c.getNumber());
               /* menu.add(0, MENU_ADD_ADDRESS_TO_CONTACTS, 0, R.string.menu_add_to_contacts)
                    .setIcon(android.R.drawable.ic_menu_add)
                    .setIntent(intent);*/
                break;
            }
        }
    }

    //@Override
   // public boolean onOptionsItemSelected(MenuItem item) {
        /*switch (item.getItemId()) {
            case MENU_ADD_SUBJECT:
                showSubjectEditor(true);
                mWorkingMessage.setSubject("", true);
//a0
                ((InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE)).showSoftInput(
                    getCurrentFocus(), InputMethodManager.SHOW_IMPLICIT);
//a1
                mSubjectTextEditor.requestFocus();
                break;
            case MENU_ADD_ATTACHMENT:
                // Launch the add-attachment list dialog
//a0
                hideInputMethod();
//a1
                showAddAttachmentDialog(!mWorkingMessage.hasAttachedFiles());
                break;
//a0
            case MENU_ADD_QUICK_TEXT:
                showQuickTextDialog();
                break;

            case MENU_ADD_TEXT_VCARD: {
                //gionee gaoj 2012-4-10 added for CR00555790 start
                if (MmsApp.mGnMessageSupport) {
                    //gionee gaoj 2012-5-18 modified for CR00601632 start
                    Intent intent = new Intent(ComposeMessageActivity.this,
                            AddReceiptorTab.class);
                    //gionee gaoj 2012-5-18 modified for CR00601632 end
                    intent.setType(Phone.CONTENT_ITEM_TYPE);

                    if (isRecipientsEditorVisible()) {
                        intent.putExtra("useoldcache", true);
                    }
                    startActivityForResult(intent, REQUEST_CODE_TEXT_VCARD);
                    break;
                }
                //gionee gaoj 2012-4-10 added for CR00555790 end
                Intent intent = new Intent("android.intent.action.contacts.list.PICKMULTICONTACTS");
                intent.setType(Contacts.CONTENT_TYPE);
                startActivityForResult(intent, REQUEST_CODE_TEXT_VCARD);
                break;
            }
//a1
            case MENU_DISCARD:
                mWorkingMessage.discard();
                finish();
                break;
            case MENU_SEND:
                if (isPreparedForSending()) {
                    updateSendButtonState(false);
                    checkRecipientsCount();
                    mSendButtonCanResponse = true;
                }
                break;
            case MENU_SEARCH:
                onSearchRequested();
                break;
            case MENU_DELETE_THREAD:
                //gionee gaoj 2012-4-10 added for CR00555790 start
                if (MmsApp.mGnMessageSupport) {
                    mMsgListAdapter.mIsDeleteMode = true;
                    hideInputMethod();
                    drawTopPanel(false);
                    drawBottomPanel();
                    startMsgListQuery();
                    break;
                }
                //gionee gaoj 2012-4-10 added for CR00555790 end
                //m0
                //confirmDeleteThread(mConversation.getThreadId());
                
                // add for multi-delete
//                mMsgListAdapter.mIsDeleteMode = true;
//                hideInputMethod();
//                mMsgListView.setChoiceMode(AuroraListView.CHOICE_MODE_MULTIPLE_MODAL);
//                mDeleteActionMode = startActionMode(new DeleteCallback());
//                drawTopPanel(false);
//                drawBottomPanel();
//                startMsgListQuery();
                Intent mIntent = new Intent(this, MultiDeleteActivity.class);
                mIntent.putExtra("thread_id", mConversation.getThreadId());
                startActivityForResult(mIntent, REQUEST_CODE_FOR_MULTIDELETE);
                //m1
                break;

            case android.R.id.home:
            case MENU_CONVERSATION_LIST:
                exitComposeMessageActivity(new Runnable() {
                    public void run() {
                        goToConversationList();
                    }
                });
                break;
            case MENU_CALL_RECIPIENT: {
                dialRecipient(false);
                break;
            }
            case MENU_CALL_RECIPIENT_BY_VT: {
                dialRecipient(true);
                break;
            }
            case MENU_INSERT_SMILEY:
                showSmileyDialog();
                break;
            case MENU_VIEW_CONTACT: {
                // View the contact for the first (and only) recipient.
                ContactList list = getRecipients();
                if (list.size() == 1 && list.get(0).existsInDatabase()) {
                    Uri contactUri = list.get(0).getUri();
                    Intent intent = new Intent(Intent.ACTION_VIEW, contactUri);
                    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);
                    startActivity(intent);
                }
                break;
            }
            case MENU_ADD_ADDRESS_TO_CONTACTS:
                mAddContactIntent = item.getIntent();
                startActivityForResult(mAddContactIntent, REQUEST_CODE_ADD_CONTACT);
                break;
            case MENU_PREFERENCES: {
                Intent intent = new Intent(this, MessagingPreferenceActivity.class);
                startActivityIfNeeded(intent, -1);
                break;
            }
            case MENU_DEBUG_DUMP:
                mWorkingMessage.dump();
                Conversation.dump();
                LogTag.dumpInternalTables(this);
                break;
            // gionee zhouyj 2012-04-21 add for CR00573852 start
            case MENU_ENCRYPTION:
                if (Conversation.getFirstEncryption() == true) {
                    inputencryption();
                } else {
                    //Gionee <guoyx> <2013-07-03> modify for CR00829344 begin
                    //Gionee <gaoj> <2013-05-28> add for CR00817770 begin
                    if (MmsApp.mGnHideEncryption 
                         && MmsApp.mGnSmartGuide 
                         && !ConvFragment.ReadPopTag(this, ConvFragment.FIRSTENCRYPTION)) {
                        ConvFragment.WritePopTag(this, ConvFragment.FIRSTENCRYPTION);
                    }
                    //Gionee <gaoj> <2013-05-28> add for CR00817770 end
                    //Gionee <guoyx> <2013-07-03> modify for CR00829344 end
                    updateEncryption();
                }
                break;
            // gionee zhouyj 2012-04-21 add for CR00573852 end
                //gionee gaoj 2012-5-24 added for CR00588933 start
            case MENU_EDIT:
                mMsgListLongClick = true;
                mMsgListAdapter.mIsDeleteMode = true;
                hideInputMethod();
                drawTopPanel(false);
                drawBottomPanel();
                startMsgListQuery();
                
                // gionee lwzh modify for CR00774362 20130227 begin
                if (mGnmultiSelectStub == null) {
                    initMultiSelect();
                }
                // gionee lwzh modify for CR00774362 20130227 end
                mGnmultiSelectStub.setVisibility(View.VISIBLE);
                // gionee zhouyj 2012-05-31 add for CR00611377 start
                mDeleteImageButton.setEnabled(false);
                mDeleteImageButton.setImageResource(mMsgListAdapter.getSelectedNumber() >= 1 ? R.drawable.gn_com_delete_bg : R.drawable.gn_com_delete_unuse_bg);
                setMulImageButton(false);
                // gionee zhouyj 2012-05-31 add for CR00611377 end
                break;
                //gionee gaoj 2012-5-24 added for CR00588933 end
            //gionee gaoj 2012-8-7 added for CR00671408 start
            case MENU_BLACKLIST:
                gnAddBlackList();
                break;
            //gionee gaoj 2012-8-7 added for CR00671408 end
                //gionee gaoj added for CR00725602 20121201 start
            case MENU_BATCH_OPERATION:
                setBatchOperation();
                break;
                //gionee gaoj added for CR00725602 20121201 end
                
                //gionee <gaoj> <2013-06-09> add for CR00824605 begin
            case MENU_NEW_CONTACT:
                {
                    Contact contact = mConversation.getRecipients().get(0);
                    Intent intent = new Intent(Intent.ACTION_INSERT,Contacts.CONTENT_URI);
                    intent.setComponent(new ComponentName("com.android.contacts",
                        "com.android.contacts.activities.ContactEditorActivity"));
                    if (Mms.isEmailAddress(contact.getNumber())) {
                        intent.putExtra(Insert.EMAIL, contact.getNumber());
                    } else {
                        intent.putExtra(Insert.PHONE, contact.getNumber());
                    }
                    startActivity(intent);
                }
                break;
            case MENU_ADD_CONTACT:
                {
                    Contact contact = mConversation.getRecipients().get(0);
                    Intent newintent = new Intent(Intent.ACTION_INSERT_OR_EDIT);
                    newintent.setComponent(new ComponentName("com.android.contacts",
                        "com.android.contacts.activities.ContactSelectionActivity"));
                    if (Mms.isEmailAddress(contact.getNumber())) {
                        newintent.putExtra(Insert.EMAIL, contact.getNumber());
                    } else {
                        newintent.putExtra(Insert.PHONE, contact.getNumber());
                    }
                    newintent.setType(People.CONTENT_ITEM_TYPE);
                    startActivity(newintent);
                }
                break;
                //gionee <gaoj> <2013-06-09> add for CR00824605 end
                */

        /*MessageItem msgItem = null;
        if (mMsgListAdapter.getSelectedNumber() == 1) {
            msgItem = getOnlyItem();
            if (null == msgItem)
                return false;
        }
        switch (item.getItemId()) {
            case R.id.gn_menu_batch_delete:
                deleteMsg();
                break;

            case R.id.gn_menu_batch_copy:
                copyMsg();
                break;

            case R.id.gn_menu_batch_forward:
                forwardMsg();
                break;

            case R.id.gn_menu_batch_star:
                starMsg();
                break;

            case R.id.gn_menu_batch_edit:
                editMessageItem(msgItem);
                drawBottomPanel();
                break;

            case R.id.gn_menu_batch_slidshow:
                if (mClickCanResponse) {
                    mClickCanResponse = false;
                    MessageUtils.viewMmsMessageAttachment(ComposeMessageActivity.this,
                            ContentUris.withAppendedId(Mms.CONTENT_URI, msgItem.mMsgId), null);
                }
                break;

            case R.id.gn_menu_batch_copy_sim:
                mSaveMsgThread = new SaveMsgThread(msgItem.mType, msgItem.mMsgId);
                mSaveMsgThread.start();
                break;

            case R.id.gn_menu_batch_copy_sdcard:
                copysdcardMsg(msgItem);
                break;

            case R.id.gn_menu_batch_details:
                detailsMsg(msgItem);
                break;

            default:
                break;
            }
        onFinishMultiChoose();*/
       // return super.onOptionsItemSelected(item);
    //}

    private void confirmDeleteThread(long threadId) {
        Conversation.startQueryHaveLockedMessages(mBackgroundQueryHandler,
                threadId, ConversationList.HAVE_LOCKED_MESSAGES_TOKEN);
    }

//    static class SystemProperties { // TODO, temp class to get unbundling working
//        static int getInt(String s, int value) {
//            return value;       // just return the default value or now
//        }
//    }

    private void addAttachment(int type, boolean append) {
        // Calculate the size of the current slide if we're doing a replace so the
        // slide size can optionally be used in computing how much room is left for an attachment.
        int currentSlideSize = 0;
        SlideshowModel slideShow = mWorkingMessage.getSlideshow();

        if (append) {
            mAppendAttachmentSign = true;
        }

        if (slideShow != null) {
            SlideModel slide = slideShow.get(0);
            currentSlideSize = slide == null ? 0 : slide.getSlideSize();
        }
        
        switch (type) {
            case AttachmentTypeSelectorAdapter.ADD_IMAGE:
                MessageUtils.selectImage(this, REQUEST_CODE_ATTACH_IMAGE);
                break;

            case AttachmentTypeSelectorAdapter.TAKE_PICTURE: {
                Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                //MTK_OP01_PROTECT_START
                if (MmsApp.isTelecomOperator()) {
                    intent.putExtra(MmsApp.OPERATOR_TELECOM, true);
                } else {
                //MTK_OP01_PROTECT_END
                    //gionee gaoj 2012-4-10 added for CR00555790 start
                    if (MmsApp.mGnMessageSupport) {
                        intent.putExtra(MediaStore.EXTRA_OUTPUT, Mms.ScrapSpace.CONTENT_URI);
                    } else {
                        //gionee gaoj 2012-4-10 added for CR00555790 end
                    intent.putExtra(MediaStore.EXTRA_OUTPUT, TempFileProvider.SCRAP_CONTENT_URI);
                    //gionee gaoj 2012-4-10 added for CR00555790 start
                    }
                    //gionee gaoj 2012-4-10 added for CR00555790 end
                //MTK_OP01_PROTECT_START
                }
                //MTK_OP01_PROTECT_END
                startActivityForResult(intent, REQUEST_CODE_TAKE_PICTURE);
                break;
            }

            case AttachmentTypeSelectorAdapter.ADD_VIDEO:
                MessageUtils.selectVideo(this, REQUEST_CODE_ATTACH_VIDEO);
                break;

            case AttachmentTypeSelectorAdapter.RECORD_VIDEO: {
                long sizeLimit = 0;
                if(mAppendAttachmentSign){
                    sizeLimit = computeAttachmentSizeLimitForAppen(slideShow);
                }
                else {
                    sizeLimit = computeAttachmentSizeLimit(slideShow, currentSlideSize);
                }
                if (sizeLimit > MIN_SIZE_FOR_CAPTURE_VIDEO) {
                    MessageUtils.recordVideo(this, REQUEST_CODE_TAKE_VIDEO, sizeLimit);
                } else {
                    Toast.makeText(this,
                            getString(R.string.space_not_enough),
                            Toast.LENGTH_SHORT).show();
                }
            }
            break;

            case AttachmentTypeSelectorAdapter.ADD_SOUND:
//m0
//                MessageUtils.selectAudio(this, REQUEST_CODE_ATTACH_SOUND);
                AuroraAlertDialog.Builder alertBuilder = new AuroraAlertDialog.Builder(this);
                alertBuilder.setTitle(getString(R.string.add_music));
                String[] items = new String[2];
                items[0] = getString(R.string.attach_ringtone);
                items[1] = getString(R.string.attach_sound);
                alertBuilder.setItems(items, new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        switch (which) {
                            case 0:
                                MessageUtils.selectRingtone(ComposeMessageActivity.this, REQUEST_CODE_ATTACH_RINGTONE);
                                break;
                            case 1:
                                if (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
                                    Toast.makeText(ComposeMessageActivity.this, getString(R.string.Insert_sdcard), Toast.LENGTH_LONG).show();
                                    return;
                                }
                                MessageUtils.selectAudio(ComposeMessageActivity.this, REQUEST_CODE_ATTACH_SOUND);
                                break;
                        }
                    }
                });
                alertBuilder.create().show();
//m1
                break;

            case AttachmentTypeSelectorAdapter.RECORD_SOUND:
                long sizeLimit = 0;
                if(mAppendAttachmentSign){
                    sizeLimit = computeAttachmentSizeLimitForAppen(slideShow);
                }
                else {
                    sizeLimit = computeAttachmentSizeLimit(slideShow, currentSlideSize);
                }
                MessageUtils.recordSound(this, REQUEST_CODE_RECORD_SOUND, sizeLimit);
                break;

            case AttachmentTypeSelectorAdapter.ADD_SLIDESHOW:
                editSlideshow();
                break;
                
            case AttachmentTypeSelectorAdapter.ADD_VCARD:
             // gionee zhouyj 2012-05-14 add for CR00597021 start
                if(MmsApp.mGnMessageSupport) {
                    mWorkingMessage.removeAttachment(true);
                    //gionee gaoj 2012-5-18 modified for CR00601632 start
                    Intent intent = new Intent(ComposeMessageActivity.this,
                            AddReceiptorTab.class);
                    //gionee gaoj 2012-5-18 modified for CR00601632 end
                    intent.setType(Phone.CONTENT_ITEM_TYPE);
    
                    if (isRecipientsEditorVisible()) {
                        intent.putExtra("useoldcache", true);
                    }
                    startActivityForResult(intent, REQUEST_CODE_TEXT_VCARD);
                } else {
                // gionee zhouyj 2012-05-14 add for CR00597021 end
                Intent intent = new Intent("android.intent.action.contacts.list.PICKMULTICONTACTS");
                intent.setType(Contacts.CONTENT_TYPE);
                startActivityForResult(intent, REQUEST_CODE_ATTACH_VCARD);
                // gionee zhouyj 2012-05-12 add for CR00597021 start
                }
                // gionee zhouyj 2012-05-12 add for CR00597021 end
                break;

            //gionee luoguangming 2012.08.29 modify for CR00682236 begin
            case AttachmentTypeSelectorAdapter.MENU_ADD_INSERT_GPS:
                //处理函数
                //GIONEE: wangfei 2012 09 24 add for CR00703647 begin
                gpsEnabled = Settings.Secure.isLocationProviderEnabled(
                                getContentResolver(), LocationManager.GPS_PROVIDER);
    
                if(gpsEnabled){
                    gnInsertGPS();
                }else{
                    new AuroraAlertDialog.Builder(ComposeMessageActivity.this)
                        .setTitle(getString(R.string.gn_mms_enable_gps))
                        .setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog,int whichButton){
                                gnInsertGPS();
                            }
                        })
                        .setNegativeButton(android.R.string.cancel, null)
                        .show();
                }
                //GIONEE: wangfei 2012 09 24 add for CR00703647 end
                break;
                //gionee luoguangming 2012.08.29 modify for CR00682236  end
                
            default:
                break;
        }
    }

    public static long computeAttachmentSizeLimit(SlideshowModel slideShow, int currentSlideSize) {
        // Computer attachment size limit. Subtract 1K for some text.
        long sizeLimit = MmsConfig.getUserSetMmsSizeLimit(true) - SlideshowModel.SLIDESHOW_SLOP;
        if (slideShow != null) {
            sizeLimit -= slideShow.getCurrentSlideshowSize();

            // We're about to ask the camera to capture some video (or the sound recorder
            // to record some audio) which will eventually replace the content on the current
            // slide. Since the current slide already has some content (which was subtracted
            // out just above) and that content is going to get replaced, we can add the size of the
            // current slide into the available space used to capture a video (or audio).
            sizeLimit += currentSlideSize;
        }
        return sizeLimit;
    }
    
    public static long computeAttachmentSizeLimitForAppen(SlideshowModel slideShow) {
        long sizeLimit = MmsConfig.getUserSetMmsSizeLimit(true) - SlideshowModel.SLIDESHOW_SLOP;
        if (slideShow != null) {
            sizeLimit -= slideShow.getCurrentSlideshowSize();
        }
        if (sizeLimit > 0) {
            return sizeLimit;
        }
        return 0;
    }

    private class SoloAlertDialog extends AuroraAlertDialog {
        private AuroraAlertDialog mAlertDialog;

        private SoloAlertDialog(Context context) {
            super(context);
        }

        private boolean needShow() {
            return mAlertDialog == null || !mAlertDialog.isShowing();
        }
        public void show(final boolean append) {
            if (!needShow()) {
                return;
            }

            AuroraAlertDialog.Builder builder = new AuroraAlertDialog.Builder(getContext());
            //Gionee <zhouyj> <2013-05-13> remove for CR00811090 begin
            //gionee gaoj 2012-6-26 added for CR00628201 start
            /*if (MmsApp.mDarkTheme) {
                builder.setIcon(R.drawable.gn_dark_ic_dialog_attach);
            } else {
                builder.setIcon(R.drawable.ic_dialog_attach);
            }*/
            //gionee gaoj 2012-6-26 added for CR00628201 end
            //Gionee <zhouyj> <2013-05-13> remove for CR00811090 end
            builder.setTitle(R.string.add_attachment);

            // if (mAttachmentTypeSelectorAdapter == null) {
            // add for vcard, if there is a real slideshow, hide vCard
            int mode = AttachmentTypeSelectorAdapter.MODE_WITH_SLIDESHOW;
            if (mWorkingMessage.hasSlideshow()) {
                mode |= AttachmentTypeSelectorAdapter.MODE_WITHOUT_VCARD;
            } else {
                mode |= AttachmentTypeSelectorAdapter.MODE_WITH_VCARD;
            }
            mAttachmentTypeSelectorAdapter = new AttachmentTypeSelectorAdapter(getContext(), mode);
            // }
            builder.setAdapter(mAttachmentTypeSelectorAdapter,
                    new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            addAttachment(mAttachmentTypeSelectorAdapter.buttonToCommand(which), append);
                            dialog.dismiss();
                        }
                    });
            mAlertDialog = builder.show();
        }
    }

    private void showAddAttachmentDialog(final boolean append) {
        mSoloAlertDialog.show(append);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (LogTag.VERBOSE) {
            log("requestCode=" + requestCode + ", resultCode=" + resultCode + ", data=" + data);
        }
        //Gionee guoyx 20121023 by CR00705464 for MTK ALPS00270539 BEGIN
        boolean needSaveDraft = true;// add this to avoid invoke multi times
        //Gionee guoyx 20121023 by CR00705464 for MTK ALPS00270539 END
        mWaitingForSubActivity = false;          // We're back!
        boolean mNeedAppendAttachment = false;
        if (mAppendAttachmentSign) {
            mNeedAppendAttachment = true;
            mAppendAttachmentSign = false;
        }
        if (mWorkingMessage.isFakeMmsForDraft()) {
            // We no longer have to fake the fact we're an Mms. At this point we are or we aren't,
            // based on attachments and other Mms attrs.
            mWorkingMessage.removeFakeMmsForDraft();
        }
        // gionee zhouyj 2012-07-13 add for CR00647101 start 
        if(MmsApp.mGnMessageSupport && REQUEST_CODE_CHOOSE_SDCARD == requestCode && resultCode == RESULT_OK) {
            if(resultCode == RESULT_OK && data != null && data.getAction().equals("ChooseSdcard")) {
                String uriString = data.getStringExtra("uri");
                if(uriString != null) {
                    Intent i = new Intent(ComposeMessageActivity.this, AttachmentPickerActivity.class);
                    i.putExtra("position", data.getIntExtra("position", 0));
                    i.setData(Uri.parse(uriString));
                    startActivityForResult(i, REQUEST_CODE_MULTI_SAVE);
                }
            }
            return ;
        }
        // gionee zhouyj 2012-07-13 add for CR00647101 end 
//a0        
        if (requestCode == REQUEST_CODE_FOR_MULTIDELETE && resultCode == RESULT_OK) {
            if (data.getBooleanExtra("delete_all", false)) {
                mWorkingMessage.discard();

                // Rebuild the contacts cache now that a thread and its associated unique
                // recipients have been deleted.
                Contact.init(ComposeMessageActivity.this);

                // Make sure the conversation cache reflects the threads in the DB.
                Conversation.init(ComposeMessageActivity.this);
                // Aurora xuyong 2014-07-14 added for aurora's new feature start
                if (operConvMap != null && operConvMap.size() > 0) {
                    deleteConvByIds(operConvMap);
                }
                // Aurora xuyong 2014-07-14 added for aurora's new feature end
                finish();
            }
            return;
        }
//a1
        //Gionee <zhouyj> <2013-05-17> add for CR00812110 begin
        if (REQUEST_CODE_UPDATE_CONTACT == requestCode) {
            if (mContactContainer != null && !TextUtils.isEmpty(mContactContainer.getCurrNewNumber())) {
                Contact contact = Contact.get(mContactContainer.getCurrNewNumber(), false);
                if (contact != null) {
                    contact.reload();
                    mContactContainer.updateAddContact(mContactContainer.getCurrNewNumber());
                }
            }
            return ;
        }
        //Gionee <zhouyj> <2013-05-17> add for CR00812110 end
        if (requestCode == REQUEST_CODE_PICK) {
            mWorkingMessage.asyncDeleteDraftSmsMessage(mConversation);
        }

        if (requestCode == REQUEST_CODE_ADD_CONTACT) {
            // The user might have added a new contact. When we tell contacts to add a contact
            // and tap "Done", we're not returned to Messaging. If we back out to return to
            // messaging after adding a contact, the resultCode is RESULT_CANCELED. Therefore,
            // assume a contact was added and get the contact and force our cached contact to
            // get reloaded with the new info (such as contact name). After the
            // contact is reloaded, the function onUpdate() in this file will get called
            // and it will update the title bar, etc.
            if (mAddContactIntent != null) {
                String address =
                    mAddContactIntent.getStringExtra(ContactsContract.Intents.Insert.EMAIL);
                if (address == null) {
                    address =
                        mAddContactIntent.getStringExtra(ContactsContract.Intents.Insert.PHONE);
                }
                if (address != null) {
                    Contact contact = Contact.get(address, false);
                    if (contact != null) {
                        contact.reload();
                    }
                }
            }
        }

        if (resultCode != RESULT_OK){
            if (LogTag.VERBOSE) log("bail due to resultCode=" + resultCode);
            return;
        }

        switch (requestCode) {
            case REQUEST_CODE_CREATE_SLIDESHOW:
                if (data != null) {
                    WorkingMessage newMessage = WorkingMessage.load(this, data.getData());
                    if (newMessage != null) {
                        // add for vcard, vcard is exclusive with other attaches, so remove them
                        if (newMessage.hasMediaAttachments()) {
                            newMessage.removeAllFileAttaches();
                        }
//a0
                        boolean isMmsBefore = mWorkingMessage.requiresMms();
                        newMessage.setSubject(mWorkingMessage.getSubject(), true);
//a1
                        mWorkingMessage = newMessage;
                        // gionee zhouyj 2012-07-06 add for CR00627370 start
                        if (!mWorkingMessage.requiresMms())
                            mWorkingMessage.removeAttachment(false);
                        // gionee zhouyj 2012-07-06 add for CR00627370 end
                        drawTopPanel(false);
                        updateSendButtonState();
                        invalidateOptionsMenu();

//a0
                        boolean isMmsAfter = mWorkingMessage.requiresMms();
                        if (isMmsAfter && !isMmsBefore) {
                            toastConvertInfo(true);
                        } else if (!isMmsAfter && isMmsBefore) {
                            toastConvertInfo(false);
                        }
//a1
                        //gionee gaoj 2012-5-30 added for CR00555790 start
                        if (MmsApp.mGnMessageSupport && isRecipientsEditorVisible()) {
                            mContactContainer.resetMode();
                            mContactContainer.requestFocus();
                        }
                        //gionee gaoj 2012-5-30 added for CR00555790 end
                    }
                }
                //gionee gaoj 2013-4-3 added for CR00788343 start
                needSaveDraft = false;
                //gionee gaoj 2013-4-3 added for CR00788343 end
                break;

            case REQUEST_CODE_TAKE_PICTURE: {
                // create a file based uri and pass to addImage(). We want to read the JPEG
                // data directly from file (using UriImage) instead of decoding it into a Bitmap,
                // which takes up too much memory and could easily lead to OOM.
                //MTK_OP01_PROTECT_START
                //Gionee <zhouyj> <2013-04-27> remove for CR00803184 start
                /*if (!MmsApp.isTelecomOperator()) {
                    Uri uri = data.getData();
                    addImageAsync(uri, data.getType(), mNeedAppendAttachment);
                } else */
                //Gionee <zhouyj> <2013-04-27> remove for CR00803184 end
                {
                    //gionee gaoj 2012-4-10 added for CR00555790 start
                    if (MmsApp.mGnMessageSupport) {
                        File file = new File(Mms.ScrapSpace.SCRAP_FILE_PATH);
                        File tempFile = new File("/sdcard/mms/scrapSpace/.nomedia");
                        if (!tempFile.exists()) {
                            try {
                                tempFile.createNewFile();
                            } catch (IOException e) {
                                Log.w(TAG, "compose.onActivityResult(): can't create new file '/sdcard/mms/scrapSpace/.nomedia'");
                            }
                        }
                        Uri uri = Uri.fromFile(file);
                        addImageAsync(uri,null, mNeedAppendAttachment);
//                        addImage(null,uri, false);
                    } else {
                        //gionee gaoj 2012-4-10 added for CR00555790 end
                    File file = new File(TempFileProvider.getScrapPath(this));
                    Uri uri = Uri.fromFile(file);
                    addImageAsync(uri,null, mNeedAppendAttachment);
                    //gionee gaoj 2012-4-10 added for CR00555790 start
                    }
                    //gionee gaoj 2012-4-10 added for CR00555790 end
                }
                //Gionee guoyx 20121023 by CR00705464 for MTK ALPS00270539 BEGIN
                needSaveDraft = false;
                //Gionee guoyx 20121023 by CR00705464 for MTK ALPS00270539 END
                break;
            }

            case REQUEST_CODE_ATTACH_IMAGE: {
                if (data != null) {
                    addImageAsync(data.getData(),data.getType(), mNeedAppendAttachment);
                }
                //Gionee guoyx 20121023 by CR00705464 for MTK ALPS00270539 BEGIN
                needSaveDraft = false;
                //Gionee guoyx 20121023 by CR00705464 for MTK ALPS00270539 END
                break;
            }

            case REQUEST_CODE_TAKE_VIDEO:
                Uri videoUri = TempFileProvider.renameScrapVideoFile(System.currentTimeMillis() + ".3gp", null, this);
                addVideoAsync(videoUri, mNeedAppendAttachment);      // can handle null videoUri
                //Gionee guoyx 20121023 by CR00705464 for MTK ALPS00270539 BEGIN
                needSaveDraft = false;
                //Gionee guoyx 20121023 by CR00705464 for MTK ALPS00270539 END
                break;

            case REQUEST_CODE_ATTACH_VIDEO:
                if (data != null) {
                    addVideoAsync(data.getData(), mNeedAppendAttachment);
                }
                //Gionee guoyx 20121023 by CR00705464 for MTK ALPS00270539 BEGIN
                needSaveDraft = false;
                //Gionee guoyx 20121023 by CR00705464 for MTK ALPS00270539 END
                break;

            case REQUEST_CODE_ATTACH_SOUND: {
//m0
/*
                Uri uri = (Uri) data.getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI);
                if (Settings.System.DEFAULT_RINGTONE_URI.equals(uri)) {
                    break;
                }
                addAudio(uri);
*/
                //Gionee <Gaoj> <2013-05-20> add for CR00809727 begin
                /*addAudio(data.getData(),mNeedAppendAttachment);*/
                addAudioAsync(data.getData(),mNeedAppendAttachment);
                //Gionee <Gaoj> <2013-05-20> add for CR00809727 end
//m1
                //gionee gaoj 2013-4-3 added for CR00788343 start
                needSaveDraft = false;
                //gionee gaoj 2013-4-3 added for CR00788343 end
                break;
            }

            case REQUEST_CODE_RECORD_SOUND:
                if (data != null) {
                    //Gionee <Gaoj> <2013-05-20> add for CR00809727 begin
                    /*addAudio(data.getData(),mNeedAppendAttachment);*/
                    addAudioAsync(data.getData(),mNeedAppendAttachment);
                    //Gionee <Gaoj> <2013-05-20> add for CR00809727 end
                }
                //gionee gaoj 2013-4-3 added for CR00788343 start
                needSaveDraft = false;
                //gionee gaoj 2013-4-3 added for CR00788343 end
                break;

//a0
            case REQUEST_CODE_ATTACH_RINGTONE:
                Uri uri = (Uri) data.getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI);
                if (Settings.System.DEFAULT_RINGTONE_URI.equals(uri)) {
                    break;
                }
                //gionee gaoj 2012-11-13 added for CR00729293 start
                if (MmsApp.mGnMessageSupport && null != uri) {
                    //Gionee <Gaoj> <2013-05-20> add for CR00809727 begin
                    /*addAudio(uri,mNeedAppendAttachment);*/
                    addAudioAsync(uri,mNeedAppendAttachment);
                    //Gionee <Gaoj> <2013-05-20> add for CR00809727 end
                }
                //gionee gaoj 2012-11-13 added for CR00729293 end
                //gionee gaoj 2013-4-3 added for CR00788343 start
                needSaveDraft = false;
                //gionee gaoj 2013-4-3 added for CR00788343 end
                break;
//a1

            case REQUEST_CODE_ECM_EXIT_DIALOG:
                boolean outOfEmergencyMode = data.getBooleanExtra(EXIT_ECM_RESULT, false);
                if (outOfEmergencyMode) {
                    sendMessage(false);
                }
                //gionee gaoj 2013-4-3 added for CR00788343 start
                needSaveDraft = false;
                //gionee gaoj 2013-4-3 added for CR00788343 end
                break;

            case REQUEST_CODE_PICK:
                if (data != null) {
                    processPickResult(data);
                }
                misPickContatct = false;
                return;

//a0
            case REQUEST_CODE_TEXT_VCARD:
                // Aurora xuyong 2013-11-16 added for bug#336 start
                mAddVilable = true;
                // Aurora xuyong 2013-11-16 added for bug#336 end
                if (data != null) {
                    //gionee gaoj 2012-4-10 added for CR00555790 start
                    if (MmsApp.mGnMessageSupport == true) {
                        gnAddTextVCard(data);
                        misPickContatct = false;
                        return;
                    }
                    //gionee gaoj 2012-4-10 added for CR00555790 end
                    long[] contactIds = data.getLongArrayExtra("com.mediatek.contacts.list.pickcontactsresult");
                    addTextVCard(contactIds);
                } else {
                    Log.e(TAG, "data should not be null," + "requestCode=" + requestCode
                            + ", resultCode=" + resultCode + ", data=" + data);
                }
                misPickContatct = false;
                return;
                
            case REQUEST_CODE_ATTACH_VCARD:
                // add for vcard
                asyncAttachVCardByContactsId(data);
                misPickContatct = false;
                isInitRecipientsEditor = false;
                return;
                
            case REQUEST_CODE_MULTI_SAVE:
                boolean succeeded = false;
                if (data != null && data.hasExtra("multi_save_result")) {
                    succeeded = data.getBooleanExtra("multi_save_result", false);
                    int resId = succeeded ? R.string.copy_to_sdcard_success : R.string.copy_to_sdcard_fail;
                    Toast.makeText(ComposeMessageActivity.this, resId, Toast.LENGTH_SHORT).show();
                }

                return;
//a1

                //gionee gaoj 2012-4-10 added for CR00555790 start
            case REQUEST_CODE_ADD_RECEIPTOR:
                // Aurora xuyong 2013-11-16 added for bug#336 start
                mAddVilable = true;
                // Aurora xuyong 2013-11-16 added for bug#336 end
                if(data != null){

                    final ArrayList<String> numbersArray = data.getStringArrayListExtra("ContactNumbers");
                    if (numbersArray == null || (numbersArray != null && numbersArray.size() == 0)) {
                        break;
                    }
                    // Aurora xuyong 2015-03-31 modified for new bug start
                    /*int size = mGnNumberList.size();
                    if (size > 0) {
                        int i = 0;
                        for (String num : mGnNumberList) {
                            // Aurora xuyong 2015-03-17 added for bug #12275 start
                            String[] details = num.split(String.valueOf('\1'));
                            num = details[0];
                            // Aurora xuyong 2015-03-17 added for bug #12275 end
                            if (i == size - 1) {
                                mContactContainer.removeContact(num, true);
                            } else {
                                mContactContainer.removeContact(num, false);
                            }
                            i++;
                        }
                    }*/
                    int size = numbersArray.size();
                    // Aurora xuyong 2015-03-31 modified for new bug end
                    for (int i = 0; i < size; i++) {
                        String strNameAndNumber = numbersArray.get(i);
                        String displayName = "";
                        String number = "";
                        // Aurora xuyong 2014-10-32 added for privacy feature start
                        String privacy = "0";
                        // Aurora xuyong 2014-10-32 added for privacy feature end
                        // Aurora xuyong 2015-03-11 modified for bug #12187 start
                        String strSplit[] = strNameAndNumber.split(String.valueOf('\1'));
                        // Aurora xuyong 2015-03-11 modified for bug #12187 end
                        if (strSplit.length == 0) {
                            continue;
                        }
                        else {
                        // Aurora xuyong 2014-10-23 modified for privacy feature start
//                            int k = 0;
//                            k = strNameAndNumber.lastIndexOf(":");
//                            if(k < 0){
//                                number = strNameAndNumber;
//                                displayName = strNameAndNumber;
//                            }
//                            else{
//                                number = strNameAndNumber.substring(k+1);
//                                displayName = strNameAndNumber.substring(0,k);
//                            }
                            displayName = strSplit[0];
                            number = strSplit[1];
                            if (strSplit.length >= 3) {
                                privacy = strSplit[2];
                            }
                        // Aurora xuyong 2014-10-23 modified for privacy feature end
                        }
                        // gionee zhouyuanjing 2012-05-09 add for CR00585770 start
                        number = number.replaceAll(" ", "");
                        // gionee zhouyuanjing 2012-05-09 add for CR00585770 end
                        if (mContactContainer.isDuplicateNumber(number)) {
                            continue;
                        }
                        if(i == size - 1) {
                            // Aurora xuyong 2014-10-23 modified for privacy feature start
                            mContactContainer.addNewContact(displayName, number, privacy, true);
                            // Aurora xuyong 2014-10-23 modified for privacy feature end
                        } else {
                             // Aurora xuyong 2014-10-23 modified for privacy feature start
                            mContactContainer.addNewContact(displayName, number, privacy, false);
                             // Aurora xuyong 2014-10-23 modified for privacy feature end
                        }
                    }
                mContactContainer.updateFreezeText();
                mContactContainer.updateContacts();
                // Aurora xuyong 2013-10-19 added for aurora's new feature start
                mTextEditor.requestFocus();
                // Aurora xuyong 2013-10-19 added for aurora's new feature end
                }
                return;
            case ConvFragment.UPDATE_PASSWORD_REQUEST:
                if (data != null && data.getAction().equals("succeed")) {
                    //Gionee <guoyx> <2013-07-03> modify for CR00829344 begin
                    //Gionee <gaoj> <2013-05-28> add for CR00817770 begin
                    if (MmsApp.mGnHideEncryption 
                         && MmsApp.mGnSmartGuide 
                         && !ConvFragment.ReadPopTag(this, ConvFragment.FIRSTENCRYPTION)) {
                        ConvFragment.WritePopTag(this, ConvFragment.FIRSTENCRYPTION);
                    }
                    //Gionee <gaoj> <2013-05-28> add for CR00817770 end
                    //Gionee <guoyx> <2013-07-03> modify for CR00829344 end
                    updateEncryption();
                }
                return;
            case ConvFragment.CONFIRM_PASSWORD_REQUEST:
                if (data != null
                        && (data.getAction().equals("cancel") || data.getAction().equals("back"))) {
                    // gionee zhouyj 2012-12-17 modify for CR00747016 start 
                    // Aurora yudingmin 2014-10-25 modify for bug #9343 start
                    final Context context = getApplicationContext();
                    exitComposeMessageActivity(new Runnable() {
                        public void run() {
                          // Aurora xuyong 2014-07-14 added for aurora's new feature start
                            if (operConvMap != null && operConvMap.size() > 0) {
                                deleteConvByIds(context, operConvMap);
                            }
                          // Aurora xuyong 2014-07-14 added for aurora's new feature end
                        }
                    // Aurora xuyong 2014-03-06 modified for bug #2819 start
                    }, true);
                    // Aurora xuyong 2014-03-06 modified for bug #2819 end
                    // Aurora yudingmin 2014-10-25 modify for bug #9343 end
                    // gionee zhouyj 2012-12-17 modify for CR00747016 end 
                }
                if (data != null && data.getAction().equals("confirm")) {
                    mConversation.markAsRead();
                }
                return;
                //gionee gaoj 2012-4-10 added for CR00555790 end
            //gionee zhouyj 2012-08-16 add for CR00678252 start 
            case REQUEST_CODE_LOCATION_POI:
                if(RESULT_OK == resultCode && null != data && "LOCATION".equals(data.getAction())) {
                    if(null != mLocation) {
                        // gionee zhouyj 2012-08-20 modify for CR00678380 start 
                        String addr = data.getStringExtra("poi");
                        String text = mTextEditor.getText().toString();
                        if("".equals(text) || text.equals(mLastAddress)) {
                            mLastAddress = addr;
                        } else {
                            addr = text + " " + addr;
                        }
                        mWorkingMessage.setText(addr);
                        mTextEditor.setText(addr);
                        // gionee zhouyj 2012-08-20 modify for CR00678380 end 
                        mLocation.onPause();
                    }
                }
                return ;
            //gionee zhouyj 2012-08-16 add for CR00678252 end 
                //gionee gaoj 2012-12-13 added for CR00745515 start
            case SIM_CHOOSE_TAG:
                //Gionee <zhouyj> <2013-05-11> add for CR00799550 begin
                needSaveDraft = false;
                //Gionee <zhouyj> <2013-05-11> add for CR00799550 end
                Intent it = mIntent;
                if (!isPreparedForSending() && it.getIntExtra(SELECT_TYPE, -1) != SIM_SELECT_FOR_SAVE_MSG_TO_SIM) {
                    return;
                }
                int position = -1;
                if (RESULT_OK == resultCode && null != data) {
                    if ("sim1".equals(data.getAction())) {
                        position = 0;
                    } else if ("sim2".equals(data.getAction())) {
                        position = 1;
                    } else if ("finish".equals(data.getAction())) {
                        if (mWorkingMessage.isDiscarded()) {
                            mWorkingMessage.unDiscard();
                        }
                        break;
                    }
                    updateSendButtonState(false);
                    if (Utils.hasLollipop()) {
                        //Aurora xuyong 2015-04-02 modified for android 5.1+ new feature start
                        mSelectedSimId = (int)mSubInfoList.get(position).getSubscriptionId();
                        //Aurora xuyong 2015-04-02 modified for android 5.1+ new feature end
                    } else {
                        mSelectedSimId = (int) mSimInfoList.get(position).mSimId;
                    }
                    
                    if (it.getIntExtra(SELECT_TYPE, -1) == SIM_SELECT_FOR_SEND_MSG) {
                        confirmSendMessageIfNeeded();
                    } else if (it.getIntExtra(SELECT_TYPE, -1) == SIM_SELECT_FOR_SAVE_MSG_TO_SIM) {
                        Message msg = mSaveMsgHandler.obtainMessage(MSG_SAVE_MESSAGE_TO_SIM_AFTER_SELECT_SIM);
                        msg.obj = it;
                        mSaveMsgHandler.sendMessage(msg);
                        updateSendButtonState();
                    }
                    if (it.getIntExtra(SELECT_TYPE, -1) == RESEND_MSG_SELECTED_SIMID && MmsApp.mGnMessageSupport) {
                        MessageItem msgItem = getMessageItem(it.getStringExtra("type"), it.getLongExtra("msgId", -1), false);
                        if (null != msgItem) {
                            msgItem.mSimId = mSelectedSimId;
                            reSendMsg(msgItem);
                        }
                    }
                }
                break;
                //gionee gaoj 2012-12-13 added for CR00745515 end
                //Gionee <zhouyj> <2013-05-09> add for CR00810588 begin
            case REQUEST_CODE_VOICE_HELPER:
                //Gionee <zhouyj> <2013-05-11> add for CR00799550 begin
                needSaveDraft = false;
                //Gionee <zhouyj> <2013-05-11> add for CR00799550 end
                if (mIsForVoiceHelper && data != null) {
                    List<String> results = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);
                    if(results != null){
                        String res = results.get(0);
                        Log.i(TAG, "onActivityResult   REQUEST_CODE_VOICE_HELPER   res = " + res);
                        try {
                            JSONObject jsonObject = new JSONObject(res);
                            String contact = "";
                            String content = "";
                            if (jsonObject.has("contact")) {
                                contact = jsonObject.getString("contact");
                            }
                            if (jsonObject.has("content")) {
                                content = jsonObject.getString("content");
                            }
                            Log.i(TAG, "onActivityResult   REQUEST_CODE_VOICE_HELPER   contact = " + contact
                                    + "   content = " + content);
                            if (!TextUtils.isEmpty(contact)) {
                                mContactContainer.setEditTextName(contact);
                                mContactContainer.updateContacts();
                            }
                            if (!TextUtils.isEmpty(content)) {
                                if (mWorkingMessage != null) {
                                    //Gionee <zhouyj> <2013-06-13> modify for CR00825941 begin
                                    if (mSignatureEnable) {
                                        // when mSignatureContent == null, mSignatureEnable = false ;
                                        if (!content.trim().endsWith(mSignatureContent.trim())) {
                                            content += mSignatureContent;
                                        }
                                    }
                                    mWorkingMessage.setText(content);
                                    //Gionee <zhouyj> <2013-06-13> modify for CR00825941 end
                                }
                                if (mTextEditor != null) {
                                    mTextEditor.setText(mWorkingMessage.getText());
                                    mTextEditor.setSelection(mTextEditor.getText().length());
                                }
                            }
                        } catch (Exception e) {
                            Log.e(TAG, "e = " + e.toString());
                        }
                    }
                }
                break;
                //Gionee <zhouyj> <2013-05-09> add for CR00810588 begin
            default:
                if (LogTag.VERBOSE) log("bail due to unknown requestCode=" + requestCode);
                break;
        }
//a0
        //gionee gaoj 2012-4-10 added for CR00555790 start
        if (!mWorkingMessage.requiresMms()) {
            return;
        }
        //gionee gaoj 2012-4-10 added for CR00555790 end
        isInitRecipientsEditor = false;
        // 181 add for 121871
        //Gionee guoyx 20121023 by CR00705464 for MTK ALPS00270539 BEGIN
        if (needSaveDraft) { 
            mWorkingMessage.saveDraft(false);        
        }
        //Gionee guoyx 20121023 by CR00705464 for MTK ALPS00270539 END
//a1
    }

    private void processPickResult(final Intent data) {
        // The EXTRA_PHONE_URIS stores the phone's urls that were selected by user in the
        // multiple phone picker.
        //m0
        /*final Parcelable[] uris =
            data.getParcelableArrayExtra(Intents.EXTRA_PHONE_URIS);

        final int recipientCount = uris != null ? uris.length : 0;*/
        
        final long[] contactsId = data.getLongArrayExtra("com.mediatek.contacts.list.pickdataresult");
        if (contactsId == null || contactsId.length <= 0) {
            return;
        }
        //gionee gaoj 2012-4-10 added for CR00555790 start
        int tempRecipientCount = 0;
        if (MmsApp.mGnMessageSupport) {
            tempRecipientCount = mContactContainer.getRecipientCount() + contactsId.length;
        } else {
            tempRecipientCount = mRecipientsEditor.getRecipientCount() + contactsId.length;
        }
        final int recipientCount = tempRecipientCount;
        //gionee gaoj 2012-4-10 added for CR00555790 end
        //m1

        final int recipientLimit = MmsConfig.getSmsRecipientLimit();
        if (recipientLimit != Integer.MAX_VALUE && recipientCount > recipientLimit) {
            new AuroraAlertDialog.Builder(this)
                    .setTitle(R.string.pick_too_many_recipients)
                    .setMessage(getString(R.string.too_many_recipients, recipientCount, recipientLimit))
                    .setPositiveButton(android.R.string.ok, null)
                    .create().show();
            return;
        }

        final Handler handler = new Handler();
        final AuroraProgressDialog progressDialog = new AuroraProgressDialog(this);
        progressDialog.setMessage(getText(R.string.adding_recipients));
        progressDialog.setIndeterminate(true);
        progressDialog.setCancelable(false);

        final Runnable showProgress = new Runnable() {
            public void run() {
                progressDialog.show();
            }
        };
        // Only show the progress dialog if we can not finish off parsing the return data in 1s,
        // otherwise the dialog could flicker.
        handler.postDelayed(showProgress, 1000);

        new Thread(new Runnable() {
            public void run() {
                final ContactList list;
                 try {
                    //m0
                    //list = ContactList.blockingGetByUris(uris);
                     ContactList selected = ContactList.blockingGetByIds(contactsId);
                     //gionee gaoj 2012-4-10 added for CR00555790 start
                     List<String> numList = null;
                     if (MmsApp.mGnMessageSupport) {
                         numList = mContactContainer.getNumbers();
                     } else {
                         numList = mRecipientsEditor.getNumbers();
                     }
                    final List<String> numbers = numList;
                    //gionee gaoj 2012-4-10 added for CR00555790 end
                    /*
                    for (Contact c : selected) {
                        // Must remove duplicated number
                        if (!numbers.contains(c.getNumber())) {
                            list.add(c);
                        }
                    }
                    */
                    /* better merge strategy.
                     * Avoid the use of mRecipientsEditor.contrcutionContactsFromInput()
                     * all Contacts in selected list should be added.
                     * */
                    if (numbers.size() > 0) {
                        List<String> selectedNumbers = Arrays.asList(selected.getNumbers());
                        numbers.removeAll(selectedNumbers);
                    
                        for (String number : numbers) {
                            Contact c = Contact.get(number, false);
                            selected.add(c);
                        }
                    }
                    
                    list = selected;
                    //m1
                } finally {
                    handler.removeCallbacks(showProgress);
                    progressDialog.dismiss();
                }
                // TODO: there is already code to update the contact header widget and recipients
                // editor if the contacts change. we can re-use that code.
                final Runnable populateWorker = new Runnable() {
                    public void run() {
                        mConversation.setRecipients(list);
                        //gionee gaoj 2012-4-10 added for CR00555790 start
                        if (!MmsApp.mGnMessageSupport) {
                            //gionee gaoj 2012-4-10 added for CR00555790 end
                        mRecipientsEditor.populate(list);
                        //gionee gaoj 2012-4-10 added for CR00555790 start
                        }
                        //gionee gaoj 2012-4-10 added for CR00555790 end
                        updateTitle(list);
                    }
                };
                handler.post(populateWorker);
            }
        }).start();
    }

    private void waitForCompressing() {
        synchronized (ComposeMessageActivity.this) {
            while (mCompressingImage) {
                try {
                    wait();
                } catch (InterruptedException e) {
                    Log.e(TAG, "intterrupted exception e ", e);
                }
            }
        }
    }

    private void notifyCompressingDone() {
        synchronized (ComposeMessageActivity.this) {
            mCompressingImage = false;
            notify();
        }
    }

    private final ResizeImageResultCallback mResizeImageCallback = new ResizeImageResultCallback() {
        // TODO: make this produce a Uri, that's what we want anyway
        public void onResizeResult(PduPart part, boolean append) {
            if (part == null) {
                notifyCompressingDone();
                handleAddAttachmentError(WorkingMessage.UNKNOWN_ERROR, R.string.type_picture);
                return;
            }

//a0
            mWorkingMessage.setmResizeImage(true);
//a1
            //Gionee <guoyx> <2013-07-03> modify for CR00829344 begin
//            Context context = ComposeMessageActivity.this;
            PduPersister persister = PduPersister.getPduPersister(sCompose.get());
            //Gionee <guoyx> <2013-07-03> modify for CR00829344 end
            int result;
//a0
            if(mWorkingMessage.isDiscarded()){
                notifyCompressingDone();
                return;
            }
//a1
            Uri messageUri = mWorkingMessage.getMessageUri();   
            if (null == messageUri) {
                try {
                    messageUri = mWorkingMessage.saveAsMms(true);
                } catch (IllegalStateException e) {
                    notifyCompressingDone();
                    Log.e(TAG, e.getMessage() + ", go to ConversationList!");
                    goToConversationList();
                }
            }


//            Uri messageUri = mWorkingMessage.saveAsMms(true);
            if (messageUri == null) {
                result = WorkingMessage.UNKNOWN_ERROR;
            } else {
                try {
                    Uri dataUri = persister.persistPart(part, ContentUris.parseId(messageUri));
                    int mode = mWorkingMessage.sCreationMode; 
                    mWorkingMessage.sCreationMode = 0;
                    result = mWorkingMessage.setAttachment(WorkingMessage.IMAGE, dataUri, append);
                    mWorkingMessage.sCreationMode = mode;
                    if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
                        log("ResizeImageResultCallback: dataUri=" + dataUri);
                    }
                } catch (MmsException e) {
                    result = WorkingMessage.UNKNOWN_ERROR;
                }
            }

            handleAddAttachmentError(result, R.string.type_picture);
            if(result == WorkingMessage.OK){
                try {
                    mWorkingMessage.saveAsMms(false);
                } catch (IllegalStateException e) {
                    Log.e(TAG, e.getMessage() + ", go to ConversationList!");
                    notifyCompressingDone();
                    goToConversationList();
                } 
            }
            notifyCompressingDone();
        }
    };

    private void handleAddAttachmentError(final int error, final int mediaTypeStringId) {
        // gionee lwzh add for CR00633086 20120702 begin
        //gionee gaoj 2012-4-10 added for CR00555790 start
        if (MmsApp.mGnMessageSupport) {
            gnHandleAddAttachmentError(error,  mediaTypeStringId);
            return;
        }
        //gionee gaoj 2012-4-10 added for CR00555790 end
        // gionee lwzh add for CR00633086 20120702 end
        
        if (error == WorkingMessage.OK) {
            return;
        }

        runOnUiThread(new Runnable() {
            public void run() {
                Resources res = getResources();
                String mediaType = res.getString(mediaTypeStringId);
                String title, message;
                
                Log.d(TAG, "Error Code:" + error);
                switch(error) {
                case WorkingMessage.WARNING_TYPE:
                case WorkingMessage.UNKNOWN_ERROR:
                    message = res.getString(R.string.error_add_attachment, mediaType);
                    Toast.makeText(ComposeMessageActivity.this, message, Toast.LENGTH_SHORT).show();
                    return;
                case WorkingMessage.UNSUPPORTED_TYPE:
//a0
                case WorkingMessage.RESTRICTED_TYPE:
//a1
                    title = res.getString(R.string.unsupported_media_format, mediaType);
                    message = res.getString(R.string.select_different_media, mediaType);
                    break;
                case WorkingMessage.MESSAGE_SIZE_EXCEEDED:
                    title = res.getString(R.string.exceed_message_size_limitation, mediaType);
                    message = res.getString(R.string.failed_to_add_media, mediaType);
                    break;
                case WorkingMessage.IMAGE_TOO_LARGE:
                    title = res.getString(R.string.failed_to_resize_image);
                    message = res.getString(R.string.resize_image_error_information);
                    break;
//a0
                case WorkingMessage.RESTRICTED_RESOLUTION:
                    title = res.getString(R.string.select_different_media_type);
                    message = res.getString(R.string.image_resolution_too_large);
                    break;
//a1
                default:
                    throw new IllegalArgumentException("unknown error " + error);
                }

                MessageUtils.showErrorDialog(ComposeMessageActivity.this, title, message);
            }
        });
    }
    // Aurora xuyong 2014-07-26 modified for bug #6844 start
    private synchronized void addImageAsync(final Uri uri, final String mimeType, final boolean append) {
    // Aurora xuyong 2014-07-26 modified for bug #6844 end
        mCompressingImage = true;
        runAsyncWithDialog(new Runnable() {
            public void run() {
                addImage(mimeType,uri, append);
                if (!MmsApp.mGnMessageSupport) {
                mWorkingMessage.saveAsMms(false);
                }
            }
        }, R.string.adding_attachments_title);
    }

    private void addImage(String mimeType,Uri uri, boolean append) {
        if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
            log("addImage: append=" + append + ", uri=" + uri);
        }

        int result = mWorkingMessage.setAttachment(WorkingMessage.IMAGE, uri, append,mimeType);

        if (result == WorkingMessage.IMAGE_TOO_LARGE ||
            result == WorkingMessage.MESSAGE_SIZE_EXCEEDED) {
            if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
                log("addImage: resize image " + uri);
            }
//m0
//            MessageUtils.resizeImageAsync(this,
//                   uri, mAttachmentEditorHandler, mResizeImageCallback, append);
            
            // Adjust whether its a DRM IMAGE
            if (FeatureOption.MTK_DRM_APP) {
                if (!MessageUtils.checkUriContainsDrm(this, uri)) {
                    mToastCountForResizeImage++;
                    if (mToastCountForResizeImage == 1) {
                        MessageUtils.resizeImage(this, uri, mAttachmentEditorHandler, mResizeImageCallback, append,
                            true);
                    } else {
                        MessageUtils.resizeImage(this, uri, mAttachmentEditorHandler, mResizeImageCallback, append,
                            false);
                    }
                } else {
                    notifyCompressingDone();
                    handleAddAttachmentError(result, R.string.type_picture);
                }
            } else {
                mToastCountForResizeImage++;
                if (mToastCountForResizeImage == 1) {
                    MessageUtils.resizeImage(this, uri, mAttachmentEditorHandler, mResizeImageCallback, append, true);
                } else {
                    MessageUtils.resizeImage(this, uri, mAttachmentEditorHandler, mResizeImageCallback, append, false);
                }
            }
            return;
        } else if (result == WorkingMessage.WARNING_TYPE) {
            notifyCompressingDone();
            mCreationUri = uri;
            mCreationAppend = append;
            runOnUiThread(new Runnable() {
                public void run() {
                    showConfirmDialog(mCreationUri, mCreationAppend, WorkingMessage.IMAGE, R.string.confirm_restricted_image);
                }
            });
            return;
        }
        notifyCompressingDone();
//m1
        handleAddAttachmentError(result, R.string.type_picture);
    }
    // Aurora xuyong 2014-07-26 modified for bug #6844 start
    private synchronized void addVideoAsync(final Uri uri, final boolean append) {
    // Aurora xuyong 2014-07-26 modified for bug #6844 end
        runAsyncWithDialog(new Runnable() {
            public void run() {
                addVideo(uri, append);
                mWorkingMessage.saveDraft(false);
            }
        }, R.string.adding_attachments_title);
    }

    private void addVideo(Uri uri, boolean append) {
        if (uri != null) {
            int result = mWorkingMessage.setAttachment(WorkingMessage.VIDEO, uri, append);
//m0
//            handleAddAttachmentError(result, R.string.type_video);
            if (result == WorkingMessage.WARNING_TYPE){
                showConfirmDialog(uri, append, WorkingMessage.VIDEO, R.string.confirm_restricted_video);
            } else {
                handleAddAttachmentError(result, R.string.type_video);
            }
//m1
        }
    }

    private void addAudio(Uri uri) {
        int result = mWorkingMessage.setAttachment(WorkingMessage.AUDIO, uri, false);
//a0
        if (result == WorkingMessage.WARNING_TYPE){
            showConfirmDialog(uri, false, WorkingMessage.AUDIO, R.string.confirm_restricted_audio);
            return;
        }
//a1
        handleAddAttachmentError(result, R.string.type_audio);
    }

    /**
     * Asynchronously executes a task while blocking the UI with a progress spinner.
     *
     * Must be invoked by the UI thread.  No exceptions!
     *
     * @param task the work to be done wrapped in a Runnable
     * @param dialogStringId the id of the string to be shown in the dialog
     */
    public void runAsyncWithDialog(final Runnable task, final int dialogStringId) {
        new ModalDialogAsyncTask(dialogStringId).execute(new Runnable[] {task});
    }

    /**
     * Asynchronously performs tasks specified by Runnables.
     * Displays a progress spinner while the tasks are running.  The progress spinner
     * will only show if tasks have not finished after a certain amount of time.
     *
     * This AsyncTask must be instantiated and invoked on the UI thread.
     */
    private class ModalDialogAsyncTask extends AsyncTask<Runnable, Void, Void> {
        final int mDialogStringId;

        /**
         * Creates the Task with the specified string id to be shown in the dialog
         */
        public ModalDialogAsyncTask(int dialogStringId) {
            this.mDialogStringId = dialogStringId;
            // lazy initialization of progress dialog for loading attachments
            if (mProgressDialog == null) {
                mProgressDialog = createProgressDialog();
            }
        }

        /**
         * Initializes the progress dialog with its intended settings.
         */
        private AuroraProgressDialog createProgressDialog() {
            AuroraProgressDialog dialog = new AuroraProgressDialog(ComposeMessageActivity.this);
            dialog.setIndeterminate(true);
            dialog.setProgressStyle(AuroraProgressDialog.STYLE_SPINNER);
            dialog.setCanceledOnTouchOutside(false);
            dialog.setCancelable(false);
            dialog.setMessage(ComposeMessageActivity.this.
                    getText(mDialogStringId));
            return dialog;
        }

        /**
         * Activates a progress spinner on the UI.  This assumes the UI has invoked this Task.
         */
        @Override
        protected void onPreExecute() {
            // activate spinner after half a second
            mAttachmentEditorHandler.postDelayed(mShowProgressDialogRunnable, 500);
        }

        /**
         * Perform the specified Runnable tasks on a background thread
         */
        @Override
        protected Void doInBackground(Runnable... params) {
            if (params != null) {
                try {
                    for (int i = 0; i < params.length; i++) {
                        params[i].run();
                    }
                } finally {
                    // Cancel pending display of the progress bar if the image has finished loading.
                    mAttachmentEditorHandler.removeCallbacks(mShowProgressDialogRunnable);
                }
            }
            return null;
        }

        /**
         * Deactivates the progress spinner on the UI. This assumes the UI has invoked this Task.
         */
        @Override
        protected void onPostExecute(Void result) {

            if (mProgressDialog != null) {
                if (mProgressDialog.isShowing()) {
                    mProgressDialog.dismiss();
                }
                mProgressDialog = null;
            }
        }
    }

    // Add for vCard begin
    private void setFileAttachment(final String fileName, final int type, final boolean append) {
        final File attachFile = getFileStreamPath(fileName);
        final Resources res = getResources();
        if (attachFile.exists() && attachFile.length() > 0) {
            Uri attachUri = Uri.fromFile(attachFile);
            final int result = mWorkingMessage.setAttachment(type, attachUri, append);
            handleAddAttachmentError(result, R.string.type_common_file);
        } else {
            mUiHandler.post(new Runnable() {
                public void run() {
                    Toast.makeText(ComposeMessageActivity.this, 
                            res.getString(R.string.failed_to_add_media, fileName), Toast.LENGTH_SHORT).show();
                }
            });
        }
    }

    // the uri must be a vcard uri created by Contacts
    private void attachVCardByUri(Uri uri) {
        if (uri == null) {
            return;
        }
        final String filename = getVCardFileName();
        try {
            InputStream in = null;
            OutputStream out = null;
            try {
                in = getContentResolver().openInputStream(uri);
                out = openFileOutput(filename, Context.MODE_PRIVATE);
                byte[] buf = new byte[8096];
                int size = 0;
                while ((size = in.read(buf)) != -1) {
                    out.write(buf, 0, size);
                }
            } finally {
                if (in != null) {
                    in.close();
                }
                if (out != null) {
                    out.close();
                }
            }
        } catch (Exception e) {
            Log.e(TAG, "exception attachVCardByUri ", e);
        }
        setFileAttachment(filename, WorkingMessage.VCARD, false);
    }

    private void asyncAttachVCardByContactsId(final Intent data) {
        if (data == null) {
            return;
        }
        runAsyncWithDialog(new Runnable() {
            public void run() {
                long[] contactsId = data.getLongArrayExtra("com.mediatek.contacts.list.pickcontactsresult");
                attachVCardByContactsId(contactsId);
                mWorkingMessage.saveDraft(false);
            }
        }, R.string.adding_attachments_title);
    }

    private void attachVCardByContactsId(long[] contactsIds) {
        // make contacts' id string
        StringBuilder contactsIdsStr = new StringBuilder("");
        for (int i = 0; i < contactsIds.length-1; i++) {
            contactsIdsStr.append(contactsIds[i]);
            contactsIdsStr.append(',');
        }
        contactsIdsStr.append(contactsIds[contactsIds.length-1]);
        final String ids = contactsIdsStr.toString();
        if (!ids.equals("")) {
            AttachVCardWorkerThread worker = new AttachVCardWorkerThread(ids);
            worker.run();
        }
    }

    // turn contacts id into *.vcf file attachment
    private class AttachVCardWorkerThread extends Thread {
        private String mContactIds;

        public AttachVCardWorkerThread(String ids) {
            mContactIds = ids;
        }

        @Override
        public void run() {
            final String fileName = getVCardFileName();
            try {
                VCardComposer composer = null;
                Writer writer = null;
                try {
                    writer = new BufferedWriter(new OutputStreamWriter(openFileOutput(fileName, Context.MODE_PRIVATE)));
                    composer = new VCardComposer(ComposeMessageActivity.this);
                    if (!composer.init(Contacts._ID + " IN (" + mContactIds + ")", null)) {
                        // fall through to catch clause
                        throw new VCardException("Canot initialize " + composer.getErrorReason());
                    }
                    while (!composer.isAfterLast()) {
                        writer.write(composer.createOneEntry());
                    }
                } finally {
                    if (composer != null) {
                        composer.terminate();
                    }
                    if (writer != null) {
                        writer.close();
                    }
                }
            } catch (VCardException e) {
                Log.e(TAG, "export vcard file, vcard exception " + e.getMessage());
            } catch (FileNotFoundException e) {
                Log.e(TAG, "export vcard file, file not found exception " + e.getMessage());
            } catch (IOException e) {
                Log.e(TAG, "export vcard file, IO exception " + e.getMessage());
            } catch (Exception e) {
                Log.e(TAG, "export vcard file, exception " + e.getMessage());
            }

            setFileAttachment(fileName, WorkingMessage.VCARD, false);
        }
    }

    private String getVCardFileName() {
        final String fileExtension = ".vcf";
        // base on time stamp
        String name = DateFormat.format("yyyyMMdd_hhmmss", new Date(System.currentTimeMillis())).toString();
        name = name.trim();
        return name + fileExtension;
    }
    // Add for vCard end

    private boolean handleForwardedMessage() {
        Intent intent = getIntent();

        // If this is a forwarded message, it will have an Intent extra
        // indicating so.  If not, bail out.
        if (intent.getBooleanExtra(FORWARD_MESSAGE, false) == false) {
            return false;
        }

        Uri uri = intent.getParcelableExtra("msg_uri");

        if (Log.isLoggable(LogTag.APP, Log.DEBUG)) {
            log("handle forwarded message " + uri);
        }

        if (uri != null) {
            mWorkingMessage = WorkingMessage.load(this, uri);
            mWorkingMessage.setSubject(intent.getStringExtra("subject"), false);
        } else {
            String smsAddress = null;
            if (intent.hasExtra(SMS_ADDRESS)) {
                smsAddress = intent.getStringExtra(SMS_ADDRESS);
                if (smsAddress != null){
//                TODO need re-coding
//                    mRecipientsEditor.addRecipient(smsAddress, true);
                }
            }
            mWorkingMessage.setText(intent.getStringExtra(SMS_BODY));
        }

        // let's clear the message thread for forwarded messages
        //aurora yudingmin 2014-08-22 modified for bug #7671 start
        mMsgListAdapter.changeData(null, null);
//        mMsgListAdapter.changeCursor(null);
        //aurora yudingmin 2014-08-22 modified for bug #7671 end
//MTK_OP01_PROTECT_START
        //add for text zoom
        //if (MmsApp.isTelecomOperator()) {
        //    setZoomVisibility(View.GONE);
        //}
//MTK_OP01_PROTECT_END

        return true;
    }

    // Handle send actions, where we're told to send a picture(s) or text.
    private boolean handleSendIntent() {
        Intent intent = getIntent();
        Bundle extras = intent.getExtras();
        if (extras == null) {
            return false;
        }
        mSimDis = intent.getIntExtra("SimDis", -1);
//a0
        //add for saveAsMms
        mWorkingMessage.setConversation(mConversation);
//a1

        final String mimeType = intent.getType();
        String action = intent.getAction();
        Log.i(TAG, "Get mimeType: " + mimeType);
        Log.i(TAG, "Get action: " + action);
        Log.i(TAG, "Get simDis: " + mSimDis);
        if (Intent.ACTION_SEND.equals(action)) {
            if (extras.containsKey(Intent.EXTRA_STREAM)) {
                //Aurora hu junming 2014-05-05 added for bug #4655 start
                Message mes=mHandler.obtainMessage(SINGLE_FROM_FILE_MANAGER);
                mHandler.sendMessage(mes);
                //Aurora hu junming 2014-05-05 added for bug #4655 end
                return true;
            } else if (extras.containsKey(Intent.EXTRA_TEXT)) {
                mWorkingMessage.setText(extras.getString(Intent.EXTRA_TEXT));
                intent.setAction(SIGN_CREATE_AFTER_KILL_BY_SYSTEM);
                return true;
            }
        } else if (LEMEIINTENT.equals(action)) {
            mIsLeMei = true;
            mWorkingMessage.setSubject(getString(R.string.cu_subject), true);
            mWorkingMessage.setMessageClassMini();
            
            if (MmsApp.mGnMessageSupport) {
                gnInitAttachmentLayout();
            }
            
            mAttachmentEditor.update(mWorkingMessage, true);
            
            if (extras.containsKey(Intent.EXTRA_STREAM)) {
                Uri uri = (Uri)extras.getParcelable(Intent.EXTRA_STREAM);
                addLeMeiAttachment(mimeType, uri, false);
                return true;
            } else if (extras.containsKey(Intent.EXTRA_TEXT)) {
                mWorkingMessage.setText(extras.getString(Intent.EXTRA_TEXT));
                return true;
            }
        } else if (Intent.ACTION_SEND_MULTIPLE.equals(action) &&
                extras.containsKey(Intent.EXTRA_STREAM)) {
            //Aurora hu junming 2014-05-05 added for bug #4655 start
            Message mes=mHandler.obtainMessage(MULTIPLE_FROM_FILE_MANAGER);
            mHandler.sendMessage(mes);
            //Aurora hu junming 2014-05-05 added for bug #4655 end
            return true;
        }else if(SIGN_CREATE_AFTER_KILL_BY_SYSTEM.equals(action))
        {
            return true;
        }
        return false;
    }

    // mVideoUri will look like this: content://media/external/video/media
    private static final String mVideoUri = Video.Media.getContentUri("external").toString();
    // mImageUri will look like this: content://media/external/images/media
    private static final String mImageUri = Images.Media.getContentUri("external").toString();
    
//a0
    // mAudioUri will look like this: content://media/external/images/media
    private static final String mAudioUri = Audio.Media.getContentUri("external").toString();
//a1

    private void addAttachment(String type, Uri uri, boolean append) {
        if (uri != null) {
            // When we're handling Intent.ACTION_SEND_MULTIPLE, the passed in items can be
            // videos, and/or images, and/or some other unknown types we don't handle. When
            // a single attachment is "shared" the type will specify an image or video. When
            // there are multiple types, the type passed in is "*/*". In that case, we've got
            // to look at the uri to figure out if it is an image or video.
            boolean wildcard = "*/*".equals(type);
            Log.i(TAG, "Got send intent mimeType :" + type);
            // Gionee guoyangxu 20120416 add for CR00564922 begin
//            if (MmsApp.mGnMessageSupport) {
                if (wildcard && !uri.toString().startsWith(mImageUri)
                        && !uri.toString().startsWith(mAudioUri)
                        && !uri.toString().startsWith(mVideoUri)) {
                    type = getContentTypeFileUri(uri);
                    if (type == null) {
                        runOnUiThread(new Runnable() {
                            public void run() {
                                String message = getResources().getString(R.string.gn_unsuport_file_format);
                                Toast.makeText(ComposeMessageActivity.this, message, Toast.LENGTH_SHORT).show();
                            }
                        });

                        return;
                    }
                }
//            }
           // Gionee guoyangxu 20120416 add for CR00564922 end
            if (type.startsWith("image/") || (wildcard && uri.toString().startsWith(mImageUri))) {
                addImage(type,uri, append);
            } else if (type.startsWith("video/") ||
                    (wildcard && uri.toString().startsWith(mVideoUri))) {
                addVideo(uri, append);
            }
//a0 
            else if (type.startsWith("audio/") || type.equals("application/ogg")
                || (wildcard && uri.toString().startsWith(mAudioUri))) {
                addAudio(uri, append);
            } else if (type.equalsIgnoreCase("text/x-vcard")) {
                // add for vcard
                attachVCardByUri(uri);
            } 
            // Gionee guoyangxu 20120418 add for CR00564922 begin
            else {
                runOnUiThread(new Runnable() {
                    public void run() {
                        String message = getResources().getString(R.string.gn_unsuport_file_format);
                        Toast.makeText(ComposeMessageActivity.this, message, Toast.LENGTH_SHORT).show();
                    }
                });
            }
           // Gionee guoyangxu 20120418 add for CR00564922 end
//a1
        }
    }
    
    private String getResourcesString(int id, String mediaName) {
        Resources r = getResources();
        return r.getString(id, mediaName);
    }
    // Aurora xuyong 2015-03-03 modified for bug #11860 start
    private void drawBottomPanel(boolean needResetTextSelection) {
    // Aurora xuyong 2015-03-03 modified for bug #11860 end
        //gionee gaoj 2012-9-20 added for CR00699291 start
        if (MmsApp.mGnMessageSupport) {
            // Aurora xuyong 2015-03-03 modified for bug #11860 start
            gndrawBottomPanel(needResetTextSelection);
            // Aurora xuyong 2015-03-03 modified for bug #11860 end
            return;
        }
        //gionee gaoj 2012-9-20 added for CR00699291 end
        // Reset the counter for text editor.
        /*resetCounter();

        //m0
        if (mWorkingMessage.hasSlideshow()) {
            mBottomPanel.setVisibility(View.GONE);
            mAttachmentEditor.requestFocus();
            return;
        }
        if (mWorkingMessage.hasSlideshow() && !mMsgListAdapter.mIsDeleteMode) {
            mBottomPanel.setVisibility(View.GONE);
            mDeletePanel.setVisibility(View.GONE);
            mAttachmentEditor.update(mWorkingMessage);
            mAttachmentEditor.requestFocus();
            return;
        }
        //add for multi-delete
        if (mMsgListAdapter.mIsDeleteMode) {
            mBottomPanel.setVisibility(View.GONE);
            mAttachmentEditor.hideView();
            mDeletePanel.setVisibility(View.VISIBLE);
            LinearLayout.LayoutParams mParams = new LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);
            mParams.height = getAuroraActionBar().getHeight();
            mDeletePanel.setLayoutParams(mParams);
            return;
        } 

        mDeletePanel.setVisibility(View.GONE);
        mAttachmentEditor.update(mWorkingMessage);
        //m1

        mBottomPanel.setVisibility(View.VISIBLE);

        CharSequence text = mWorkingMessage.getText();

        // TextView.setTextKeepState() doesn't like null input.
        if (text != null) {
            mTextEditor.setTextKeepState(text);
//a0
            mTextEditor.setSelection(text.length());
//a1
        } else {
            mTextEditor.setText("");
        }*/
    }

    private void drawTopPanel(boolean showSubjectEditor) {
        //gionee gaoj 2012-9-20 added for CR00699291 start
        if (MmsApp.mGnMessageSupport) {
            gndrawTopPanel();
            return;
        }
        //gionee gaoj 2012-9-20 added for CR00699291 end
//m0
/*
        boolean showingAttachment = mAttachmentEditor.update(mWorkingMessage);
        mAttachmentEditorScrollView.setVisibility(showingAttachment ? View.VISIBLE : View.GONE);
        showSubjectEditor(showSubjectEditor || mWorkingMessage.hasSubject());
*/

        //add for multi-delete
        /*if (mMsgListAdapter.mIsDeleteMode) {
            //mSelectPanel.setVisibility(View.VISIBLE);
            //mSelectedAll.setChecked(false);
        } else {
//m0
            //mSelectPanel.setVisibility(View.GONE);
//m1
            boolean showingAttachment = mAttachmentEditor.update(mWorkingMessage);
            mAttachmentEditorScrollView.setVisibility(showingAttachment ? View.VISIBLE : View.GONE);
        }
        showSubjectEditor(mWorkingMessage.hasSubject() && !mMsgListAdapter.mIsDeleteMode);*/
//m1
    }

    //==========================================================
    // Interface methods
    //==========================================================

    public void onClick(View v) {
//m0
/*        if ((v == mSendButtonSms || v == mSendButtonMms) && isPreparedForSending()) {
            confirmSendMessageIfNeeded();
        }
*/
        /*if (v == mSendButtonSms || v == mSendButtonMms) {
            if (mSendButtonCanResponse) {
                mSendButtonCanResponse = false;
                if (isPreparedForSending()) {
                    // Since sending message here, why not disable button 'Send'??
                    updateSendButtonState(false);
                    //simSelection();
                    checkRecipientsCount();
                    mSendButtonCanResponse = true;
                } else {
                    mSendButtonCanResponse = true;
                    if (!isHasRecipientCount()) {
                        new AuroraAlertDialog.Builder(this)
                            .setIconAttribute(android.R.attr.alertDialogIcon)
                            .setTitle(R.string.cannot_send_message)
                            .setMessage(R.string.cannot_send_message_reason)
                            .setPositiveButton(R.string.yes,new CancelSendingListener()).show();
                    } else {
                        new AuroraAlertDialog.Builder(this)
                            .setIconAttribute(android.R.attr.alertDialogIcon)
                            .setTitle( R.string.cannot_send_message)
                            .setMessage(R.string.cannot_send_message_reason_no_content)
                            .setPositiveButton(R.string.yes,new CancelSendingListener()).show();

                    }
                }
            }

        } /*else if (v == mDeleteButton){ 
            if (mMsgListAdapter.getSelectedNumber() >= mMsgListAdapter.getCount()) {
                ArrayList<Long> threadIds = new ArrayList<Long> (1);
                threadIds.add(mConversation.getThreadId());
                ConversationList.confirmDeleteThreadDialog(
                        new ConversationList.DeleteThreadListener(threadIds,
                                mBackgroundQueryHandler, ComposeMessageActivity.this),
                                threadIds, false, ComposeMessageActivity.this);
            } else {
                //Gione <guoyx> <2013-06-09> modify for CR00824219 begin
                mDeleteConfirmDialog = confirmMultiDelete();
                //Gione <guoyx> <2013-06-09> modify for CR00824219 end
            }
        } else if (v == mCancelButton) {
            if (mMsgListAdapter.getSelectedNumber() > 0) {
                mIsSelectedAll = false;
                markCheckedState(mIsSelectedAll);
            }
        } else if (v == mSelectAllButton) {
            if (!mIsSelectedAll) {
                mIsSelectedAll = true;
                markCheckedState(mIsSelectedAll);
            }
        }
//m0
        else*/ if ((v == mRecipientsPicker)) {
//m0
            //launchMultiplePhonePicker();
            if (recipientCount() >= RECIPIENTS_LIMIT_FOR_SMS) {
                Toast.makeText(ComposeMessageActivity.this, R.string.cannot_add_recipient, Toast.LENGTH_SHORT).show();
            } else {
                addContacts(-1);
            }
//m1
        }
        //gionee gaoj 2012-4-10 added for CR00555790 start
        // gionee lwzh add for CR00633086 20120702 begin
        if (MmsApp.mGnMessageSupport) {
            //Aurora xuyong 2014-08-16 deleted for aurora's new feature start
            //if (mFirstLongClick) {
            //    return;
            //}
            //Aurora xuyong 2014-08-16 deleted for aurora's new feature end
            gnOnClick(v);
        }
        // gionee lwzh add for CR00633086 20120702 end
        //gionee gaoj 2012-4-10 added for CR00555790 end
    }

    private void launchMultiplePhonePicker() {
        Intent intent = new Intent(Intents.ACTION_GET_MULTIPLE_PHONES);
        intent.addCategory("android.intent.category.DEFAULT");
        intent.setType(Phone.CONTENT_TYPE);
        // We have to wait for the constructing complete.
        //gionee gaoj 2012-4-10 added for CR00555790 start
        ContactList contacts = null;
        if (MmsApp.mGnMessageSupport) {
            contacts = mContactContainer.constructContactsFromInput(true);
        } else {
            contacts = mRecipientsEditor.constructContactsFromInput(true);
        }
        //gionee gaoj 2012-4-10 added for CR00555790 end
        int recipientsCount = 0;
        int urisCount = 0;
        Uri[] uris = new Uri[contacts.size()];
        urisCount = 0;
        for (Contact contact : contacts) {
            if (Contact.CONTACT_METHOD_TYPE_PHONE == contact.getContactMethodType()) {
                    uris[urisCount++] = contact.getPhoneUri();
            }
        }
        if (urisCount > 0) {
            intent.putExtra(Intents.EXTRA_PHONE_URIS, uris);
        }
        startActivityForResult(intent, REQUEST_CODE_PICK);
    }

    public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
        if (event != null) {
            // if shift key is down, then we want to insert the '\n' char in the TextView;
            // otherwise, the default action is to send the message.
            if (!event.isShiftPressed()) {
//m0
/*
                if (isPreparedForSending()) {
                    confirmSendMessageIfNeeded();
                }
*/
                if(event.getAction() == KeyEvent.ACTION_DOWN) {
                    return false;
                }
                if (isPreparedForSending()) {
                    //simSelection();
                    checkRecipientsCount();
                } else {
                        if (!isHasRecipientCount()) {
                            new AuroraAlertDialog.Builder(this)
                                .setIconAttribute(android.R.attr.alertDialogIcon)
                                .setTitle(R.string.cannot_send_message)
                                .setMessage(R.string.cannot_send_message_reason)
                                .setPositiveButton(R.string.yes,new CancelSendingListener()).show();

                        } else {
                            new AuroraAlertDialog.Builder(this)
                                .setIconAttribute(android.R.attr.alertDialogIcon)
                                .setTitle(R.string.cannot_send_message)
                                .setMessage(R.string.cannot_send_message_reason_no_content)
                                .setPositiveButton(R.string.yes,new CancelSendingListener()).show();
                        }
                    }
//m1
                return true;
            }
            return false;
        }

        if (isPreparedForSending()) {
//m0
//            confirmSendMessageIfNeeded();
            checkRecipientsCount();
//m1
        }
//a0
        else {
            if (!isHasRecipientCount()) {
                new AuroraAlertDialog.Builder(this).setIconAttribute(android.R.attr.alertDialogIcon)
                    .setTitle(R.string.cannot_send_message)
                    .setMessage(R.string.cannot_send_message_reason)
                    .setPositiveButton(R.string.yes,new CancelSendingListener()).show();
            } else {
                new AuroraAlertDialog.Builder(this)
                    .setIconAttribute(android.R.attr.alertDialogIcon)
                    .setTitle(R.string.cannot_send_message)
                    .setMessage(R.string.cannot_send_message_reason_no_content)
                    .setPositiveButton(R.string.yes, new CancelSendingListener()).show();

            }
        }
//a1
        return true;
    }

    private final TextWatcher mTextEditorWatcher = new TextWatcher() {
       // Aurora xuyong 2014-07-26 added for bug #6884 start
         private CharSequence beforeChangedText = null;
         private CharSequence afterChangedText = null;
       // Aurora xuyong 2014-07-26 added for bug #6884 end
        public void beforeTextChanged(CharSequence s, int start, int count, int after) {
          // Aurora xuyong 2014-07-26 added for bug #6884 start
            beforeChangedText = s;
          // Aurora xuyong 2014-07-26 added for bug #6884 end
        }

        public void onTextChanged(CharSequence s, int start, int before, int count) {
            // Aurora xuyong 2014-07-26 added for bug #6884 start
              afterChangedText = s;
            // Aurora xuyong 2014-07-26 added for bug #6884 end
            // This is a workaround for bug 1609057.  Since onUserInteraction() is
            // not called when the user touches the soft keyboard, we pretend it was
            // called when textfields changes.  This should be removed when the bug
            // is fixed.
            //gionee gaoj 2012-4-10 added for CR00555790 start
            if (MmsApp.mGnMessageSupport) {
             // Aurora xuyong 2014-07-10 modified for bug #6089 start
                handleAutoRegulationMessageLayoutHeight();
             // Aurora xuyong 2014-07-10 modified for bug #6089 end
            }
            //gionee gaoj 2012-4-10 added for CR00555790 end
            onUserInteraction();

            mWorkingMessage.setText(s);
//a0
            if (mAttachmentEditor != null) {
                mAttachmentEditor.onTextChangeForOneSlide(s);
            }
//a1

            updateSendButtonState();

            updateCounter(s, start, before, count);
          // Aurora xuyong 2014-07-10 added for bug #6089 start
          // Aurora xuyong 2014-07-26 modified for bug #6884 start
            if (s.length() == 0 || (beforeChangedText == null || beforeChangedText.length() <= 0) || (afterChangedText == null || afterChangedText.length() <= 0)) {
          // Aurora xuyong 2014-07-26 modified for bug #6884 end
                mNeedReturn = false;
                updateSendButtonState();
            }
          // Aurora xuyong 2014-07-10 added for bug #6089 end
          // Aurora xuyong 2014-07-26 added for bug #6884 start
            beforeChangedText = afterChangedText;
          // Aurora xuyong 2014-07-26 added for bug #6884 end
//m0
//            ensureCorrectButtonHeight();
//m1
            
        }

        public void afterTextChanged(Editable s) {
        }
    };

    /**
     * Ensures that if the text edit box extends past two lines then the
     * button will be shifted up to allow enough space for the character
     * counter string to be placed beneath it.
     */
    private void ensureCorrectButtonHeight() {
        int currentTextLines = mTextEditor.getLineCount();
        // Aurora xuyong 2014-08-05 modified for aurora multisim feature start
        if (currentTextLines < 3) {
        // Aurora xuyong 2014-08-05 modified for aurora multisim feature end
            mTextCounter.setVisibility(View.GONE);
        // Aurora xuyong 2014-08-05 added for aurora multisim feature start
            if (mMultiTextCounter != null) {
                mMultiTextCounter.setVisibility(View.GONE);
            }
        // Aurora xuyong 2014-08-05 added for aurora multisim feature end
        }
        // Aurora xuyong 2014-08-05 modified for aurora multisim feature start
        else if (currentTextLines >= 3 && mTextCounter.getVisibility() == View.GONE) {
        // Aurora xuyong 2014-08-05 modified for aurora multisim feature start
            // Making the counter invisible ensures that it is used to correctly
            // calculate the position of the send button even if we choose not to
            // display the text.
            mTextCounter.setVisibility(View.INVISIBLE);
            // Aurora xuyong 2014-08-05 added for aurora multisim feature start
            if (mMultiTextCounter != null) {
                mMultiTextCounter.setVisibility(View.INVISIBLE);
            }
            // Aurora xuyong 2014-08-05 added for aurora multisim feature end
        }
    }

    private final TextWatcher mSubjectEditorWatcher = new TextWatcher() {
        public void beforeTextChanged(CharSequence s, int start, int count, int after) { }

        public void onTextChanged(CharSequence s, int start, int before, int count) {
            mWorkingMessage.setSubject(s, true);
//a0
            //Gionee <guoyx> <2013-08-02> delete for CR00845227 begin
//            mTextCounter.setVisibility(View.GONE);
            //Gionee <guoyx> <2013-08-02> delete for CR00845227 end
//a1
            //gionee gaoj 2012-4-10 added for CR00555790 start
            if (MmsApp.mGnMessageSupport) {
                //Gionee <guoyx> <2013-07-09> modify for CR00832990 begin
                // gionee zhouyj 2012-06-29 add for CR00627870 start 
                if(mSubjectTextEditor.getVisibility() == View.VISIBLE && s.length() == 0) {
                    mWorkingMessage.removeSubject();
                }
                // gionee zhouyj 2012-06-29 add for CR00627870 end
                //Gionee <guoyx> <2013-07-09> modify for CR00832990 end
                autoRegulationMessageLayoutHeight();
                //Gionee <guoyx> <2013-08-02> modify for CR00845227 begin
                if (!TextUtils.isEmpty(s) || mWorkingMessage.requiresMms()) {
                    if (!mWorkingMessage.hasAttachment()) {
                        setMediaTextSizeInfo(s, mWorkingMessage.getText());
                    }
                    mTextCounter.setVisibility(View.GONE);
                    // Aurora xuyong 2014-08-05 added for aurora multisim feature start
                    if (mMultiTextCounter != null) {
                        mMultiTextCounter.setVisibility(View.GONE);
                    }
                    // Aurora xuyong 2014-08-05 added for aurora multisim feature end
                    mediaTextView.setVisibility(View.VISIBLE);
                    // Aurora xuyong 2014-08-05 added for aurora multisim feature start
                    if (mMultiMediaSizeInfo != null) {
                        mMultiMediaSizeInfo.setVisibility(View.VISIBLE);
                    }
                    // Aurora xuyong 2014-08-05 added for aurora multisim feature end
                } else {
                    mediaTextView.setVisibility(View.GONE);
                    // Aurora xuyong 2014-08-05 added for aurora multisim feature start
                    if (mMultiMediaSizeInfo != null) {
                        mMultiMediaSizeInfo.setVisibility(View.GONE);
                    }
                    // Aurora xuyong 2014-08-05 added for aurora multisim feature end
                }
              //Gionee <guoyx> <2013-08-02> modify for CR00845227 end
            }
            //gionee gaoj 2012-4-10 added for CR00555790 end
        }

        public void afterTextChanged(Editable s) { }
    };

    //==========================================================
    // Private methods
    //==========================================================

    /**
     * Initialize all UI elements from resources.
     */
    private void initResourceRefs() {
        // gionee lwzh add for CR00633086 20120702 begin
        if (MmsApp.mGnMessageSupport) {
            gnInitResourceRefs();
            return;
        }
        // gionee lwzh add for CR00633086 20120702 end
        /*mMsgListView = (MessageListView) findViewById(R.id.history);
        mMsgListView.setDivider(null);      // no divider so we look like IM conversation.

        // called to enable us to show some padding between the message list and the
        // input field but when the message list is scrolled that padding area is filled
        // in with message content
        mMsgListView.setClipToPadding(false);

        // turn off children clipping because we draw the border outside of our own
        // bounds at the bottom.  The background is also drawn in code to avoid drawing
        // the top edge.
        mMsgListView.setClipChildren(false);

        mBottomPanel = findViewById(R.id.bottom_panel);
        //a0
        mDeletePanel = findViewById(R.id.delete_panel);
        mSelectAllButton = (ImageButton) findViewById(R.id.select_all);
        mSelectAllButton.setOnClickListener(this);
        mCancelButton = (ImageButton) findViewById(R.id.cancel);
        mCancelButton.setOnClickListener(this);
        mDeleteButton = (ImageButton) findViewById(R.id.delete);
        mDeleteButton.setOnClickListener(this);
        //a1
        mTextEditor = (AuroraEditText) findViewById(R.id.embedded_text_editor);
//m0
//        mTextEditor.setOnEditorActionListener(this);
//m1
        mTextEditor.addTextChangedListener(mTextEditorWatcher);
        mTextEditor.setFilters(new InputFilter[] {
                new TextLengthFilter(MmsConfig.getMaxTextLimit())});
        mTextCounter = (TextView) findViewById(R.id.text_counter);
        mSendButtonMms = (TextView) findViewById(R.id.send_button_mms);
        mSendButtonSms = (ImageButton) findViewById(R.id.send_button_sms);
        mSendButtonMms.setOnClickListener(this);
        mSendButtonSms.setOnClickListener(this);

        // gionee lwzh modify for CR00774362 20130227 begin
        if (!MmsApp.mGnMessageSupport) {
            mTopPanel = findViewById(R.id.recipients_subject_linear);
        }
        // gionee lwzh modify for CR00774362 20130227 end
        
        mTopPanel.setFocusable(false);
        mAttachmentEditor = (AttachmentEditor) findViewById(R.id.attachment_editor);
        mAttachmentEditor.setHandler(mAttachmentEditorHandler);
        mAttachmentEditorScrollView = findViewById(R.id.attachment_editor_scroll_view);*/
    }

    //Gione <guoyx> <2013-06-09> modify for CR00824219 begin
    private AuroraAlertDialog confirmDeleteDialog(OnClickListener listener, boolean locked) {
        AuroraAlertDialog.Builder builder = new AuroraAlertDialog.Builder(this);
        builder.setTitle(locked ? R.string.confirm_dialog_locked_title :
            R.string.confirm_dialog_title);
        builder.setIconAttribute(android.R.attr.alertDialogIcon);
        builder.setCancelable(true);
        builder.setMessage(locked ? R.string.confirm_delete_locked_message :
                    R.string.confirm_delete_message);
        builder.setPositiveButton(R.string.delete, listener);
        builder.setNegativeButton(R.string.no, null);
        return builder.show();
    }
    //Gione <guoyx> <2013-06-09> modify for CR00824219 end

    void undeliveredMessageDialog(long date) {
        String body;

        if (date >= 0) {
             // Aurora liugj 2013-09-24 modified for aurora's new feature start
            body = getString(R.string.undelivered_msg_dialog_body,
                    MessageUtils.formatAuroraTimeStampString(this, date, false));
            // Aurora liugj 2013-09-24 modified for aurora's new feature end
        } else {
            // FIXME: we can not get sms retry time.
            body = getString(R.string.undelivered_sms_dialog_body);
        }

        Toast.makeText(this, body, Toast.LENGTH_LONG).show();
    }

    private void startMsgListQuery() {
        startMsgListQuery(500);
    }

    //gionee gaoj 2013-1-4 added for CR00756848 start
    public static boolean sIsGroupMsg = false;
    //gionee gaoj 2013-1-4 added for CR00756848 end
    // Aurora xuyong 2014-08-14 added for aurora's new feature start
    private boolean mIsInitialized = false;
    // Aurora xuyong 2014-08-14 added for aurora's new feature end
    // Aurora yudingmin 2014-08-30 added for bug 8029 start
    private void startMsgListQuery(int delay) {
        startMsgListQuery(MESSAGE_LIST_QUERY_TOKEN, delay);
    }
    // Aurora yudingmin 2014-08-30 added for bug 8029 end
    private void startMsgListQuery(final int token, int delay) {
            Log.d(TAG, "startMsgListQuery,timeout=" + delay);
//MTK_OP01_PROTECT_START
        if (MmsConfig.getMmsDirMode()) {
            return;
        }
//MTK_OP01_PROTECT_END
        // Aurora xuyong 2014-03-31 deleted for aurora's new feature start
        /*if (isRecipientsEditorVisible()) {
            return;
        }*/
        // Aurora xuyong 2014-03-31 deleted for aurora's new feature end
        final Uri conversationUri = mConversation.getUri();

        if (conversationUri == null) {
            log("##### startMsgListQuery: conversationUri is null, bail!");
            return;
        }

        final long threadId = mConversation.getThreadId();
        if (LogTag.VERBOSE || Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
            log("startMsgListQuery for " + conversationUri + ", threadId=" + threadId);
        }

        // Cancel any pending queries
        // Aurora yudingmin 2014-08-30 added for bug 8029 start
        mBackgroundQueryHandler.cancelOperation(token);
        // Aurora yudingmin 2014-08-30 added for bug 8029 end
        try {
            // Kick off the new query
//m0
/*
            mBackgroundQueryHandler.startQuery(
                    MESSAGE_LIST_QUERY_TOKEN,
                    threadId, // cookie
                    conversationUri,
                    PROJECTION,
                    null, null, null);
*/
            //gionee gaoj 2013-1-4 added for CR00756848 start
            String orderby = null;
            // Aurora xuyong 2014-10-25 added for privacy feature start
            if (mConversation.getPrivacy() > AuroraPrivacyUtils.getCurrentAccountId()) {
                orderby = " normalized_date DESC LIMIT " + mShowPriMsgCount;
            }
            // Aurora xuyong 2014-10-25 added for privacy feature end
            if (mConversation.getRecipients().size() > 1) {
                sIsGroupMsg = true;
                // Aurora xuyong 2013-12-11 deleted for aurora's new feature start
                //orderby = " type ";
                // Aurora xuyong 2013-12-11 deleted for aurora's new feature end
            } else {
                sIsGroupMsg = false;
            }
            final String orderbyString = orderby;
            //gionee gaoj 2013-1-4 added for CR00756848 end
            // Aurora xuyong 2014-07-02 added for reject feature start
            int value = mIsFromReject ? 1 : 0;
            if (MmsApp.sHasRejectFeature) {
                String selection = "reject = " + value;
              // Aurora xuyong 2014-10-23 modified for privacy feature start
                if (MmsApp.sHasPrivacyFeature) {
                    selection = "(" + selection + ") AND is_privacy = " + mConversation.getPrivacy();
                }
                final String selectionArgs = selection;
              // Aurora xuyong 2014-10-23 modified for privacy feature emd
                mBackgroundQueryHandler.postDelayed(new Runnable() {
                    public void run() {
                    // Aurora xuyong 2014-08-14 added for aurora's new feature start
                        Uri convUri = conversationUri;
                        if (mIsInitialized) {
                            convUri = Uri.parse(conversationUri.toString() + "/quickquery");
                        }
                    // Aurora xuyong 2014-08-14 added for aurora's new feature end
                    // Aurora xuyong 2014-08-14 modified for aurora's new feature start
                        // Aurora yudingmin 2014-08-30 modified for bug 8029 start
                        mBackgroundQueryHandler.startQuery(
                                token, threadId, convUri,
                                PROJECTION, selectionArgs, null, orderbyString);
                        // Aurora yudingmin 2014-08-30 modified for bug 8029 end
                    // Aurora xuyong 2014-08-14 modified for aurora's new feature end
                    }
                }, delay);
            } else {
              // Aurora xuyong 2014-10-23 added for privacy feature start
                String selection = null;
                if (MmsApp.sHasPrivacyFeature) {
                    selection = "(" + selection + ") AND is_privacy = " + mConversation.getPrivacy();
                }
                final String selectionArgs = selection;
              // Aurora xuyong 2014-10-23 added for privacy feature end
                mBackgroundQueryHandler.postDelayed(new Runnable() {
                    public void run() {
                   // Aurora xuyong 2014-08-14 added for aurora's new feature start
                        Uri convUri = conversationUri;
                        if (mIsInitialized) {
                            convUri = Uri.parse(conversationUri.toString() + "/quickquery");
                        }
                   // Aurora xuyong 2014-08-14 added for aurora's new feature end
                   // Aurora xuyong 2014-08-14 modified for aurora's new feature start
                        // Aurora yudingmin 2014-08-30 modified for bug 8029 start
                        mBackgroundQueryHandler.startQuery(
                                token, threadId, convUri,
                                PROJECTION, selectionArgs, null, orderbyString);
                        // Aurora yudingmin 2014-08-30 modified for bug 8029 end
                   // Aurora xuyong 2014-08-14 modified for aurora's new feature end
                    }
                }, delay);
            }
            // Aurora xuyong 2014-07-02 added for reject feature end
//m1
        } catch (SQLiteException e) {
            SqliteWrapper.checkSQLiteException(this, e);
        }
    }

    private static int CHANGE_SCROLL_LISTENER_MIN_CURSOR_COUNT = 100;
    // Aurora xuyong 2014-09-12 added for uptimize start
    private boolean mHasScrolled = false;
    // Aurora xuyong 2014-09-12 added for uptimize end
    // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
    //private MyScrollListener mScrollListener = new MyScrollListener(CHANGE_SCROLL_LISTENER_MIN_CURSOR_COUNT, "MessageList_Scroll_Tread");
    // Aurora xuyong 2013-09-13 deleted for aurora's new feature end
    private void initMessageList() {
        if (mMsgListAdapter != null) {
            return;
        }

        String highlightString = getIntent().getStringExtra("highlight");
        // Aurora liugj 2013-09-23 modified for aurora's new feature start
        Pattern highlight = highlightString == null
            ? null
            : Pattern.compile(/*"\\b" + */Pattern.quote(highlightString), Pattern.CASE_INSENSITIVE);
        // Aurora liugj 2013-09-23 modified for aurora's new feature end

        // Initialize the list adapter with a null cursor.
        mMsgListAdapter = new MessageListAdapter(this, null, mMsgListView, true, highlight);
        if (mIsFromReject) {
            mMsgListAdapter.setNeedShowWeatherInfo(false);
        } else {
            mMsgListAdapter.setNeedShowWeatherInfo(true);
        }
        //add for cmcc dir ui begin
        if (MmsConfig.getMmsDirMode()) {
            mMsgListView.setVisibility(View.GONE);
            return;
        }
        //add for cmcc dir ui end
        mMsgListAdapter.setOnDataSetChangedListener(mDataSetChangedListener);
        mMsgListAdapter.setMsgListItemHandler(mMessageListItemHandler);
        mMsgListView.setAdapter(mMsgListAdapter);
        mMsgListView.setItemsCanFocus(false);
        mMsgListView.setVisibility(View.VISIBLE);
        //gionee gaoj added for CR00725602 20121201 start
        // Aurora xuyong 2014-02-11 deleted for bug #1923 start
        //mMsgListView.setOnCreateContextMenuListener(mMsgListMenuCreateListener);
        // Aurora xuyong 2014-02-11 deleted for bug #1923 end
        //gionee gaoj added for CR00725602 20121201 end
        // Aurora xuyong 2014-02-11 deleted for bug #1923 start
        /*mMsgListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                if (view != null) {
                    ((MessageListItem) view).onMessageListItemClick();
                    // gionee zhouyj 2012-07-31 add for CR00662484 start 
                    if(mMsgListAdapter.mIsDeleteMode) {
                        mClickPos = position;
                    }
                    // gionee zhouyj 2012-07-31 add for CR00662484 end 
                }
            }
        });*/
        // Aurora xuyong 2014-02-11 deleted for bug #1923 end
        // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
        // Aurora xuyong 2013-12-18 added for bug #1132 start
        mMsgListView.setOnScrollListener(new AbsListView.OnScrollListener() {
            
            @Override
            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
            } 
            
            @Override
            public void onScrollStateChanged(AbsListView view, int scrollState) {
             // Aurora xuyong 2014-09-12 added for uptimize start
                mHasScrolled = true;
             // Aurora xuyong 2014-09-12 added for uptimize end
                // Aurora xuyong 2014-02-20 added for aurora's new feature start
                MessageListItem.setNeedChangeInva(false);
                if (scrollState == OnScrollListener.SCROLL_STATE_TOUCH_SCROLL || scrollState == OnScrollListener.SCROLL_STATE_FLING) {
                // Aurora xuyong 2014-02-20 added for aurora's new feature end
                    hideInputMethod();
                    // Aurora xuyong 2014-01-17 added for bug #1940 start
                    hideAttachmentSlideView();
                    // Aurora xuyong 2014-01-17 added for bug #1940 end
                }
             // Aurora xuyong 2014-04-29 added for aurora's new feature start
                if (scrollState == AbsListView.OnScrollListener.SCROLL_STATE_FLING) {
                    // Before Honeycomb pause image loading on scroll to help with performance
                    if (!Utils.hasHoneycomb()) {
                       // Aurora xuyong 2014-05-07 modified for bug 4693 start
                        mThumbnailWorker.setPauseWork(true);
                       // Aurora xuyong 2014-05-07 modified for bug 4693 end
                    }
                } else {
                // Aurora xuyong 2014-05-07 modified for bug 4693 start
                    mThumbnailWorker.setPauseWork(false);
                // Aurora xuyong 2014-05-07 modified for bug 4693 end
                }
             // Aurora xuyong 2014-04-29 added for aurora's new feature end
            }
            
        });
        // Aurora xuyong 2013-12-18 added for bug #1132 end
        // Aurora xuyong 2013-09-13 deleted for aurora's new feature end
        //Gionee <zhouyj> <2013-05-15> add for CR00810588 begin
        // Aurora xuyong 2014-02-11 deleted for bug #1923 start
        /*mMsgListView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
            
            @Override
            public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
                // Aurora xuyong 2013-09-26 added for aurora's new feature start
                // Aurora xuyong 2013-10-13 modified for aurora's new feature start
                // Aurora xuyong 2013-12-11 modified for aurora's new feature start
                MessageItem mei = ((MessageListItem)parent.getChildAt(position - parent.getFirstVisiblePosition())).getMessageItem();
                GroupItemInfoModel tgm = mei.getGroupItemInfoModel();
                if (tgm != null) {
                    for (Long ite : tgm.getIds()) {
                        mMsgIds.add(ite);
                    }
                } else {
                    mMsgIds.add(mei.mMsgId);
                }
                mMsgType = mei.mType;
                // Aurora xuyong 2013-12-11 modified for aurora's new feature end
                // Aurora xuyong 2013-10-13 modified for aurora's new feature end 
                // Aurora xuyong 2013-09-26 added for aurora's new feature end
                // TODO Auto-generated method stub
                mLongClickPos = position;
                // Aurora xuyong 2013-09-13 added for aurora's new feature start
                // Aurora xuyong 2013-10-21 added for aurora's new feature start
                if (!mMsgListAdapter.mIsDeleteMode) {
                    setBatchOperation();
                }
                // Aurora xuyong 2013-10-21 added for aurora's new feature end
                // Aurora xuyong 2013-09-13 added for aurora's new feature end
                return false;
            }
        });*/
        // Aurora xuyong 2014-02-11 deleted for bug #1923 end
        //Gionee <zhouyj> <2013-05-15> add for CR00810588 end
    }
    // Aurora xuyong 2013-09-26 added for aurora's new feature start
    // Aurora xuyong 2013-12-11 modified for aurora's new feature start
    private ArrayList<Long> mMsgIds = new ArrayList<Long>();
    // Aurora xuyong 2013-12-11 modified for aurora's new feature end
    private String mMsgType;
    // Aurora xuyong 2013-09-26 added for aurora's new feature end

    private void loadDraft() {
        if (mWorkingMessage.isWorthSaving()) {
            Log.w(TAG, "loadDraft() called with non-empty working message");
            return;
        }

        if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
            log("loadDraft() call WorkingMessage.loadDraft");
        }

        //Gionee <guoyx> <2013-04-20> modified for CR00797658 begin
        if (MmsApp.mGnPerfOpt2Support) {
        mWorkingMessage = WorkingMessage.loadDraft(this, mConversation, 
         new Runnable() {
            @Override
            public void run() {
                drawTopPanel(false);
                // Aurora xuyong 2015-03-03 modified for bug #11860 start
                drawBottomPanel(true);
                // Aurora xuyong 2015-03-03 modified for bug #11860 end
                updateSendButtonState();
            }
        }); 
        } else {
            mWorkingMessage = WorkingMessage.loadDraft(this, mConversation);
        }
        //Gionee <guoyx> <2013-04-20> modified for CR00797658 end
    }

    private void saveDraft(boolean isStopping) {
        if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
            LogTag.debug("saveDraft");
        }
        // TODO: Do something better here.  Maybe make discard() legal
        // to call twice and make isEmpty() return true if discarded
        // so it is caught in the clause above this one?
        if (mWorkingMessage.isDiscarded()) {
            return;
        }

        //gionee gaoj 2012-4-10 added for CR00555790 start
        if (MmsApp.mGnMessageSupport && mContactContainer != null) {
            mContactContainer.updateContacts();
        }
        //gionee gaoj 2012-4-10 added for CR00555790 end
        if (!mWaitingForSubActivity &&
                !mWorkingMessage.isWorthSaving() &&
                (!isRecipientsEditorVisible() || recipientCount() == 0)) {
            if (LogTag.VERBOSE || Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
                log("not worth saving, discard WorkingMessage and bail");
            }
            mWorkingMessage.discard(false);
            return;
        }

        mWorkingMessage.saveDraft(isStopping);
        // Aurora xuyong 2014-07-28 modified for aurora's new feature start
        /*// Aurora xuyong 2014-07-19 modified for bug #6656 start
        if (mToastForDraftSave && !mIsFromReject) {
        // Aurora xuyong 2014-07-19 modified for bug #6656 end
            Toast.makeText(this, R.string.message_saved_as_draft,
                    Toast.LENGTH_SHORT).show();
        }*/
        // Aurora xuyong 2014-07-28 modified for aurora's new feature end

        //gionee gaoj 2013-3-15 added for CR00784388 start
        // Aurora liugj 2013-11-07 deleted for hide widget start
        //MmsWidgetProvider.notifyDatasetChanged(this);
          // Aurora liugj 2013-11-07 deleted for hide widget end
        //gionee gaoj 2013-3-15 added for CR00784388 end
    }

    private boolean isPreparedForSending() {
//m0
/*
        int recipientCount = recipientCount();

        return recipientCount > 0 && recipientCount <= MmsConfig.getRecipientLimit() &&
            (mWorkingMessage.hasAttachment() ||
                    mWorkingMessage.hasText() ||
                    mWorkingMessage.hasSubject());
*/
        if (isRecipientsEditorVisible()) {
            //gionee gaoj 2012-4-10 added for CR00555790 start
            if (MmsApp.mGnMessageSupport) {
                final boolean haveRecipients = mContactContainer.haveRecipients();
                return (mSimCount > 0 || mSubCount > 0) && haveRecipients && (mWorkingMessage.hasAttachment() || mWorkingMessage.hasText());
            } else {
                //gionee gaoj 2012-4-10 added for CR00555790 end
            String recipientText = mRecipientsEditor.getText() == null? "" : mRecipientsEditor.getText().toString();
            return (mSimCount > 0 || mSubCount > 0) && (recipientText != null && !recipientText.equals("")) && (mWorkingMessage.hasAttachment() || mWorkingMessage.hasText());
            //gionee gaoj 2012-4-10 added for CR00555790 start
            }
            //gionee gaoj 2012-4-10 added for CR00555790 end
        } else {
            return (mSimCount > 0 || mSubCount > 0) && (mWorkingMessage.hasAttachment() || mWorkingMessage.hasText());
        }
//m1
    }

    private int recipientCount() {
        int recipientCount;

        // To avoid creating a bunch of invalid Contacts when the recipients
        // editor is in flux, we keep the recipients list empty.  So if the
        // recipients editor is showing, see if there is anything in it rather
        // than consulting the empty recipient list.
        if (isRecipientsEditorVisible()) {
            //gionee gaoj 2012-4-10 added for CR00555790 start
            if (MmsApp.mGnMessageSupport) {
                recipientCount = mContactContainer.getRecipientCount();
            } else {
                //gionee gaoj 2012-4-10 added for CR00555790 end
            recipientCount = mRecipientsEditor.getRecipientCount();
            //gionee gaoj 2012-4-10 added for CR00555790 start
            }
            //gionee gaoj 2012-4-10 added for CR00555790 end
        } else {
            recipientCount = getRecipients().size();
        }
        return recipientCount;
    }

    private void sendMessage(boolean bCheckEcmMode) {
       // Aurora xuyong 2014-06-10 added for aurora's new feature start
         mThumbnailWorker.clearTaskSet();
       // Aurora xuyong 2014-06-10 added for aurora's new feature end
//a0
        if (mWorkingMessage.requiresMms() && (mWorkingMessage.hasSlideshow() || mWorkingMessage.hasAttachment())) {
            if (mWorkingMessage.getCurrentMessageSize() > MmsConfig.getUserSetMmsSizeLimit(true)) {
                MessageUtils.showErrorDialog(ComposeMessageActivity.this,
                        getResourcesString(R.string.exceed_message_size_limitation),
                        getResourcesString(R.string.exceed_message_size_limitation));
                //Gionee guoyx 20121023 by CR00705464 for MTK ALPS00352418 BEGIN
                mLastButtonClickTime = -DOUBLECLICK_INTERVAL_TIME;
                //Gionee guoyx 20121023 by CR00705464 for MTK ALPS00352418 END
                updateSendButtonState();
                return;
            }
        }
//a1
        if (bCheckEcmMode) {
            // TODO: expose this in telephony layer for SDK build
            String inEcm = SystemProperties.get(TelephonyProperties.PROPERTY_INECM_MODE);
            if (Boolean.parseBoolean(inEcm)) {
                try {
                    startActivityForResult(
                            new Intent(TelephonyIntents.ACTION_SHOW_NOTICE_ECM_BLOCK_OTHERS, null),
                            REQUEST_CODE_ECM_EXIT_DIALOG);
                    return;
                } catch (ActivityNotFoundException e) {
                    // continue to send message
                    Log.e(TAG, "Cannot find EmergencyCallbackModeExitDialog", e);
                }
            }
        }

//a0
        //gionee gaoj 2012-4-10 added for CR00555790 start
        ContactList contactList = null;
        if (MmsApp.mGnMessageSupport) {
            if (isRecipientsEditorVisible()) {
                mContactContainer.updateContacts();
            }
            contactList = isRecipientsEditorVisible() ?
                    mContactContainer.constructContactsFromInput(false) : getRecipients();
        } else {
        contactList = isRecipientsEditorVisible() ?
            mRecipientsEditor.constructContactsFromInput(false) : getRecipients();
        }
        //gionee gaoj 2012-4-10 added for CR00555790 end
        mDebugRecipients = contactList.serialize();
//a1

        //gionee gaoj 2012-8-14 added for CR00623375 start
        if (MmsApp.mGnRegularlyMsgSend) {
            if (mRegularlyMain.getIsRegularly()) {
                mSendingMessage = false;
            }
        }
        //gionee gaoj 2012-8-14 added for CR00623375 end
        if (!mSendingMessage) {
            if (LogTag.SEVERE_WARNING) {
                String sendingRecipients = mConversation.getRecipients().serialize();
                if (!sendingRecipients.equals(mDebugRecipients)) {
                    String workingRecipients = mWorkingMessage.getWorkingRecipients();
                    if (!mDebugRecipients.equals(workingRecipients)) {
                        LogTag.warnPossibleRecipientMismatch("ComposeMessageActivity.sendMessage" +
                                " recipients in window: \"" +
                                mDebugRecipients + "\" differ from recipients from conv: \"" +
                                sendingRecipients + "\" and working recipients: " +
                                workingRecipients, this);
                    }
                }
                sanityCheckConversation();
            }

            // send can change the recipients. Make sure we remove the listeners first and then add
            // them back once the recipient list has settled.
            removeRecipientsListeners();

            //gionee gaoj 2012-4-10 added for CR00555790 start
            if (MmsApp.mGnMessageSupport) {
                String receiptors = mConversation.getRecipients().serialize();
                if (!receiptors.equals(mDebugRecipients)) {
                    receiptors = mWorkingMessage.getWorkingRecipients();
                }
                String[] destNumbers = TextUtils.split(receiptors, ";");
                // Aurora xuyong 2013-11-20 modified for aurora's new feature start
                try {
                    RecentContact.insertRecentContact(destNumbers);
                } catch (IllegalStateException e) {
                    e.printStackTrace();
                }
                // Aurora xuyong 2013-11-20 modified for aurora's new feature end

                //gionee gaoj 2012-8-14 added for CR00623375 start
                if (MmsApp.mGnRegularlyMsgSend) {
                    //Gionee <guoyx> <2013-07-03> modify for CR00829344 begin
                    //gionee gaoj 2012-8-23 added for CR00679908 start
                    if (mRegularlyMain.getIsRegularly() 
                           && mRegularlyMain.getCalendar() != null 
                           && mRegularlyMain.getCalendar().getTimeInMillis() <= System.currentTimeMillis()) {
                        Toast.makeText(this, this.getString(R.string.gn_time_early),
                                Toast.LENGTH_SHORT).show();
                        updateSendButtonState();
                        return;
                    }
                    //gionee gaoj 2012-8-23 added for CR00679908 end
                    //Gionee <guoyx> <2013-07-03> modify for CR00829344 end
                    if (mRegularlyMain.getIsRegularly()) {
                        long date = mRegularlyMain.getCalendar().getTimeInMillis();
                        mRegularlyMain.addTimetoAlarmManager(this, date);
                        mWorkingMessage.setRegularly(true);
                        mWorkingMessage.setRegularlyTime(date);
                    } else {
                        mWorkingMessage.setRegularly(false);
                        mWorkingMessage.setRegularlyTime(-1);
                    }
                }
                //gionee gaoj 2012-8-14 added for CR00623375 end
            }
            //gionee gaoj 2012-4-10 added for CR00555790 end
//m0
//            mWorkingMessage.send(mDebugRecipients);
            //add for gemini TODO
            if (MmsApp.mGnMultiSimMessage) {
                mWorkingMessage.sendGemini(mSelectedSimId);
            } else {
                mWorkingMessage.send(mDebugRecipients);
            }
//m1
            // Aurora xuyong 2015-02-12 added for repoter feature start
            if (mConversation != null) {
                if (mConversation.getMessageCount() <= 0) {
                    new TotalCount(this, TotalCount.MMS_MODULE_kEY, TotalCount.MSG_SEN_RP, 1).countData();
                } else {
                    new TotalCount(this, TotalCount.MMS_MODULE_kEY, TotalCount.MSG_REP_RP, 1).countData();
                }
            }
            // Aurora xuyong 2015-02-12 added for repoter feature end
            //gionee gaoj 2012-9-25 added for CR00693772 start
            if (MmsApp.mGnMessageSupport && mWorkingMessage.requiresMms()) {
                mBackgroundQueryHandler.setProgressDialog(getSendProgressDialog());
                mBackgroundQueryHandler.showProgressDialog();
            }
            //gionee gaoj 2012-9-25 added for CR00693772 end

            mSentMessage = true;
            mSendingMessage = true;
//a0
            mWaitingForSendMessage = true;
            isInitRecipientsEditor = false; // when tap fail icon, don't add recipients
//a1
            // Aurora xuyong 2014-02-28 deleted for bug #2696 start
            //addRecipientsListeners();
            // Aurora xuyong 2014-02-28 deleted for bug #2696 end
//a0
            mMsgListView.setVisibility(View.VISIBLE);
            //gionee gaoj 2012-4-10 added for CR00555790 start
            if (MmsApp.mGnMessageSupport) {
                mMsgCount++;
                mOldMsgCount++;
                // Aurora xuyong 2014-10-25 added for privacy feature start
                mShowPriMsgCount++;
                // Aurora xuyong 2014-10-25 added for privacy feature end
            }
            //gionee gaoj 2012-4-10 added for CR00555790 end
//MTK_OP01_PROTECT_START
            //add for text zoom
            //if (MmsApp.isTelecomOperator()) {
            //    setZoomVisibility(View.VISIBLE);
            //}
//MTK_OP01_PROTECT_END
//a1
        }
        //gionee gaoj 2012-6-18 added for CR00625969 start
        if (MmsApp.mGnMessageSupport) {
            updateTitle(mConversation.getRecipients());
        }
        //gionee gaoj 2012-6-18 added for CR00625969 end
        // But bail out if we are supposed to exit after the message is sent.
        if (mExitOnSent || mIsLeMei) {
          // Aurora xuyong 2014-07-14 added for aurora's new feature start
            if (operConvMap != null && operConvMap.size() > 0) {
                deleteConvByIds(operConvMap);
            }
          // Aurora xuyong 2014-07-14 added for aurora's new feature end
            finish();
        }
        //gionee gaoj 2012-6-18 added for CR00625222 star
        if (MmsApp.mEncryption) {
            mConversation.ensureThreadId();
            int encryption = Conversation.queryThreadId(ComposeMessageActivity.this, mConversation
                    .getThreadId());
            if (encryption == 1 && isRecipientsEditorVisible()) {
             // Aurora xuyong 2014-07-14 added for aurora's new feature start
                if (operConvMap != null && operConvMap.size() > 0) {
                    deleteConvByIds(operConvMap);
                }
             // Aurora xuyong 2014-07-14 added for aurora's new feature end
                finish();
            }
        }
        //gionee gaoj 2012-6-18 added for CR00625222 end

        //gionee gaoj 2012-8-14 added for CR00623375 start
        if (MmsApp.mGnRegularlyMsgSend) {
            //gionee zhouyj 2012-08-16 add for CR00678252 start 
            if(null != mLocation) {
                mLocation.onDestroy();
                mLocation = null;
            }
            //if(mPoiButton != null && View.GONE != mPoiButton.getVisibility()) {
            //    mPoiButton.setVisibility(View.GONE);
            //}
            //gionee zhouyj 2012-08-16 add for CR00678252 end 
        }
        //gionee gaoj 2012-8-14 added for CR00623375 end

        //gionee gaoj 2012-12-19 added for CR00751983 start
        // Aurora yudingmin 2014-09-12 delete for bug #8273 start
//        if (!isRecipientsEditorVisible()) {
//            int count = mMsgListAdapter.getCount();
//            mMsgListView.setSelection(count - 1);
//        }
        // Aurora yudingmin 2014-09-12 delete for bug #8273 end
        //gionee gaoj 2012-12-19 added for CR00751983 end
    }

    private void resetMessage() {
        if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
            log("resetMessage");
        }
        //gionee gaoj 2012-6-25 added for CR00625969 start
        //updateTitle(mConversation.getRecipients());
        //gionee gaoj 2012-6-25 added for CR00625969 end

        // Make the attachment editor hide its view.
        if (mAttachmentEditor != null) {
            mAttachmentEditor.hideView();
        }
        //gionee gaoj 2012-4-10 added for CR00555790 start
        if (!MmsApp.mGnMessageSupport) {
        mAttachmentEditorScrollView.setVisibility(View.GONE);
        }
        //gionee gaoj 2012-4-10 added for CR00555790 end
        

        // Hide the subject editor.
        showSubjectEditor(false);

        // We have to remove the text change listener while the text editor gets cleared and
        // we subsequently turn the message back into SMS. When the listener is listening while
        // doing the clearing, it's fighting to update its counts and itself try and turn
        // the message one way or the other.
        mTextEditor.removeTextChangedListener(mTextEditorWatcher);

        // Clear the text box.
        TextKeyListener.clear(mTextEditor.getText());

        //gionee gaoj 2012-4-10 added for CR00555790 start
        if (MmsApp.mGnMessageSupport) {
            autoRegulationMessageLayoutHeight();
        }
        //gionee gaoj 2012-4-10 added for CR00555790 end
        
        //Gionee <zhouyj> <2013-04-22> add modify for CR00800653 start
        // Focus to the text editor.
        // Aurora xuyong 2013-09-24 added for aurora;s new feature start
        mTextEditor.requestFocus();
        // Aurora xuyong 2013-09-24 added for aurora;s new feature end
        //Gionee <zhouyj> <2013-04-22> add modify for CR00800653 start
        
        mWorkingMessage.clearConversation(mConversation, false);
        mWorkingMessage = WorkingMessage.createEmpty(this);
        mWorkingMessage.setConversation(mConversation);
        // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
        /*if (isRecipientsEditorVisible()) {
            mMsgListView.addHeaderView(mMsgListViewHeader);
        }*/
        // Aurora xuyong 2013-09-13 deleted for aurora's new feature end
        hideRecipientEditor();
        //gionee gaoj 2012-6-25 added for CR00625969 start
        updateTitle(mConversation.getRecipients());
        //gionee gaoj 2012-6-25 added for CR00625969 end

        //gionee gaoj 2012-8-14 added for CR00623375 CR00679004 start
        /*if (MmsApp.mGnRegularlyMsgSend) {
            if (mRegularlyMain.getIsRegularly()) {
                mRegularlyMain.setIsRegularly(false);
                mWorkingMessage.setRegularly(false);
                mWorkingMessage.setRegularlyTime(-1);
                if (mRegButton.getVisibility() == View.VISIBLE) {
                    mRegButton.setVisibility(View.GONE);
                }
            }
        }*/
        //gionee gaoj 2012-8-14 added for CR00623375 CR00679004 end

        // gionee zhouyj 2012-08-28 add for CR00680593 start 
        if(MmsApp.mGnMessageSupport) {
            mSubjectEditorNull = false;
        }
        // gionee zhouyj 2012-08-28 add for CR00680593 end 

        //gionee gaoj 2013-1-5 added for CR00756915 start
        drawTopPanel(false);
        //gionee gaoj 2013-1-5 added for CR00756915 end
        // Aurora xuyong 2015-03-03 modified for bug #11860 start
        drawBottomPanel(true);
        // Aurora xuyong 2015-03-03 modified for bug #11860 end

        // "Or not", in this case.
        updateSendButtonState();

        // Our changes are done. Let the listener respond to text changes once again.
        mTextEditor.addTextChangedListener(mTextEditorWatcher);

        // Close the soft on-screen keyboard if we're in landscape mode so the user can see the
        // conversation.
        if (mIsLandscape) {
//m0
/*
            InputMethodManager inputMethodManager =
                (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);

            inputMethodManager.hideSoftInputFromWindow(mTextEditor.getWindowToken(), 0);
*/
            hideInputMethod();
//m1
        }

        mLastRecipientCount = 0;
        mSendingMessage = false;
        invalidateOptionsMenu();
        // update list, this must put after hideRecipientEditor(); to avoid a bug.
        startMsgListQuery(0);
   }
    // Aurora xuyong 2014-07-10 added for bug #6089 start
    private boolean mNeedReturn = false;
    // Aurora xuyong 2014-07-10 added for bug #6089 end
    private void updateSendButtonState() {
        boolean enable = false;
        // Aurora xuyong 2014-07-10 added for bug #6089 start
        if (mNeedReturn) {
            return;
        }
        // Aurora xuyong 2014-07-10 added for bug #6089 end
//m0
/*
        if (isPreparedForSending()) {
            // When the type of attachment is slideshow, we should
            // also hide the 'Send' button since the slideshow view
            // already has a 'Send' button embedded.
            if (!mWorkingMessage.hasSlideshow()) {
                enable = true;
            } else {
                mAttachmentEditor.setCanSend(true);
            }
        } else if (null != mAttachmentEditor){
            mAttachmentEditor.setCanSend(false);
        }
*/
        if (isPreparedForSending()) {
            Log.v(TAG, "updateSendButtonState(): mSimCount = " + mSimCount);
            // Aurora xuyong 2014-05-23 modified for multisim feature start
            if (MmsApp.mGnMultiSimMessage && (mSimCount > 0 || mSubCount > 0)) {
            // Aurora xuyong 2014-05-23 modified for multisim feature end
                // When the type of attachment is slideshow, we should
                // also hide the 'Send' button since the slideshow view
                // already has a 'Send' button embedded.
                //gionee gaoj 2012-4-16 added for CR00555790 start
                if (MmsApp.mGnMessageSupport) {
                    enable = true;
                } else {
                //gionee gaoj 2012-4-16 added for CR00555790 end
                if (!mWorkingMessage.hasSlideshow()) {
                    enable = true;
                } else {
                        if (mAttachmentEditor != null) {
                            mAttachmentEditor.setCanSend(true);
                        }
                }
                //gionee gaoj 2012-4-16 added for CR00555790 start
                }
                //gionee gaoj 2012-4-16 added for CR00555790 end
            } else {
                // Aurora xuyong 2014-08-29 deleted for bug #8021 start
                //if (GnPhone.phone != null) {
                // Aurora xuyong 2014-08-29 deleted for bug #8021 end
                    try {
                        //gionee gaoj 2012-4-16 added for CR00555790 start
                        // Aurora xuyong 2014-08-29 modified for bug #8021 start
                        if (MmsApp.mGnMessageSupport && GnTelephonyManager.hasIccCard()) {
                        // Aurora xuyong 2014-08-29 modified for bug #8021 end
                            enable = true;
                        } else {
                        //gionee gaoj 2012-4-16 added for CR00555790 end
                        // Aurora xuyong 2014-08-29 modified for bug #8021 start
                        if (GnTelephonyManager.hasIccCard()) { // check SIM state
                        // Aurora xuyong 2014-08-29 modified for bug #8021 end
                            if (!mWorkingMessage.hasSlideshow()) {
                                enable = true;
                            } else {
                                if (mAttachmentEditor != null) {
                                    mAttachmentEditor.setCanSend(true);
                                }
                            }
                        } else {
                            if (mAttachmentEditor != null) {
                                mAttachmentEditor.setCanSend(false);
                            }
                        }
                        //gionee gaoj 2012-4-16 added for CR00555790 start
                        }
                        //gionee gaoj 2012-4-16 added for CR00555790 end
                    } catch (Exception e) {
                        Log.w(TAG, "compose.updateSendButton()_singleSIM");
                    }
                }
            // Aurora xuyong 2014-08-29 deleted for bug #8021 start
            //}
            // Aurora xuyong 2014-08-29 deleted for bug #8021 end
        } else {
            if (mAttachmentEditor != null) {
                mAttachmentEditor.setCanSend(false);
            }
        }
//m1

        //gionee gaoj 2012-4-10 added for CR00555790 start
        if (MmsApp.mGnMessageSupport) {
          // Aurora xuyong 2014-05-23 added for multisim feature start
          // Aurora xuyong 2014-06-07 modified for bug #5449 start
            if (MmsApp.mGnMultiSimMessage && mInsertedSimCount < 2) {
          // Aurora xuyong 2014-06-07 modified for bug #5449 end
              // Aurora xuyong 2014-08-05 modified for bug #7249 start
                 if (mSIMInfo1 == null) {
                     // Aurora xuyong 2015-07-01 modified for bug #13911 start
                	 try {
	                     mSIMInfo1 = SIMInfo.getSIMInfoBySlot(ComposeMessageActivity.this
	                            , GnPhone.GEMINI_SIM_1);
	                     // Aurora xuyong 2014-11-17 added for bug #9803 start
	                     MessageUtils.addSIMInfo(mSIMInfo1);
	                     // Aurora xuyong 2014-11-17 added for bug #9803 end
                	 } catch (IllegalArgumentException e) {
                         e.printStackTrace();
                     } catch (SQLiteException e) {
                 		e.printStackTrace();
                 	 }
                     // Aurora xuyong 2015-07-01 modified for bug #13911 end
                 }
                 if (mSIMInfo2 == null) {
                     // Aurora xuyong 2015-07-01 modified for bug #13911 start
                	 try {
	                     mSIMInfo2 = SIMInfo.getSIMInfoBySlot(ComposeMessageActivity.this
	                            , GnPhone.GEMINI_SIM_2);
	                     // Aurora xuyong 2014-11-17 added for bug #9803 start
	                     MessageUtils.addSIMInfo(mSIMInfo2);
	                     // Aurora xuyong 2014-11-17 added for bug #9803 end
                	 } catch (IllegalArgumentException e) {
                         e.printStackTrace();
                     } catch (SQLiteException e) {
                 		e.printStackTrace();
                 	 }
                     // Aurora xuyong 2015-07-01 modified for bug #13911 end
                 }
                 // Aurora xuyong 2014-08-25 modified for bug #7912 start
                 // Aurora xuyong 2015-07-01 modified for bug #13930 start
                 if ((mSIMInfo1 == null || !getSimStateReady(mSIMInfo1State, 0)) 
                         && (mSIMInfo2 == null || !getSimStateReady(mSIMInfo2State, 1))) {
                 // Aurora xuyong 2015-07-01 modified for bug #13930 end
                 // Aurora xuyong 2014-08-25 modified for bug #7912 end
                     enable = false;
                 }
              // Aurora xuyong 2014-06-06 added for bug #5367 start 
                 if (mSIMInfo1 != null) {
                     mDaultCallSlot = 0;
                 } else if (mSIMInfo2 != null) {
              // Aurora xuyong 2014-08-05 modified for bug #7249 end
                     mDaultCallSlot = 1;
                 }
              // Aurora xuyong 2014-06-06 added for bug #5367 end
            }
          // Aurora xuyong 2014-05-23 added for multisim feature end
          // Aurora xuyong 2014-06-06 added for bug #5368 start
            int airplaneMode = Settings.System.getInt(this.getContentResolver(), Settings.System.AIRPLANE_MODE_ON, 0);
            if (airplaneMode == 1) {
                enable = false;
            }
          // Aurora xuyong 2014-06-06 added for bug #5368 end
            mSendMsgButton.setEnabled(enable);
            mSendMsgButton.setFocusable(enable);
          // Aurora xuyong 2014-05-23 added for multisim feature start
          // Aurora xuyong 2014-06-07 modified for bug #5449 start
            if (mInsertedSimCount < 2) {
          // Aurora xuyong 2014-06-07 modified for bug #5449 end
                mSendMsgButton.setVisibility(View.VISIBLE);
             // Aurora xuyong 2014-07-29 added for aurora's new feature start
                changedMsgContentWidth(false);
             // Aurora xuyong 2014-07-29 added for aurora's new feature end
            } else {
                mSendMsgButton.setVisibility(View.GONE);
             // Aurora xuyong 2014-07-29 added for aurora's new feature start
                changedMsgContentWidth(true);
             // Aurora xuyong 2014-07-29 added for aurora's new feature end
            }
          // Aurora xuyong 2014-05-23 added for multisim feature end
            //gionee gaoj 2013-3-21 modified for CR00787217 start
            //gionee gaoj added for CR00725602 20121201 start
              // Aurora liugj 2013-11-06 modified for fix bug-426 start 
            /*mSendMsgText.setTextColor(enable ? 
                    getResources().getColor(R.color.gn_msg_send_button_enable_color) : getResources().getColor(R.color.gn_msg_send_button_not_enable_color));*/
              // Aurora liugj 2013-11-06 modified for fix bug-426 end
            //gionee gaoj added for CR00725602 20121201 end
            //gionee gaoj 2013-3-21 modified for CR00787217 end
            // Gionee lixiaohu 2012-08-28 added for CR00681687 start
            if (MmsApp.mGnMultiSimMessage) {
             // Aurora xuyong 2014-05-23 added for multisim feature start
             // Aurora xuyong 2014-07-14 modified for aurora's new feature start
             // Aurora xuyong 2014-07-29 modified for aurora's new feature start
                mSendMsgButton1.setEnabled(enable);
                mSendMsgButton1.setFocusable(enable);
             // Aurora xuyong 2014-07-29 modified for aurora's new feature end
             // Aurora xuyong 2014-07-14 modified for aurora's new feature end
             // Aurora xuyong 2014-05-23 added for multisim feature end
             // Aurora xuyong 2014-07-14 modified for aurora's new feature start
             // Aurora xuyong 2014-07-29 modified for aurora's new feature start
                mSendMsgButton2.setEnabled(enable);
                mSendMsgButton2.setFocusable(enable);
             // Aurora xuyong 2014-07-29 modified for aurora's new feature end
             // Aurora xuyong 2014-07-14 modified for aurora's new feature end
             // Aurora xuyong 2014-06-06 added for bug #5369 start
                // Aurora xuyong 2014-07-14 modified for aurora's new feature start
                // Aurora xuyong 2014-07-29 modified for aurora's new feature start
                   if (mLastItemSlotId == 1 && mSendMsgButton2 != null && mSendMsgButton2.isEnabled()) {
                   // Aurora xuyong 2014-09-16 modified for aurora's new feature start
                       if (mSendMsgButton2.isHugeMode()) {
                           setProperSImIcon(mSendMsgButton2, mSlot2, true, false);
                       } else {
                           setProperSImIcon(mSendMsgButton2, mSlot2, true, true);
                       }
                   // Aurora xuyong 2014-09-16 modified for aurora's new feature end
                      } else {
                   // Aurora xuyong 2014-09-16 modified for aurora's new feature start
                          if (!mSendMsgButton2.isHugeMode()) {
                             setProperSImIcon(mSendMsgButton2, mSlot2, false, false);
                          } else {
                             setProperSImIcon(mSendMsgButton2, mSlot2, false, true);
                          }
                   // Aurora xuyong 2014-09-16 modified for aurora's new feature end
                      }
                   if (mLastItemSlotId == 0 && mSendMsgButton1 != null && mSendMsgButton1.isEnabled()) {
                   // Aurora xuyong 2014-09-16 modified for aurora's new feature start
                       if (mSendMsgButton1.isHugeMode()) {
                          setProperSImIcon(mSendMsgButton1, mSlot1, true, false);
                       } else {
                          setProperSImIcon(mSendMsgButton1, mSlot1, true, true);
                       }
                   // Aurora xuyong 2014-09-16 modified for aurora's new feature end
                      } else {
                   // Aurora xuyong 2014-09-16 modified for aurora's new feature start
                          if (!mSendMsgButton1.isHugeMode()) {
                              setProperSImIcon(mSendMsgButton1, mSlot1, false, false);
                          } else {
                              setProperSImIcon(mSendMsgButton1, mSlot1, false, true);
                          }
                   // Aurora xuyong 2014-09-16 modified for aurora's new feature end
                      }
                // Aurora xuyong 2014-07-29 modified for aurora's new feature end
                // Aurora xuyong 2014-07-14 modified for aurora's new feature end
             // Aurora xuyong 2014-06-06 added for bug #5369 end
             // Aurora xuyong 2014-08-25 modified for bug #7912 start
                if (mTelephonyManager == null) {
                    mTelephonyManager = GnTelephonyManager.getDefault();
                }
                // Aurora xuyong 2015-07-01 modified for bug #13930 start
                if (!getSimStateReady(mSIMInfo1State, 0)) {
                // Aurora xuyong 2015-07-01 modified for bug #13930 end
             // Aurora xuyong 2014-08-25 modified for bug #7912 end
                // Aurora xuyong 2014-05-23 modified for multisim feature start
                // Aurora xuyong 2014-07-14 modified for aurora's new feature start
                // Aurora xuyong 2014-07-29 modified for aurora's new feature start
                    mSendMsgButton1.setEnabled(false);
                // Aurora xuyong 2014-07-29 modified for aurora's new feature end
                // Aurora xuyong 2014-07-14 modified for aurora's new feature end
                // Aurora xuyong 2014-05-23 modified for multisim feature end
                }
             // Aurora xuyong 2014-08-25 modified for bug #7912 start
                // Aurora xuyong 2015-07-01 modified for bug #13930 start
                if (!getSimStateReady(mSIMInfo2State, 1)) {
                // Aurora xuyong 2015-07-01 modified for bug #13930 end
             // Aurora xuyong 2014-08-25 modified for bug #7912 end
                // Aurora xuyong 2014-07-14 modified for aurora's new feature start
                // Aurora xuyong 2014-07-29 modified for aurora's new feature start
                    mSendMsgButton2.setEnabled(false);
                // Aurora xuyong 2014-07-29 modified for aurora's new feature end
                // Aurora xuyong 2014-07-14 modified for aurora's new feature end
                }
             // Aurora xuyong 2014-05-23 added for multisim feature start
             // Aurora xuyong 2014-06-07 modified for bug #5449 start
                if (mInsertedSimCount == 2) {
             // Aurora xuyong 2014-06-07 modified for bug #5449 end
                    if (mMultiSimStub != null) {
                        if (!mMsgListAdapter.mIsDeleteMode) {
                            mMultiSimStub.setVisibility(View.VISIBLE);
                        // Aurora xuyong 2014-07-29 added for aurora's new feature start
                            changedMsgContentWidth(true);
                        // Aurora xuyong 2014-07-29 added for aurora's new feature end
                        } else {
                            mMultiSimStub.setVisibility(View.GONE);
                       // Aurora xuyong 2014-07-29 added for aurora's new feature start
                            changedMsgContentWidth(false);
                       // Aurora xuyong 2014-07-29 added for aurora's new feature end
                        }
                    }
                } else {
                    if (mMultiSimStub != null) {
                        mMultiSimStub.setVisibility(View.GONE);
                    // Aurora xuyong 2014-07-29 modified for aurora's new feature start
                        changedMsgContentWidth(false);
                    // Aurora xuyong 2014-07-29 modified for aurora's new feature end
                    }
                }
             // Aurora xuyong 2014-05-23 added for multisim feature end
            }
           // Gionee lixiaohu 2012-08-28 added for CR00681687 end        
        }/* else {
        View sendButton = showSmsOrMmsSendButton(mWorkingMessage.requiresMms());
        sendButton.setEnabled(enable);
        sendButton.setFocusable(enable);
        }*/
        //gionee gaoj 2012-4-10 added for CR00555790 end
        // Aurora xuyong 2014-07-10 added for bug #6089 start
        mNeedReturn = false;
        // Aurora xuyong 2014-07-10 added for bug #6089 end
    }

    private long getMessageDate(Uri uri) {
        if (uri != null) {
            Cursor cursor = SqliteWrapper.query(this, mContentResolver,
                    uri, new String[] { Mms.DATE }, null, null, null);
            if (cursor != null) {
                try {
                    if ((cursor.getCount() == 1) && cursor.moveToFirst()) {
                        return cursor.getLong(0) * 1000L;
                    }
                } finally {
                    cursor.close();
                }
            }
        }
        return NO_DATE_FOR_DIALOG;
    }

//m0
//    private void initActivityState(Intent intent) {
//        // If we have been passed a thread_id, use that to find our conversation.
//        long threadId = intent.getLongExtra("thread_id", 0);
//        if (threadId > 0) {
//            if (LogTag.VERBOSE) log("get mConversation by threadId " + threadId);
//            mConversation = Conversation.get(this, threadId, false);
//        } else {
//            Uri intentData = intent.getData();
//            if (intentData != null) {
//                // try to get a conversation based on the data URI passed to our intent.
//                if (LogTag.VERBOSE) log("get mConversation by intentData " + intentData);
//                mConversation = Conversation.get(this, intentData, false);
//                mWorkingMessage.setText(getBody(intentData));
//            } else {
//                // special intent extra parameter to specify the address
//                String address = intent.getStringExtra("address");
//                if (!TextUtils.isEmpty(address)) {
//                    if (LogTag.VERBOSE) log("get mConversation by address " + address);
//                    mConversation = Conversation.get(this, ContactList.getByNumbers(address,
//                            false /* don't block */, true /* replace number */), false);
//                } else {
//                    if (LogTag.VERBOSE) log("create new conversation");
//                    mConversation = Conversation.createNew(this);
//                }
//            }
//        }
//        addRecipientsListeners();
//
//        mExitOnSent = intent.getBooleanExtra("exit_on_sent", false);
//        if (intent.hasExtra("sms_body")) {
//            mWorkingMessage.setText(intent.getStringExtra("sms_body"));
//        }
//        mWorkingMessage.setSubject(intent.getStringExtra("subject"), false);
//    }
    private void initActivityState(Bundle bundle) {
        Intent intent = getIntent();
        mIsTooManyRecipients = false;
        if (bundle != null) {
            mCompressingImage = bundle.getBoolean("compressing_image", false);
            String recipientsStr = bundle.getString("recipients");
            int recipientCount = 0;
            if(recipientsStr != null){
                recipientCount = recipientsStr.split(";").length;
                mConversation = Conversation.get(this,
                    ContactList.getByNumbers(this, recipientsStr,
                            false /* don't block */, true /* replace number */), false);
            } else {
                Long threadId = bundle.getLong("thread", 0);
                mConversation = Conversation.get(this, threadId, false);
                mWorkingMessage.setConversation(mConversation);
            }
            
            mExitOnSent = bundle.getBoolean("exit_on_sent", false);
            // add for cmcc dir ui begin
            if (MmsConfig.getMmsDirMode()) {
                mExitOnSent = true;
            }
            // add for cmcc dir ui end
            mWorkingMessage.readStateFromBundle(bundle);
            if (!mCompressingImage && mConversation.hasDraft() && mConversation.getMessageCount() == 0) {
                mWorkingMessage.clearConversation(mConversation, true);
            }
            if (recipientCount > RECIPIENTS_LIMIT_FOR_SMS) {
                mIsTooManyRecipients = true;
            }
            mCompressingImage = false;
            return;
        }

        String vCardContactsIds = intent.getStringExtra("multi_export_contacts");
        long[] contactsIds = null;
        if (vCardContactsIds != null && !vCardContactsIds.equals("")) {
            String[] vCardConIds = vCardContactsIds.split(",");
            Log.e(TAG, "ComposeMessage.initActivityState(): vCardConIds.length" + vCardConIds.length);
            contactsIds = new long[vCardConIds.length];
            try {
                for (int i = 0; i < vCardConIds.length; i++) {
                    contactsIds[i] = Long.parseLong(vCardConIds[i]);
                }
            } catch (NumberFormatException e) {
                contactsIds = null;
            }
        }
        // If we have been passed a thread_id, use that to find our
        // conversation.
        long threadId = intent.getLongExtra("thread_id", 0);
        if (threadId > 0) {
            mConversation = Conversation.get(this, threadId, false);
        } else if (contactsIds != null && contactsIds.length > 0) {
            addTextVCard(contactsIds);
            mConversation = Conversation.createNew(this);
            return;
        } else {
            Uri intentData = intent.getData();

            // If intent is SEND, just create a new empty thread, otherwise Conversation.get() will
            // throw exception.
            String action = intent.getAction();
            // Aurora xuyong 2014-10-23 added for privacy feature start
            long privacy = intent.getLongExtra("is_privacy", 0l);
            // Aurora xuyong 2014-10-23 added for privacy feature end
            if (intentData != null && (TextUtils.isEmpty(action) || !action.equals(Intent.ACTION_SEND))) {
                // group-contact send message
                // try to get a conversation based on the data URI passed to our intent.
                if (intentData.getPathSegments().size() < 2) {
                   // Aurora xuyong 2014-08-07 added for bug #7304 start
                   // Aurora xuyong 2014-10-23 modified for privacy feature start
                       boolean isExist = checkConvExsitByRecipient(getStringForMultipleRecipients(intentData.getSchemeSpecificPart()), privacy);
                   // Aurora xuyong 2014-10-23 modified for privacy feature end
                       // Aurora xuyong 2014-08-07 added for bug #7304 end
                    mConversation = mConversation.get(this,
                            ContactList.getByNumbers(this,
                                    getStringForMultipleRecipients(intentData.getSchemeSpecificPart()),
                    // Aurora xuyong 2014-10-23 modified for privacy feature start
                                    false /* don't block */, true /* replace number */, privacy),
                            false, privacy);
                    // Aurora xuyong 2014-10-23 modified for privacy feature end
                    // Aurora xuyong 2014-08-07 added for bug #7304 start
                    // Aurora xuyong 2014-09-09 added for 4.4 feature start
                    Long tid = mConversation.getThreadId();
                    // Aurora xuyong 2014-09-09 added for 4.4 feature end
                    if (operConvMap != null && !operConvMap.containsKey(threadId)) {
                            // the method of that we check a conv whether it exists is it's state at the first time we get
                       // Aurora xuyong 2014-09-09 added for 4.4 feature start
                           operConvMap.put(tid, isExist);
                       // Aurora xuyong 2014-09-09 added for 4.4 feature end
                        }
                    // Aurora xuyong 2014-09-09 added for 4.4 feature start
                    if (operConvStack != null) {
                        operConvStack.push(tid);
                    }   
                    // Aurora xuyong 2014-09-09 added for 4.4 feature end
                    // Aurora xuyong 2014-08-07 added for bug #7304 end
                    // gionee zhouyj 2012-07-02 add for CR00632561 start 
                    if(MmsApp.mGnMessageSupport) {
                        if(mConversation.getRecipients().containsEmail())
                            toastConvertInfo(true);
                    }
                    // gionee zhouyj 2012-07-02 add for CR00632561 end 
                } else {
                    // Aurora xuyong 2014-10-30 modified for privacy feature start
                    mConversation = Conversation.get(this, intentData, false, privacy);
                    // Aurora xuyong 2014-10-30 modified for privacy feature end
                    mWorkingMessage.setText(getBody(intentData));
                }
                // gionee zhouyj 2012-11-10 modify for CR00725052 start 
                if (!(MmsApp.mGnMessageSupport && MmsApp.mIsSafeModeSupport)) {
                mWorkingMessage.setText(getBody(intentData));
                }
                // gionee zhouyj 2012-11-10 modify for CR00725052 end 
            } else {
                // special intent extra parameter to specify the address
                String address = intent.getStringExtra("address");
                if (!TextUtils.isEmpty(address)) {
                    mConversation = Conversation.get(this, ContactList.getByNumbers(address,
                            false /* don't block */, true /* replace number */, 0), false, 0);
                } else {
                    mConversation = Conversation.createNew(this);
                }
            }
        }
        mExitOnSent = intent.getBooleanExtra("exit_on_sent", false);
        // add for cmcc dir ui begin
        if (MmsConfig.getMmsDirMode()) {
            mExitOnSent = true;
        }
        // add for cmcc dir ui end
        if (intent.hasExtra("sms_body")) {
            String sms_body = intent.getStringExtra("sms_body");
            if (sms_body != null && sms_body.length() > MmsConfig.getMaxTextLimit()) {
                mWorkingMessage.setText(sms_body.subSequence(0, MmsConfig.getMaxTextLimit()));
            } else {
                mWorkingMessage.setText(sms_body);
            }
        }
        mWorkingMessage.setSubject(intent.getStringExtra("subject"), false);
        
        //a0
        send_sim_id = intent.getIntExtra(GnPhone.GEMINI_SIM_ID_KEY, -1);
        Log.d(TAG, "get simId from intent = " + send_sim_id);
        //a1
    }
//m1

    private void initFocus() {
        if (!mIsKeyboardOpen) {
            return;
        }

        //Gionee <guoyx> <2013-04-20> added for CR00797658 begin
        boolean isREVisible = isRecipientsEditorVisible();
        boolean isTEFocused = mTextEditor == null ? false : mTextEditor.isFocused();
        boolean isSEFocused = mSubjectTextEditor == null ? false : mSubjectTextEditor.isFocused();
        //Gionee <guoyx> <2013-04-20> added for CR00797658 end
        // If the recipients editor is visible, there is nothing in it,
        // and the text editor is not already focused, focus the
        // recipients editor.
        //gionee gaoj 2012-4-10 added for CR00555790 start
        if (MmsApp.mGnMessageSupport) {
          //Gionee <guoyx> <2013-04-20> modified for CR00797658 begin
            if (isREVisible 
                    && !isTEFocused
                    && !isSEFocused) {
                // Aurora xuyong 2013-10-19 added for aurora's new feature start
                mContactContainer.resetMode();
                // Aurora xuyong 2013-10-19 added for aurora's new feature end
                mContactContainer.requestFocus();
            } else if (mSubjectTextEditor != null
                    && !isREVisible 
                    && !isTEFocused) {
                mSubjectTextEditor.requestFocus();
            } else {
               // Aurora xuyong 2013-09-24 added for aurora;s new feature start
               mTextEditor.requestFocus();
               // Aurora xuyong 2013-09-24 added for aurora;s new feature end
            }
          //Gionee <guoyx> <2013-04-20> modified for CR00797658 end
            return;
        } else {
            //gionee gaoj 2012-4-10 added for CR00555790 end
        if (isRecipientsEditorVisible()
                && TextUtils.isEmpty(mRecipientsEditor.getText())
                && !mTextEditor.isFocused()) {
            mRecipientsEditor.requestFocus();
            return;
        }
        //gionee gaoj 2012-4-10 added for CR00555790 start
        }
        //gionee gaoj 2012-4-10 added for CR00555790 end
        // If we decided not to focus the recipients editor, focus the text editor.
       // Aurora xuyong 2013-09-24 added for aurora;s new feature start
       mTextEditor.requestFocus();
       // Aurora xuyong 2013-09-24 added for aurora;s new feature end
    }

    private final MessageListAdapter.OnDataSetChangedListener
                    mDataSetChangedListener = new MessageListAdapter.OnDataSetChangedListener() {
        public void onDataSetChanged(MessageListAdapter adapter) {
            mPossiblePendingNotification = true;
        }

        //gionee gaoj 2012-9-20 added for CR00699291 start
        private Runnable mQueryRunnable = new Runnable() {
            @Override
            public void run() {
                // TODO Auto-generated method stub
                //gionee gaoj 2012-9-25 added for CR00693772 start
                isLastContentChange = true;
                startMsgListQuery(0);
                //gionee gaoj 2012-9-25 added for CR00693772 end
                if (MmsApp.mGnRegularlyMsgSend && mDateTimeDialog != null && mDateTimeDialog.isShowing()) {
                    mDateTimeDialog.cancel();
                }
            }
        };
        //gionee gaoj 2012-9-20 added for CR00699291 end

        public void onContentChanged(MessageListAdapter adapter) {
            //gionee gaoj 2012-9-20 added for CR00699291 start
        // Aurora yudingmin 2014-09-12 delete for optimize observer start
//            mBackgroundQueryHandler.removeCallbacks(mQueryRunnable);
//            mBackgroundQueryHandler.postDelayed(mQueryRunnable, 500);
        // Aurora yudingmin 2014-09-12 delete for optimize observer start
            //gionee gaoj 2012-9-20 added for CR00699291 end
        }
    };

    private void checkPendingNotification() {
        if (mPossiblePendingNotification && hasWindowFocus()) {
            mConversation.markAsRead();
            mPossiblePendingNotification = false;
        }
    }
    // Aurora xuyong 2014-04-28 modified for bug #4560 start
    private ArrayList<GroupItemInfoModel> adaptGroupCursor(MessageListAdapter adapter, Cursor cursor, boolean isGroupMsg) {
    // Aurora xuyong 2014-04-28 modified for bug #4560 end
        // Aurora xuyong 2013-12-11 modified for aurora's new feature start
        if (cursor == null) {
            return null;
        }
        if (cursor.moveToNext()) {
            ArrayList<GroupItemInfoModel> giims = new ArrayList<GroupItemInfoModel>();
            GroupItemInfoModel giimItem = new GroupItemInfoModel();
            int position = 0;
            int count = 1;
            int preMessageDate = cursor.getInt(MessageListAdapter.COLUMN_SMS_DATE);
            int preMessageId = cursor.getInt(MessageListAdapter.COLUMN_ID);
          // Aurora xuyong 2014-06-09 modified for aurora's new feature start
            int preMessageStatus = cursor.getInt(MessageListAdapter.COLUMN_SMS_STATUS);
          // Aurora xuyong 2014-06-09 modified for aurora's new feature end
            String preAddress = cursor.getString(MessageListAdapter.COLUMN_SMS_ADDRESS);
            giimItem.setPositions(position);
            giimItem.addIds(new Long(preMessageId));
            giimItem.addStatus(preMessageStatus);
            giimItem.addAddress(preAddress);
            while (cursor.moveToNext()) {
                count = 1;
                position++;
                int currentMessageDate = cursor.getInt(MessageListAdapter.COLUMN_SMS_DATE);
                int curMessageId = cursor.getInt(MessageListAdapter.COLUMN_ID);
             // Aurora xuyong 2014-06-09 modified for aurora's new feature start
                int curMessageStatus = cursor.getInt(MessageListAdapter.COLUMN_SMS_STATUS);
             // Aurora xuyong 2014-06-09 modified for aurora's new feature end
                String curAddress = cursor.getString(MessageListAdapter.COLUMN_SMS_ADDRESS);
                while(true) {
                 // Aurora xuyong 2014-04-28 modified for bug #4560 start
                    if (currentMessageDate == preMessageDate && isGroupMsg) {
                 // Aurora xuyong 2014-04-28 modified for bug #4560 end
                        count++;
                        if (cursor.moveToNext()) {
                            position++;
                            giimItem.addIds(new Long(curMessageId));
                            giimItem.addStatus(curMessageStatus);
                            giimItem.addAddress(curAddress);
                            currentMessageDate = cursor.getInt(MessageListAdapter.COLUMN_SMS_DATE);
                            curMessageId = cursor.getInt(MessageListAdapter.COLUMN_ID);
                       // Aurora xuyong 2014-06-09 modified for aurora's new feature start
                            curMessageStatus = cursor.getInt(MessageListAdapter.COLUMN_SMS_STATUS);
                       // Aurora xuyong 2014-06-09 modified for aurora's new feature end
                            curAddress = cursor.getString(MessageListAdapter.COLUMN_SMS_ADDRESS);
                        } else {
                            giimItem.addIds(new Long(curMessageId));
                            giimItem.addStatus(curMessageStatus);
                            giimItem.addAddress(curAddress);
                            break;
                        }
                    } else {
                        giimItem.setNums(count);
                        giims.add(giimItem);
                        giimItem = new GroupItemInfoModel();
                        giimItem.setPositions(position);
                        giimItem.addIds(new Long(curMessageId));
                        giimItem.addStatus(curMessageStatus);
                        giimItem.addAddress(curAddress);
                        preMessageDate = currentMessageDate;
                        count = 1;
                        break;
                    }
                }
            }
            giimItem.setNums(count);
            giims.add(giimItem);
            giimItem = null;
            return giims;
        } else {
            return null;
        }
    }
    // Aurora xuyong 2013-12-11 modified for aurora's new feature end
    // Aurora xuyong 2015-10-09 added for aurora's new feature start
    private final class AttachQueryHandler extends AsyncQueryHandler {
    	
    	public AttachQueryHandler(ContentResolver contentResolver) {
            super(contentResolver);
        }
    	
    	@Override
        protected void onQueryComplete(int token, Object cookie, Cursor cursor) {
                // Aurora xuyong 2015-10-20 added for aurora's new feature start
                if (cursor == null || cursor.getCount() <= 0) {
                    mImageList.setVisibility(View.GONE);
                } else {
                    mImageList.setVisibility(View.VISIBLE);
                }
                // Aurora xuyong 2015-10-20 added for aurora's new feature end
        	if (mAttachImageAdapter == null) {
        		mAttachImageAdapter = new AuroraHorizontalListAdapter(ComposeMessageActivity.this, cursor);
            	mAttachImageAdapter.setHandler(mMessageListItemHandler);
        	} else {
        		mAttachImageAdapter.changeCursor(cursor);
        	}
        	mImageList.setAdapter(mAttachImageAdapter);
	    	mAttachImageAdapter.notifyDataSetChanged();
    	}
    	
    }
    // Aurora xuyong 2015-10-09 added for aurora's new feature end
//m0
//    private final class BackgroundQueryHandler extends AsyncQueryHandler {
    private final class BackgroundQueryHandler extends BaseProgressQueryHandler {
//m1
        public BackgroundQueryHandler(ContentResolver contentResolver) {
            super(contentResolver);
        }
        
        //aurora yudingmin 2014-08-21 added for bug #7738 start
        // Aurora xuyong 2014-08-22 modified for bug #7739 & #7853 start
        // Aurora yudingmin 2014-08-30 modified for bug 8029 start
        private void adaptGroupCursorInBack(final MessageListAdapter adapter, final Cursor cursor, final boolean isGroupMsg, final Object cookie, final boolean need, final int token)
        // Aurora xuyong 2014-08-22 modified for bug #7739 & #7853 end
        // Aurora yudingmin 2014-08-30 modified for bug 8029 end
        {
            final Handler uiHandler = new Handler();
            Runnable runnable = new Runnable() {
                public void run() {
                    final ArrayList<GroupItemInfoModel> giims;
                    // Aurora yudingmin 2014-08-30 modified for bug 8029 start
                    if(need){
                        giims = adaptGroupCursor(mMsgListAdapter, cursor, isGroupMsg);
                    } else {
                        giims = null;
                    }
                    // Aurora yudingmin 2014-08-30 modified for bug 8029 end
                    // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 start
                    if (!mIsInitialized) {
                        mMsgListAdapter.getAllAndNone(cursor);
                    }
                    // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 end
                    uiHandler.post(new Runnable() {
                        public void run() {
                            // Aurora yudingmin 2014-08-30 modified for bug 8029 start
                            messageListQueryDone(cookie, cursor, giims, token);
                            // Aurora yudingmin 2014-08-30 modified for bug 8029 end
                        }
                    });
                }
            };
            Thread backThread = new Thread(runnable, "adaptGroupCursorInBack");
            backThread.start();
        }
        //aurora yudingmin 2014-08-21 added for bug #7738 end

        @Override
        protected void onQueryComplete(int token, Object cookie, Cursor cursor) {
            //gionee gaoj 2012-10-12 added for CR00711168 start
            if (MmsApp.mIsSafeModeSupport) {
                mMsgListView.setVisibility(View.GONE);
                if (cursor != null && !cursor.isClosed()) {
                    cursor.close();
                }
                // gionee zhouyj 2012-11-08 add for CR00724680 start 
                if(progress()) {
                    dismissProgressDialog();
                }
                // gionee zhouyj 2012-11-08 add for CR00724680 start 
                // gionee zhouyj 2012-11-07 add for CR00723348 start 
                if (mMsgListAdapter.mIsDeleteMode) {
                    onFinishMultiChoose();
                }
                // gionee zhouyj 2012-11-07 add for CR00723348 end 
                return;
            }
            //gionee gaoj 2012-10-12 added for CR00711168 end
            switch(token) {
/*
                    if (cursor != null) {
                        int newSelectionPos = -1;
                        long targetMsgId = getIntent().getLongExtra("select_id", -1);
                        if (targetMsgId != -1) {
                            cursor.moveToPosition(-1);
                            long msgId = 0L;
                            while (cursor.moveToNext()) {
                                msgId = cursor.getLong(COLUMN_ID);
                                if (msgId == targetMsgId) {
                                    newSelectionPos = cursor.getPosition();
                                    break;
                                }
                            }
                        }

                        //add for multi-delete
                        Log.i(TAG, "compose.onContentChanged(): onContentChanged()");
                        if (mMsgListAdapter.mIsDeleteMode) {
                            if (mMsgListAdapter.getCount() < cursor.getCount()) {
                                mSelectedAll.setChecked(false);
                            }
                            mMsgListAdapter.initListMap(cursor);
                        }

                        changeDeleteMode();
                        mMsgListAdapter.changeCursor(cursor);
                        if (newSelectionPos != -1) {
                            mMsgListView.setSelection(newSelectionPos);
                        }

                        // Once we have completed the query for the message history, if
                        // there is nothing in the cursor and we are not composing a new
                        // message, we must be editing a draft in a new conversation (unless
                        // mSentMessage is true).
                        // Show the recipients editor to give the user a chance to add
                        // more people before the conversation begins.

                        //Modified !isRecipientsEditorVisible() to isRecipientsEditorVisible for "Use Message Number" feature
                        if (cursor.getCount() == 0 && isRecipientsEditorVisible() && !mSentMessage) {
                            initRecipientsEditor();
                            isInitRecipientsEditor = true;
                            if (mRecipientsAvatar != null) {
                                mRecipientsAvatar.setVisibility(View.GONE);
                            }
                        } else {
                             // Related to ALPS00049425 & ALPS00051531.
                             // The conversation that thread id <= 0, is a draft-only sms. But a draft-only
                             // mms has a valid thread id, because the draft cache must be related to thread
                             // id.
                            if (!isRecipientsEditorVisible()) {
                                mRecipientsAvatar.setVisibility(View.VISIBLE);
                            }
                        }

                        // FIXME: freshing layout changes the focused view to an unexpected
                        // one, set it back to TextEditor forcely.
                        if (cursor.getCount() > 0) {
                            if (!(isSubjectEditorVisible() && mSubjectTextEditor.hasFocus())) {
                                mTextEditor.requestFocus();
                            }
                        }

                        // 181 for 121767
                        if (mWorkingMessage.hasSlideshow()){
                            getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE |
                                 WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
                        }
                    }

*/
                 // Aurora yudingmin 2014-08-30 added for bug 8029 start
                case DELETE_MESSAGE_LIST_QUERY_TOKEN:
                // Aurora yudingmin 2014-08-30 added for bug 8029 end
                    // Aurora yudingmin 2014-09-03 added for init position start
                case INIT_MESSAGE_LIST_QUERY_TOKEN:
                    // Aurora yudingmin 2014-09-03 added for init position end
                case MESSAGE_LIST_QUERY_TOKEN:
                    //Gionee <zhouyj> <2013-07-05> modify for CR00827955 begin
                    if (MmsApp.mGnVoiceReadMsgSupport && isResume()) {
                        stopVoiceHelperService();
                        setStopServiceBtnGone();
                    }
                    //Gionee <zhouyj> <2013-07-05> modify for CR00827955 begin
                    if (cursor == null) {
                        Log.w(TAG, "onQueryComplete, cursor is null.");
                        // Aurora xuyong 2014-07-04 added for reject featrue start
                        if (mIsFromReject) {
                          // Aurora xuyong 2014-07-14 added for aurora's new feature start
                            if (operConvMap != null && operConvMap.size() > 0) {
                                deleteConvByIds(operConvMap);
                            }
                          // Aurora xuyong 2014-07-14 added for aurora's new feature end
                            ComposeMessageActivity.this.finish();
                        }
                        // Aurora xuyong 2014-07-04 added for reject featrue end
                        return;
                    }
                    // Aurora xuyong 2014-07-04 added for reject featrue start
                    if ((mIsFromReject || mAddToBlackList) && cursor.getCount() <= 0) {
                        mAddToBlackList = false;
                       // Aurora xuyong 2014-07-14 added for aurora's new feature start
                        if (operConvMap != null && operConvMap.size() > 0) {
                            deleteConvByIds(operConvMap);
                        }
                       // Aurora xuyong 2014-07-14 added for aurora's new feature end
                        ComposeMessageActivity.this.finish();
                    }
                    // Aurora xuyong 2014-07-04 added for reject featrue end
                    // check consistency between the query result and 'mConversation'
                    // Aurora xuyong 2014-04-28 modified for bug #4560 start
                    boolean isGroupConv = false;
                    if (mConversation != null) {
                       // Aurora xuyong 2014-06-13 modified for aurora's new feature start
                        if (mContactContainer != null && mContactContainer.getVisibility() == View.VISIBLE) {
                            isGroupConv = mContactContainer.getContactsCount() > 1;
                        } else {
                            isGroupConv = mConversation.getRecipients().size() > 1;
                        }
                       // Aurora xuyong 2014-06-13 modified for aurora's new feature end
                    }
                    Log.e("Mms/Compose", "isGroupConv = " + isGroupConv);
                    //aurora yudingmin 2014-08-21 modify for bug #7738 start
                    ArrayList<GroupItemInfoModel> giims = null;
                    if(isGroupConv) {
                        if(cursor.getCount() < 500) {
                            // Aurora xuyong 2014-08-22 modified for bug #7739 & #7853 start
                            giims  = adaptGroupCursor(mMsgListAdapter, cursor, isGroupConv);
                            if (!mIsInitialized) {
                                mMsgListAdapter.getAllAndNone(cursor);
                            }
                            // Aurora xuyong 2014-08-22 modified for bug #7739 & #7853 end
                        } else
                        {
                          // Aurora xuyong 2014-08-22 modified for bug #7739 & #7853 start
                            // Aurora yudingmin 2014-08-30 modified for bug 8029 start
                            adaptGroupCursorInBack(mMsgListAdapter, cursor, isGroupConv, cookie, true, token);
                            // Aurora yudingmin 2014-08-30 modified for bug 8029 end
                          // Aurora xuyong 2014-08-22 modified for bug #7739 & #7853 end
                            return;
                        }
                    } else {
                        // Aurora yudingmin 2014-08-30 modified for bug 8029 start
                        if(cursor.getCount() < 500) {
                            // Aurora xuyong 2014-08-22 modified for bug #7739 & #7853 start
                            giims  = null;
                            if (!mIsInitialized) {
                                mMsgListAdapter.getAllAndNone(cursor);
                            }
                            // Aurora xuyong 2014-08-22 modified for bug #7739 & #7853 end
                        } else
                        {
                          // Aurora xuyong 2014-08-22 modified for bug #7739 & #7853 start
                            adaptGroupCursorInBack(mMsgListAdapter, cursor, isGroupConv, cookie, false, token);
                          // Aurora xuyong 2014-08-22 modified for bug #7739 & #7853 end
                            return;
                        }
                        // Aurora yudingmin 2014-08-30 modified for bug 8029 end
                       // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 end
                    }
                 // Aurora yudingmin 2014-08-30 modified for bug 8029 start
                    messageListQueryDone(cookie, cursor, giims, token);
                 // Aurora yudingmin 2014-08-30 modified for bug 8029 end
                    return;
                    //aurora yudingmin 2014-08-21 modify for bug #7738 end

                case ConversationList.HAVE_LOCKED_MESSAGES_TOKEN:
                    ArrayList<Long> threadIds = (ArrayList<Long>)cookie;
                    ConversationList.confirmDeleteThreadDialog(
                            new ConversationList.DeleteThreadListener(threadIds,
                                mBackgroundQueryHandler, ComposeMessageActivity.this),
                            threadIds,
                            cursor != null && cursor.getCount() > 0,
                            ComposeMessageActivity.this);
                    break;
            }
        }

        //aurora yudingmin 2014-08-22 added for bug #7826 start
        private void updateSIMInfo(Cursor cursor)
        {
            // Aurora xuyong 2014-06-06 added for bug #5369 start
            // when we share images or videoes by sms, sms crash!
            // Aurora xuyong 2014-06-07 modified for upper reasaon start
             if (cursor != null && cursor.moveToLast()) {
                 int simid = -1;
                 simid = cursor.getInt(MessageListAdapter.COLUMN_SMS_SIMID);
                 if (simid == -1) {
                     simid = cursor.getInt(MessageListAdapter.COLUMN_MMS_SIMID);
                 }
                 // Aurora xuyong 2014-008-04 modified for bug #6969 start
               // Aurora xuyong 2014-08-05 modified for bug #7249 start
                 final int fSimId = simid;
                 new Thread(new Runnable() {
                     
                     @Override
                     public void run() {
                         int lastItemSlot = SIMInfo.getSlotById(ComposeMessageActivity.this, fSimId);
                         Message msg = mHandler.obtainMessage(UPDATE_SEND_STATE);
                         msg.arg1 = lastItemSlot;
                         msg.sendToTarget();
                     }
                     
                 }).start();
               // Aurora xuyong 2014-08-05 modified for bug #7249 end
             }
            // Aurora xuyong 2014-06-07 modified for upper reasaon end
            // Aurora xuyong 2014-06-06 added for bug #5369 end
        }
        //aurora yudingmin 2014-08-22 added for bug #7826 end
        
        //aurora yudingmin 2014-08-21 added for bug #7738 start
     // Aurora yudingmin 2014-08-30 modified for bug 8029 start
        private void messageListQueryDone(Object cookie,  Cursor cursor, ArrayList<GroupItemInfoModel> giims, int token) {
            if(token == DELETE_MESSAGE_LIST_QUERY_TOKEN){
                if(progress()){
                    dismissProgressDialog();
                }
            }
            // Aurora yudingmin 2014-08-30 modified for bug 8029 end
            //aurora yudingmin 2014-08-22 added for bug #7826 start
            updateSIMInfo(cursor);
            //aurora yudingmin 2014-08-22 added for bug #7826 end
            // Aurora xuyong 2014-04-28 modified for bug #4560 end
            long tid = (Long) cookie;

            if (LogTag.VERBOSE) {
                log("##### onQueryComplete: msg history result for threadId " + tid);
            }
            if (tid != mConversation.getThreadId()) {
                log("onQueryComplete: msg history query result is for threadId " +
                        tid + ", but mConversation has threadId " +
                        mConversation.getThreadId() + " starting a new query");
                startMsgListQuery();
             // Aurora yudingmin 2014-08-30 added for bug 8029 start
                if(!cursor.isClosed()){
                    cursor.close();
                }
             // Aurora yudingmin 2014-08-30 added for bug 8029 end
                return;
            }
            // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
            /*Contact contact = mConversation.getRecipients().get(0);
            
            if (contact.existsInDatabase() || mConversation.getRecipients().size() > 1) {
                mMsgListView.removeHeaderView(mMsgListViewHeader);
            }*/
            // Aurora xuyong 2013-09-13 deleted for aurora's new feature end
            // check consistency b/t mConversation & mWorkingMessage.mConversation
            ComposeMessageActivity.this.sanityCheckConversation();

            int newSelectionPos = -1;
            long targetMsgId = getIntent().getLongExtra("select_id", -1);
            if (targetMsgId != -1) {
                cursor.moveToPosition(-1);
                while (cursor.moveToNext()) {
                    long msgId = cursor.getLong(COLUMN_ID);
                    if (msgId == targetMsgId) {
                        newSelectionPos = cursor.getPosition();
                        break;
                    }
                }
            }

            if (mNeedUpdateContactForMessageContent) {
                updateContactCache(cursor);
                mNeedUpdateContactForMessageContent = false;
            }

            //a0
            //add for multi-delete
// Aurora yudingmin 2014-08-30 deleted for bug 8029 start
//            Log.i(TAG, "compose.onContentChanged(): onContentChanged()");
//            if (mMsgListAdapter.mIsDeleteMode) {
//                mMsgListAdapter.initListMap(cursor);
//                // Aurora xuyong 2013-09-26 added for aurora's new feature start
//                // Aurora xuyong 2013-12-11 modified for aurora's new feature start
//                mMsgListAdapter.initListMap(cursor, mMsgIds, mMsgType);
//                mMsgIds.clear();
//                // Aurora xuyong 2013-12-11 modified for aurora's new feature end
//                // Aurora xuyong 2013-09-26 added for aurora's new feature end
//            }
// Aurora yudingmin 2014-08-30 deleted for bug 8029 end

            changeDeleteMode();
            //a1

            if (mMsgListView.getVisibility() == View.GONE)
                mMsgListView.setVisibility(View.VISIBLE);
            //aurora yudingmin 2014-08-22 modified for bug #7671 start
            // Aurora yudingmin 2014-09-03 added for init position start
            boolean isNeedSetSelection = false;
            int offset = mMsgListAdapter.getCount() - mMsgListView.getFirstVisiblePosition(); 
            if(token == INIT_MESSAGE_LIST_QUERY_TOKEN){
                if(mMsgListAdapter.getCount() > 0
                        && cursor.getCount() > mMsgListAdapter.getCount()){
                    isNeedSetSelection = true;
                }
            }
            // Aurora yudingmin 2014-09-03 added for init position end
            mMsgListAdapter.changeData(giims, cursor);
            // Aurora yudingmin 2014-09-03 added for init position start
            // if we don't scroll, we needn't to set selection value here;
            // Aurora xuyong 2014-09-12 modified for uptimize start
            if(isNeedSetSelection && mHasScrolled){
            // Aurora xuyong 2014-09-12 modified for uptimize end
                mMsgListView.setAdapter(mMsgListAdapter);
                mMsgListView.setSelection(mMsgListAdapter.getCount() - offset);
            }
            // Aurora yudingmin 2014-09-03 added for init position end
            //aurora yudingmin 2014-08-22 modified for bug #7671 end

//MTK_OP01_PROTECT_START
            //add for text zoom
            //if (MmsApp.isTelecomOperator()) {
            //   if (cursor.getCount() > 0) {
            //        setZoomVisibility(View.VISIBLE);
            //    }
            //}
//MTK_OP01_PROTECT_END
            // Aurora xuyong 2013-10-11 modified for aurora's new feature start 
            // Aurora xuyong 2013-10-15 modified for aurora's new feature start 
            if (mLongClickPos != -1 || newSelectionPos != -1) {
                if (newSelectionPos != -1) {
                    mMsgListView.setSelection(newSelectionPos);
                // Aurora xuyong 2013-12-27 deleted for aurora]s new feature start
                //} else if (mLongClickPos != -1) {
                //    mMsgListView.setSelection(mLongClickPos);
                // Aurora xuyong 2013-12-27 deleted for aurora]s new feature end
                }
            // Aurora xuyong 2013-10-15 modified for aurora's new feature end
            // Aurora xuyong 2014-07-15 modified for bug #4823 start
            }/* else {
                mMsgListView.setSelection(mMsgListView.getBottom());
            // Aurora xuyong 2013-10-11 modified for aurora's new feature end
            }*/
            // Aurora xuyong 2014-07-15 modified for bug #4823 end
            // Adjust the conversation's message count to match reality. The
            // conversation's message count is eventually used in
            // WorkingMessage.clearConversation to determine whether to delete
            // the conversation or not.
            //gionee gaoj 2012-4-10 added for CR00555790 start
            if (MmsApp.mGnMessageSupport) {
                mMsgCount = mMsgListAdapter.getCount();
                if (mMsgCount != 0 && mOldMsgCount != mMsgCount && !isRecipientsEditorVisible()) {
                    mOldMsgCount = mMsgCount;
                    updateTitle(getRecipients());
                }
            }
            //gionee gaoj 2012-4-10 added for CR00555790 end
            mConversation.setMessageCount(mMsgListAdapter.getCount());

            // Once we have completed the query for the message history, if
            // there is nothing in the cursor and we are not composing a new
            // message, we must be editing a draft in a new conversation (unless
            // mSentMessage is true).
            // Show the recipients editor to give the user a chance to add
            // more people before the conversation begins.
            if (cursor.getCount() == 0 && !isRecipientsEditorVisible() && !mSentMessage) {// go back
                initRecipientsEditor();
            }

            // FIXME: freshing layout changes the focused view to an unexpected
            // one, set it back to TextEditor forcely.
           // Aurora xuyong 2013-09-24 added for aurora;s new feature start
           // Aurora xuyong 2014-03-31 modified for aurora's new feature start
           // Aurora xuyong 2014-04-04 deleted for aurora's new feature start
           //if (!mContactContainerNeedFocus) {
           //    mTextEditor.requestFocus();
           //}
           //mContactContainerNeedFocus = false;
           // Aurora xuyong 2014-04-04 deleted for aurora's new feature end
           // Aurora xuyong 2014-03-31 modified for aurora's new feature end
           // Aurora xuyong 2013-09-24 added for aurora;s new feature end

            mConversation.blockMarkAsRead(false);

            invalidateOptionsMenu();    // some menu items depend on the adapter's count
            //gionee gaoj 2012-5-22 removed for CR00601002 start
            //gionee gaoj 2012-5-22 removed for CR00601002 end
            //Aurora xuyong 2014-08-16 modified for aurora's new feature start
            if(MmsApp.mGnMessageSupport/* && mFirstLongClick*/) {
            //Aurora xuyong 2014-08-16 modified for aurora's new feature end
//                mMsgListAdapter.changeSelectedState(mMsgItem.mType.equals("sms") ? mMsgItem.mMsgId : -mMsgItem.mMsgId);
//                mMsgListAdapter.changeSelectedStaredState(mMsgItem);
                /*mDeleteImageButton.setEnabled(false);
                mDeleteImageButton.setImageTextEnabled(false);
                if (MmsApp.mLightTheme) {
                    mDeleteImageButton.setImageResource(R.drawable.gn_com_delete_unuse_bg);
                } else {
                    mDeleteImageButton.setImageResource(R.drawable.gn_com_delete_unuse_dark_bg);
                }*/
                // Aurora xuyong 2013-09-26 added for aurora's new feature start
                // Aurora xuyong 2014-01-07 modified for aurora's new feature start
                // Aurora xuyong 2014-08-22 deleted for bug #7739 & #7853 start
                //initMap(cursor, mMsgListAdapter.getInCursorPosition(mLongClickPos));
                // Aurora xuyong 2014-08-22 deleted for bug #7739 & #7853 end
                // Aurora xuyong 2014-01-07 modified for aurora's new feature end
                // Aurora xuyong 2013-09-26 added for aurora's new feature end
//                updateSelectMap(mCurrentPos);
                /*setMulImageButton(true);*/
                updateSelectionMenu();
                // gionee zhouyj 2012-06-25 modify for CR00627803 start 
                //Aurora xuyong 2014-08-16 deleted for aurora's new feature start
                //mFirstLongClick = false;
                //Aurora xuyong 2014-08-16 deleted for aurora's new feature end
                // Aurora xuyong 2013-11-29 modified for bug #978 start
                // Aurora xuyong 2013-12-11 modified for aurora's new feature start
                if (mMsgListAdapter.getSelectedNumber() > 0 && mMsgListAdapter.getSelectedNumber() >= mMsgListAdapter.getChildCount()) {
                // Aurora xuyong 2013-12-11 modified for aurora's new feature end
                // Aurora xuyong 2013-11-29 modified for bug #978 end
                    isSelectedAll = true;
                } else {
                    isSelectedAll = false;
                }
                // gionee zhouyj 2012-06-25 modify for CR00627803 end 
                // gionee zhouyj 2013-04-04 add for CR00793342 start 
                // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
                /*if (mSelectAll != null) {
                    mSelectAll.setEnabled(true);
                }*/
                // Aurora xuyong 2013-09-13 deleted for aurora's new feature end
                // gionee zhouyj 2013-04-04 add for CR00793342 end
            }
            //gionee gaoj 2012-7-14 added for CR00640282 start
            // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 start
            mSelectMap = mMsgListAdapter.getSelectedMap();
            // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 end
            if (mMsgListAdapter.mIsDeleteMode && cursor.getCount() > mSelectMap.size()) {
                for (int i = mSelectMap.size(); i < cursor.getCount(); i++) {
                    mSelectMap.put(i, false);
                }
            }
            //gionee gaoj 2012-7-14 added for CR00640282 end

            //gionee gaoj 2012-9-25 added for CR00693772 start
            if (progress() && isLastContentChange) {
                isLastContentChange = false;
                dismissProgressDialog();
            }
            //gionee gaoj 2012-9-25 added for CR00693772 end
            // Aurora xuyong 2013-10-21 added for bug #172 start
            refreshBottomMenu();
            // Aurora xuyong 2013-10-21 added for bug #172 end
            // Aurora xuyong 2014-08-14 added for aurora's new feature start
            if (mIsInitialized) {
                mIsInitialized = false;
                // Aurora yudingmin 2014-09-03 modified for init position start
                // Aurora xuyong 2015-07-22 modified for bug #14233 start
                // 20 is the quick query result count limit
                if (cursor != null && cursor.getCount() == 20) {
                	startMsgListQuery(INIT_MESSAGE_LIST_QUERY_TOKEN, 0);
                // Aurora xuyong 2015-08-04 added for bug #15242 start
                } else {
                	mMsgListAdapter.getAllAndNone(cursor);
                // Aurora xuyong 2015-08-04 added for bug #15242 end
                }
                // Aurora xuyong 2015-07-22 modified for bug #14233 end
                // Aurora yudingmin 2014-09-03 modified for init position end
            }
            // Aurora xuyong 2014-08-14 added for aurora's new feature end
        }
        //aurora yudingmin 2014-08-21 added for bug #7738 end

        // Scan Sms body and update contact cache
        private void updateContactCache(Cursor cursor) {
            if (cursor != null) {
                Set<SpannableString> msgs = new HashSet<SpannableString>();
                cursor.moveToPosition(-1);
                while (cursor.moveToNext()) {
                    String smsBody = cursor.getString(MessageListAdapter.COLUMN_SMS_BODY);

                    if (smsBody == null) {
                        continue;
                    }

                    SpannableString msg = new SpannableString(smsBody);
                    msgs.add(msg);
                }
                // update the contact cache in an async thread to avoid ANR
                updateContactCacheAsync(msgs);
            }
        }

        private void updateContactCacheAsync(final Set<SpannableString> msgs) {
            new Thread(new Runnable() {
                public void run() {
                    Set<String> uriSet = new HashSet<String>();
                    for (SpannableString msg : msgs) {
                        // Linkify.addLinks(msg, Linkify.ALL);
                        List<String> uris = MessageUtils.extractUris(msg.getSpans(0, msg.length(),
                                URLSpan.class));
                        for (String uri : uris) {
                            uriSet.add(uri);
                        }
                    }
                    for (String uri : uriSet) {
                        String[] body = uri.toLowerCase().split("tel:");
                        if (body.length > 1) {
                            Contact.get(body[1].trim(), false);
                        }
                    }
                }
            }).start();
        }

        @Override
        protected void onDeleteComplete(int token, Object cookie, int result) {
            switch(token) {
                case ConversationList.DELETE_CONVERSATION_TOKEN:
//m0
/*
                    mConversation.setMessageCount(0);
                    // fall through
*/
                    try {
                        if(GnPhone.phone != null) {
                            if(GnPhone.isTestIccCard()) {
                                Log.d(TAG, "All messages has been deleted, send notification...");
                                GnSmsManager.getDefault().setSmsMemoryStatus(true);
                            }
                        } else {
                            Log.d(TAG, "Telephony service is not available!");
                        }
                    } catch(Exception ex) {
                        Log.e(TAG, "" + ex.getMessage());
                    }
                    // Update the notification for new messages since they
                    // may be deleted.
                    MessagingNotification.nonBlockingUpdateNewMessageIndicator(
                            ComposeMessageActivity.this, false, false);
                    // Update the notification for failed messages since they
                    // may be deleted.
                    updateSendFailedNotification();
                    MessagingNotification.updateDownloadFailedNotification(ComposeMessageActivity.this);
                    if (mMsgListAdapter.mIsDeleteMode) {
                        changeDeleteMode();
                    }
                    if (progress()) {
                        dismissProgressDialog();
                    }
                     // gionee zhouyj 2012-07-05 add for CR00637457 start
                    if (mMsgListAdapter.mIsDeleteMode) {
                        onFinishMultiChoose();
                    }
                     // gionee zhouyj 2012-07-05 add for CR00637457 end
                    break;
//m1
                case DELETE_MESSAGE_TOKEN:
                     // Aurora xuyong 2014-05-08 added for aurora's new feature start     
                     mThumbnailWorker.clearTaskSet();
                     // Aurora xuyong 2014-05-08 added for aurora's new feature end
//m0
/*
                    // Update the notification for new messages since they
                    // may be deleted.
                    MessagingNotification.nonBlockingUpdateNewMessageIndicator(
                            ComposeMessageActivity.this, false, false);
                    // Update the notification for failed messages since they
                    // may be deleted.
                    updateSendFailedNotification();
*/
                    Log.d(TAG, "onDeleteComplete(): before update mConversation, ThreadId = " + mConversation.getThreadId());
                    mConversation = Conversation.upDateThread(ComposeMessageActivity.this, mConversation.getThreadId(), false, mConversation.getPrivacy());
                    // Aurora yudingmin 2014-10-08 added for contact change start
                    registerContactObserver();
                    // Aurora yudingmin 2014-10-08 added for contact change end
                    mThreadCountManager.isFull(mThreadId, ComposeMessageActivity.this, 
                            ThreadCountManager.OP_FLAG_DECREASE);
                    // Update the notification for new messages since they
                    // may be deleted.
                    MessagingNotification.nonBlockingUpdateNewMessageIndicator(
                            ComposeMessageActivity.this, false, false);
                    // Update the notification for failed messages since they
                    // may be deleted.
                    updateSendFailedNotification();
                    MessagingNotification.updateDownloadFailedNotification(ComposeMessageActivity.this);
                    Log.d(TAG, "onDeleteComplete(): MessageCount = " + mConversation.getMessageCount() + 
                            ", ThreadId = " + mConversation.getThreadId());
                    // gionee zhouyj 2012-08-31 add for CR00664323 start 
                    if(MmsApp.mGnMessageSupport) {
                        if (mMsgCount == 1 || mDeleteAllMessages || mConversation.getMessageCount() <= 0 || mConversation.getThreadId() <= 0l) {
                            mDeleteAllMessages = false;
                            // Aurora xuyong 2014-05-08 modified for bug #4695 start
                            if (!mConversation.hasDraft()) {
                             // Aurora xuyong 2014-07-14 added for aurora's new feature start
                                if (operConvMap != null && operConvMap.size() > 0) {
                                    deleteConvByIds(operConvMap);
                                }
                             // Aurora xuyong 2014-07-14 added for aurora's new feature end
                                finish();
                            }
                            // Aurora xuyong 2014-05-08 modified for bug #4695 end
                        }
                    } else {
                    // gionee zhouyj 2012-08-31 add for CR00664323 end 
                    if (mConversation.getMessageCount() <= 0 || mConversation.getThreadId() <= 0l) {
                       // Aurora xuyong 2014-07-14 added for aurora's new feature start
                        if (operConvMap != null && operConvMap.size() > 0) {
                            deleteConvByIds(operConvMap);
                        }
                       // Aurora xuyong 2014-07-14 added for aurora's new feature end
                        finish();
                    }
                    // gionee zhouyj 2012-08-31 add for CR00664323 start 
                    }
                    // gionee zhouyj 2012-08-31 add for CR00664323 end 
                    if (progress()) {
                        // Aurora yudingmin 2014-08-30 modified for bug 8029 start
//                        dismissProgressDialog();
                        // Aurora yudingmin 2014-09-17 modified for bug 8355 start
                        startMsgListQuery(DELETE_MESSAGE_LIST_QUERY_TOKEN, 500);
                        // Aurora yudingmin 2014-09-17 modified for bug 8355 end
                     // Aurora yudingmin 2014-08-30 modified for bug 8029 end
                    }
                    
                    if (mMsgListAdapter.mIsDeleteMode) {
                        onFinishMultiChoose();
                    } else {
                        startMsgListQuery();
                    }
//m1
                    break;
            }
            // If we're deleting the whole conversation, throw away
            // our current working message and bail.
            if (token == ConversationList.DELETE_CONVERSATION_TOKEN) {
                mWorkingMessage.discard();

                // Rebuild the contacts cache now that a thread and its associated unique
                // recipients have been deleted.
                Contact.init(ComposeMessageActivity.this);

                // Make sure the conversation cache reflects the threads in the DB.
                Conversation.init(ComposeMessageActivity.this);
                // Aurora xuyong 2014-07-14 added for aurora's new feature start
                if (operConvMap != null && operConvMap.size() > 0) {
                    deleteConvByIds(operConvMap);
                }
                // Aurora xuyong 2014-07-14 added for aurora's new feature end
                finish();
            }
        }
    }

    private void showSmileyDialog() {
        if (mSmileyDialog == null) {
            int[] icons = SmileyParser.DEFAULT_SMILEY_RES_IDS;
            String[] names = getResources().getStringArray(
                    SmileyParser.DEFAULT_SMILEY_NAMES);
            final String[] texts = getResources().getStringArray(
                    SmileyParser.DEFAULT_SMILEY_TEXTS);

            final int N = names.length;

            List<Map<String, ?>> entries = new ArrayList<Map<String, ?>>();
            for (int i = 0; i < N; i++) {
                // We might have different ASCII for the same icon, skip it if
                // the icon is already added.
                boolean added = false;
                for (int j = 0; j < i; j++) {
                    if (icons[i] == icons[j]) {
                        added = true;
                        break;
                    }
                }
                if (!added) {
                    HashMap<String, Object> entry = new HashMap<String, Object>();

                    entry. put("icon", icons[i]);
                    entry. put("name", names[i]);
                    entry.put("text", texts[i]);

                    entries.add(entry);
                }
            }

            final SimpleAdapter a = new SimpleAdapter(
                    this,
                    entries,
                    R.layout.smiley_menu_item,
                    new String[] {"icon", "name", "text"},
                    new int[] {R.id.smiley_icon, R.id.smiley_name, R.id.smiley_text});
            SimpleAdapter.ViewBinder viewBinder = new SimpleAdapter.ViewBinder() {
                public boolean setViewValue(View view, Object data, String textRepresentation) {
                    if (view instanceof ImageView) {
                        Drawable img = getResources().getDrawable((Integer)data);
                        ((ImageView)view).setImageDrawable(img);
                        return true;
                    }
                    return false;
                }
            };
            a.setViewBinder(viewBinder);

            AuroraAlertDialog.Builder b = new AuroraAlertDialog.Builder(this);

            b.setTitle(getString(R.string.menu_insert_smiley));

            b.setCancelable(true);
            b.setAdapter(a, new DialogInterface.OnClickListener() {
                @SuppressWarnings("unchecked")
                public final void onClick(DialogInterface dialog, int which) {
                    HashMap<String, Object> item = (HashMap<String, Object>) a.getItem(which);

                    String smiley = (String)item.get("text");
                    if (mSubjectTextEditor != null && mSubjectTextEditor.hasFocus()) {
                        mSubjectTextEditor.append(smiley);
                    } else {
                        mTextEditor.append(smiley);
                    }

                    dialog.dismiss();
                }
            });

            mSmileyDialog = b.create();
        }

        mSmileyDialog.show();
    }

    public void onUpdate(final Contact updated) {
        // Using an existing handler for the post, rather than conjuring up a new one.
        mMessageListItemHandler.post(new Runnable() {
            public void run() {
                if (isRecipientsEditorVisible()) {
                    //gionee gaoj 2012-4-10 added for CR00555790 start
                    if (MmsApp.mGnMessageSupport) {
                        String recip = mContactContainer.getText().toString();
                        if (recip.endsWith(",") || recip.contains(updated.getNumber())) {
                            ContactList re = mContactContainer.constructContactsFromInput(false);
                            updateTitle(re);
                        }
                    } else {
                        //gionee gaoj 2012-4-10 added for CR00555790 end
                    String recipientsString = mRecipientsEditor.getText().toString();
                    if (recipientsString.endsWith(",") || recipientsString.contains(updated.getNumber())) {
                        ContactList recipients = mRecipientsEditor.constructContactsFromInput(false);
                        mRecipientsEditor.populate(recipients);
                        updateTitle(recipients);
                        if (mRecipientsEditor.hasFocus()) {
                            recipientsString = mRecipientsEditor.getText().toString();
                            mRecipientsEditor.setSelection(recipientsString.length());
                        }
                    }
                    //gionee gaoj 2012-4-10 added for CR00555790 start
                    }
                    //gionee gaoj 2012-4-10 added for CR00555790 end
                } else {
                    ContactList recipients = getRecipients();
                    updateTitle(recipients);

                    // The contact information for one (or more) of the recipients has changed.
                    // Rebuild the message list so each MessageItem will get the last contact info.
                    ComposeMessageActivity.this.mMsgListAdapter.notifyDataSetChanged();
                    if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
                        log("[CMA] onUpdate contact updated: " + updated);
                        log("[CMA] onUpdate recipients: " + recipients);
                    }
                }
            }
        });
    }

    private void addRecipientsListeners() {
        Contact.addListener(this);
    }

    private void removeRecipientsListeners() {
        Contact.removeListener(this);
    }

    private void clearPendingProgressDialog() {
        // remove any callback to display a progress spinner
        mAttachmentEditorHandler.removeCallbacks(mShowProgressDialogRunnable);
        // clear the dialog so any pending dialog.dismiss() call can be avoided
        if (mProgressDialog != null && mProgressDialog.isShowing()) {
            mProgressDialog.dismiss();
        }
    }

    public static Intent createIntent(Context context, long threadId) {
        Intent intent = new Intent(context, ComposeMessageActivity.class);

        if (threadId > 0) {
            intent.setData(Conversation.getUri(threadId));
        }

        return intent;
    }

    private String getBody(Uri uri) {
        if (uri == null) {
            return null;
        }
        String urlStr = uri.getSchemeSpecificPart();
        if (!urlStr.contains("?")) {
            return null;
        }
        urlStr = urlStr.substring(urlStr.indexOf('?') + 1);
        String[] params = urlStr.split("&");
        for (String p : params) {
            if (p.startsWith("body=")) {
                try {
                    return URLDecoder.decode(p.substring(5), "UTF-8");
                } catch (UnsupportedEncodingException e) { }
            }
        }
        return null;
    }
//a0
    public static final int REQUEST_CODE_ATTACH_RINGTONE  = 20;
    public static final int REQUEST_CODE_ATTACH_VCARD     = 21;
    public static final int REQUEST_CODE_TEXT_VCARD       = 22;
    public static final int REQUEST_CODE_MULTI_SAVE       = 23;
    public static final int REQUEST_CODE_LOAD_DRAFT       = 24;
    public static final int REQUEST_CODE_CHOOSE_SDCARD    = 25;
    //Gionee <zhouyj> <2013-05-09> add for CR00810588 begin
    public static final int REQUEST_CODE_VOICE_HELPER     = 26;
    //Gionee <zhouyj> <2013-05-09> add for CR00810588 end

    private static final int MENU_SAVE_MESSAGE_TO_SIM   = 32;
    private static final int MENU_PREVIEW               = 33;
    private static final int MENU_SEND_SMS              = 34;
    private static final int MENU_ADD_TO_BOOKMARK       = 35;

    private static final int DEFAULT_LENGTH             = 40;
    private static final int RECIPIENTS_LIMIT_FOR_SMS   = MmsConfig.getSmsRecipientLimit();

    private static final String VCARD_INTENT            = "com.android.contacts.pickphoneandemail";
    private static final String FOR_MULTIDELETE         = "ForMultiDelete";
    private static final String NUMBER_ADD_CONTACT_ACTION ="android.intent.action.INSERT_OR_EDIT";

    // for save message to sim card
    private static final int SIM_SELECT_FOR_SEND_MSG                    = 1;
    private static final int SIM_SELECT_FOR_SAVE_MSG_TO_SIM             = 2;
    private static final int MSG_QUIT_SAVE_MESSAGE_THREAD               = 100;
    private static final int MSG_SAVE_MESSAGE_TO_SIM                    = 102;
    private static final int MSG_SAVE_MESSAGE_TO_SIM_AFTER_SELECT_SIM   = 104;
    private static final int MSG_SAVE_MESSAGE_TO_SIM_SUCCEED            = 106;
    private static final int MSG_SAVE_MESSAGE_TO_SIM_FAILED_GENERIC     = 108;
    private static final int MSG_SAVE_MESSAGE_TO_SIM_FAILED_SIM_FULL    = 110;
    private static final String SELECT_TYPE                             = "Select_type";

    //add for multi-delete
    /*private TextView mSelectedConvCount;
    private View mDeletePanel;              // View containing the delete and cancel buttons
    private View mSelectPanel;              // View containing the select all check box
    private ImageButton mSelectAllButton;
    private ImageButton mDeleteButton;
    private ImageButton mCancelButton;
    private boolean mIsSelectedAll;*/

    //add for gemini
    private int mSelectedSimId;

    //add for Gemini Enhancement
    private View mRecipientsAvatar;         // View Recipients stub
//    private ContactHeaderWidget mContactHeader;
    private ImageButton mPickContacts;      // title bar button
    private ImageButton mJumpToContacts;    // title bar button
    private int mSimCount;
    private List<SIMInfo> mSimInfoList;
    // Aurora xuyong 2015-04-02 added for android 5.0+ new feature start
    private int mSubCount;
    // Aurora xuyong 2015-08-29 modified for bug #15792 start
    private int mPreSubCount;
    // Aurora xuyong 2015-08-29 modified for bug #15792 end
    // Aurora xuyong 2015-04-02 added for android 5.1+ new feature start
    private List<SubscriptionInfo> mSubInfoList;
    // Aurora xuyong 2015-04-02 added for android 5.1+ new feature end
    // Aurora xuyong 2015-04-02 added for android 5.0+ new feature end
    private int mAssociatedSimId;
    private long mMessageSimId;
    private long mDataConnectionSimId;
    private StatusBarManager mStatusBarManager;
    private ComponentName mComponentName;

    private boolean mIsTooManyRecipients;   // Whether the recipients are too many
    private boolean isInitRecipientsEditor = true;    // true, init mRecipientsEditor and add recipients;
                                                      // false, init mRecipientsEditor, but recipients
    private boolean mWaitingForSendMessage;

    private AuroraAlertDialog mSIMSelectDialog;
    private AuroraAlertDialog mQuickTextDialog;
    private AuroraAlertDialog mDetailDialog;
    private AuroraAlertDialog mSendDialog;

    private static final String STR_RN = "\\r\\n"; // for "\r\n"
    private static final String STR_CN = "\n"; // the char value of '\n'
    public static boolean mDestroy = false;
    private boolean misPickContatct = false;
    private ThreadCountManager mThreadCountManager = ThreadCountManager.getInstance();
    private Long mThreadId = -1l;

    private ArrayList<String> mURLs = new ArrayList<String>();
    private String mSizeLimitTemp;
    private int mMmsSizeLimit;
    private final String ARABIC = "ar";
    private static GnCellConnMgr mCellMgr = null;
    private static int mCellMgrRegisterCount = 0;
    private Handler mIndicatorHandler;
    //Gionee <guoyx> <2013-07-03> modify for CR00829344 begin
    private static WeakReference<ComposeMessageActivity> sCompose = null;
    //Gionee <guoyx> <2013-07-03> modify for CR00829344 end
    private Handler mSaveMsgHandler = null;
    private Thread mSaveMsgThread = null;
    private boolean mSendButtonCanResponse = true;    // can click send button
    boolean mClickCanResponse = true;         // can click button or some view items
    
    private ActionMode mDeleteActionMode;

    //a0
    //add this can send msg from a marked sim card which is delivered in Intent.
    private int send_sim_id = -1;
    //a1

    private MessageItem mMsgItem = null;
    private Handler mUiHandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            switch (msg.what) {
            case MSG_SAVE_MESSAGE_TO_SIM_SUCCEED:
                Toast.makeText(ComposeMessageActivity.this, R.string.save_message_to_sim_successful, Toast.LENGTH_SHORT).show();
                break;

            case MSG_SAVE_MESSAGE_TO_SIM_FAILED_GENERIC:
                Toast.makeText(ComposeMessageActivity.this, R.string.save_message_to_sim_unsuccessful, Toast.LENGTH_SHORT).show();
                break;

            case MSG_SAVE_MESSAGE_TO_SIM_FAILED_SIM_FULL:
                Toast.makeText(ComposeMessageActivity.this, 
                        getString(R.string.save_message_to_sim_unsuccessful) + ". " + getString(R.string.sim_full_title), 
                        Toast.LENGTH_SHORT).show();
                break;

            case MSG_SAVE_MESSAGE_TO_SIM:
                String type = (String)msg.obj;
                long msgId = msg.arg1;
                saveMessageToSim(type, msgId);
                break;

            default:
                Log.d(TAG, "inUIHandler msg unhandled.");
                break;
            }
        }
    };

    private final class SaveMsgThread extends Thread {
        private String msgType = null;
        private long msgId = 0;
        public SaveMsgThread(String type, long id) {
            msgType = type;
            msgId = id;
        }
        public void run() {
            Looper.prepare();
            if (null != Looper.myLooper()) {
                mSaveMsgHandler = new SaveMsgHandler(Looper.myLooper());
            }
            Message msg = mSaveMsgHandler.obtainMessage(MSG_SAVE_MESSAGE_TO_SIM);
            msg.arg1 = (int)msgId;
            msg.obj = msgType;
            if (MmsApp.mGnMultiSimMessage && (mSimCount > 1 || mSubCount > 1)) {
                mUiHandler.sendMessage(msg);
            } else {
                mSaveMsgHandler.sendMessage(msg);
            }
            Looper.loop();
        }
    }

    private final class SaveMsgHandler extends Handler {
        public SaveMsgHandler(Looper looper) {
            super(looper);
        }

        @Override
        public void handleMessage(Message msg) {
            switch (msg.what) {
                case MSG_QUIT_SAVE_MESSAGE_THREAD: {
                    Log.v(MmsApp.TXN_TAG, "exit save message thread");
                    getLooper().quit();
                    break;
                }

                case MSG_SAVE_MESSAGE_TO_SIM: {
                    String type = (String)msg.obj;
                    long msgId = msg.arg1;
                    //saveMessageToSim(type, msgId);
                    getMessageAndSaveToSim(type, msgId);
                    break;
                }

                case MSG_SAVE_MESSAGE_TO_SIM_AFTER_SELECT_SIM: {
                    Intent it = (Intent)msg.obj;
                    getMessageAndSaveToSim(it);
                    break;
                }

                default:
                    break;
            }
        }
    }

    private void saveMessageToSim(String msgType, long msgId) {
        Log.d(MmsApp.TXN_TAG, "save message to sim, message type:" + msgType 
                + "; message id:" + msgId + "; sim count:" + mSimCount);

        Intent intent = new Intent();
        intent.putExtra("message_type", msgType);
        intent.putExtra("message_id", msgId);
        intent.putExtra(SELECT_TYPE, SIM_SELECT_FOR_SAVE_MSG_TO_SIM);
        showSimSelectedDialog(intent);
    }

    private void getMessageAndSaveToSim(Intent intent) {
        Log.v(MmsApp.TXN_TAG, "get message and save to sim, selected sim id = " + mSelectedSimId);
        String msgType = intent.getStringExtra("message_type");
        long msgId = intent.getLongExtra("message_id", 0);
        if (msgType == null) {
            //mSaveMsgHandler.sendEmptyMessage(MSG_SAVE_MESSAGE_TO_SIM_FAILED_GENERIC);
            mUiHandler.sendEmptyMessage(MSG_SAVE_MESSAGE_TO_SIM_FAILED_GENERIC);            
            return;
        }
        getMessageAndSaveToSim(msgType, msgId);
    }

    private void getMessageAndSaveToSim(String msgType, long msgId){
        int result = 0;
        MessageItem msgItem = getMessageItem(msgType, msgId, true);
        if (msgItem == null || msgItem.mBody == null) {
            Log.e(MmsApp.TXN_TAG, "getMessageAndSaveToSim, can not get Message Item.");
            return;
        }
        
        String scAddress = null;
   
        SmsManager smsManager = SmsManager.getDefault();
        ArrayList<String> messages = null;
        messages = smsManager.divideMessage(msgItem.mBody);

        int smsStatus = 0;
        long timeStamp = 0;
        if (msgItem.isReceivedMessage()) {
            smsStatus = SmsManager.STATUS_ON_ICC_READ;
            timeStamp = msgItem.mSmsDate;
            scAddress = msgItem.getServiceCenter();
        } else if (msgItem.isSentMessage()) {
            smsStatus = SmsManager.STATUS_ON_ICC_SENT;
        } else if (msgItem.isFailedMessage()) {
            smsStatus = SmsManager.STATUS_ON_ICC_UNSENT;
        } else {
            Log.w(MmsApp.TXN_TAG, "Unknown sms status");
        }

        if (scAddress == null) {
            if (MmsApp.mGnMultiSimMessage) {
                scAddress = GnTelephonyManagerEx.getDefault().getScAddress(SIMInfo.getSlotById(this, mSelectedSimId));
            } else {
                scAddress = GnTelephonyManagerEx.getDefault().getScAddress(0);
            }
        }

        Log.d(MmsApp.TXN_TAG, "\t scAddress\t= " + scAddress);
        Log.d(MmsApp.TXN_TAG, "\t Address\t= " + msgItem.mAddress);
        Log.d(MmsApp.TXN_TAG, "\t msgBody\t= " + msgItem.mBody);
        Log.d(MmsApp.TXN_TAG, "\t smsStatus\t= " + smsStatus);
        Log.d(MmsApp.TXN_TAG, "\t timeStamp\t= " + timeStamp);


        if (MmsApp.mGnMultiSimMessage) {
            int slotId = -1;
            if (mSimCount == 1 || mSubCount == 1) {
                slotId = mSimInfoList.get(0).mSlot;
            } else {
                slotId = SIMInfo.getSlotById(this, mSelectedSimId);
            }
            Log.d(MmsApp.TXN_TAG, "\t slot Id\t= " + slotId);

            result = GnGeminiSmsManager.copyTextMessageToIccCardGemini(scAddress, 
                    msgItem.mAddress, messages, smsStatus, timeStamp, slotId);
        } else {
            //TODO this default has error in the Qualcomm maybe need to modify the gnframework. Gionee 20130107 by guoyx
            result = GnSmsManager.getDefault().copyTextMessageToIccCard(scAddress, 
                    msgItem.mAddress, messages, smsStatus, timeStamp);
        }
        // Aurora xuyong 2013-11-15 modified for S4 adapt start
        if (result == 0/*SmsManager.RESULT_ERROR_SUCCESS*/) {
        // Aurora xuyong 2013-11-15 modified for S4 adapt end
            Log.d(MmsApp.TXN_TAG, "save message to sim succeed.");
            mUiHandler.sendEmptyMessage(MSG_SAVE_MESSAGE_TO_SIM_SUCCEED);  
        // Aurora xuyong 2013-11-15 modified for S4 adapt start          
        } else if (result == 7/*SmsManager.RESULT_ERROR_SIM_MEM_FULL*/) {
        // Aurora xuyong 2013-11-15 modified for S4 adapt end
            Log.w(MmsApp.TXN_TAG, "save message to sim failed: sim memory full.");
            mUiHandler.sendEmptyMessage(MSG_SAVE_MESSAGE_TO_SIM_FAILED_SIM_FULL);
        } else {
            Log.w(MmsApp.TXN_TAG, "save message to sim failed: generic error.");
            mUiHandler.sendEmptyMessage(MSG_SAVE_MESSAGE_TO_SIM_FAILED_GENERIC);
        }
        mSaveMsgHandler.sendEmptyMessageDelayed(MSG_QUIT_SAVE_MESSAGE_THREAD, 5000);
    }

    private boolean isRestrictedType(long msgId){
        PduBody body = PduBodyCache.getPduBody(this,
                ContentUris.withAppendedId(Mms.CONTENT_URI, msgId));
        if (body == null) {
            return false;
        }

        int partNum = body.getPartsNum();
        for(int i = 0; i < partNum; i++) {
            PduPart part = body.getPart(i);
            int width = 0;
            int height = 0;
            String type = new String(part.getContentType());

            int mediaTypeStringId;
            if (ContentType.isVideoType(type)) {
                mediaTypeStringId = R.string.type_video;
            } else if (ContentType.isAudioType(type)) {
                mediaTypeStringId = R.string.type_audio;
            } else if (ContentType.isImageType(type)) {
                mediaTypeStringId = R.string.type_picture;
                InputStream input = null;
                try {
                    input = this.getContentResolver().openInputStream(part.getDataUri());
                    BitmapFactory.Options opt = new BitmapFactory.Options();
                    opt.inJustDecodeBounds = true;
                    BitmapFactory.decodeStream(input, null, opt);
                    width = opt.outWidth;
                    height = opt.outHeight;
                } catch (FileNotFoundException e) {
                    // Ignore
                    Log.e(TAG, "FileNotFoundException caught while opening stream", e);
                } finally {
                    if (null != input) {
                        try {
                            input.close();
                        } catch (IOException e) {
                            // Ignore
                            Log.e(TAG, "IOException caught while closing stream", e);
                        }
                    }
                }
            } else {
                continue;
            }
            if (!GnContentType.isRestrictedType(type) || width > MmsConfig.getMaxRestrictedImageWidth()
                    || height > MmsConfig.getMaxRestrictedImageHeight()){
                if (WorkingMessage.sCreationMode == WorkingMessage.RESTRICTED_TYPE){
                    Resources res = getResources();
                    String mediaType = res.getString(mediaTypeStringId);
                    MessageUtils.showErrorDialog(ComposeMessageActivity.this, res.getString(R.string.unsupported_media_format, mediaType)
                            , res.getString(R.string.select_different_media, mediaType));
                }
            return true;
            }
        }
        return false;
    }

    /*private void initMessageSettings() {
        Context otherAppContext = null;
        SharedPreferences sp = null;
        try {
            otherAppContext = this.createPackageContext("com.android.mms", Context.CONTEXT_IGNORE_SECURITY);
        } catch (Exception e) {
            Log.e(TAG, "ConversationList NotFoundContext");
        }
        if (otherAppContext != null) {
            sp = otherAppContext.getSharedPreferences("com.android.mms_preferences", MODE_WORLD_READABLE);
        }
        String mSizeLimitTemp = null;
        int mMmsSizeLimit = 0;
        if (sp != null) {
            mSizeLimitTemp = sp.getString("pref_key_mms_size_limit", "300");
        }
        if (0 == mSizeLimitTemp.compareTo("100")) {
            mMmsSizeLimit = 100;
        } else if (0 == mSizeLimitTemp.compareTo("200")) {
            mMmsSizeLimit = 200;
        } else {
            mMmsSizeLimit = 300;
        }
        MmsConfig.setUserSetMmsSizeLimit(mMmsSizeLimit);
        
        //gionee gaoj 2012-4-28 added for CR00555790 start
        if (MmsApp.mGnMessageSupport) {
            mIsInit = true;
            // gionee zhouyj 2012-05-17 add for CR00601523 start
            if (sp != null) {
                mSignatureEnable = sp.getBoolean("pref_key_accessories_signature", false);
                //Gionee <zhouyj> <2013-05-15> add for CR00810588 begin
                /*if (MmsApp.mGnVoiceReadMsgSupport) {
                    mVoiceReadMsgEnable = sp.getBoolean("pref_key_voice_read", false);
                }*/
                //Gionee <zhouyj> <2013-05-15> add for CR00810588 end
            /*}
            sp = getSharedPreferences("com.gionee.mms.signature_prefences", AuroraActivity.MODE_PRIVATE);
            if (sp != null) {
                mSignatureContent = sp.getString("signature", null);
            }
            
            if(mSignatureContent == null ) {
                mSignatureEnable = false;
            }
            // gionee zhouyj 2012-05-17 add for CR00601523 start
        }
        //gionee gaoj 2012-4-28 added for CR00555790 end
    }*/

//a1
//Li Lian
//a0
    Runnable mGetSimInfoRunnable = new Runnable() {
        public void run() {
            if (!Utils.hasLollipop()) {
                if (mIsLeMei) {
                    getSimInfoListForLeMei();
                } else {
                    getSimInfoList();
                }
            } else {
                getSubInfoList();
            }
            //gionee gaoj 2012-12-18 added for CR00745515 start
            // Aurora xuyong 2014-12-30 deleted for bug #10809 start
            /*setCheckTwoSim();*/
            // Aurora xuyong 2014-12-30 deleted for bug #10809 end
            //gionee gaoj 2012-12-18 added for CR00745515 end
        }
    };

    //add for multi-delete
    private void changeDeleteMode() {
        if (!mMsgListAdapter.mIsDeleteMode) {
            mMsgListAdapter.clearList();
            //Aurora xuyong 2014-08-16 added for aurora's new feature start
            mSelectMap.clear();
            // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 start
            mMsgIds.clear();
            // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 end
            //Aurora xuyong 2014-08-16 added for aurora's new feature end
            markCheckedState(false);
        }
    }

    private void markCheckedState(boolean checkedState) {
        mMsgListAdapter.setItemsValue(checkedState, null);
        /*if (mSelectedConvCount != null) {
            mSelectedConvCount.setText(Integer.toString(mMsgListAdapter.getSelectedNumber()));
        }*/
        //gionee gaoj 2012-4-10 added for CR00555790 start
        /*if (MmsApp.mGnMessageSupport) {
            
        } else {
            //gionee gaoj 2012-4-10 added for CR00555790 end
        mDeleteButton.setEnabled(checkedState);
        //gionee gaoj 2012-4-10 added for CR00555790 start
        }*/
        //gionee gaoj 2012-4-10 added for CR00555790 end
        int count = mMsgListView.getChildCount();
        //gionee gaoj 2012-4-10 added for CR00555790 start
        if (MmsApp.mGnMessageSupport) {
            ViewGroup layout = null;
            int childCount = 0;
            View view = null;
            // Aurora xuyong 2013-09-13 added for aurora's new feature start
            View subView = null;
            // Aurora xuyong 2013-09-13 added for aurora's new feature end
            // Aurora xuyong 2015-04-23 added for aurora's new feature start
            View subSubView = null;
            // Aurora xuyong 2015-04-23 added for aurora's new feature end
            for (int i = 0; i < count; i++) {
                layout = (ViewGroup) mMsgListView.getChildAt(i);
                childCount = layout.getChildCount();

                for (int j = 0; j < childCount; j++) {
                    view = layout.getChildAt(j);
                    // Aurora xuyong 2013-09-13 added for aurora's new feature start
                    int subChildCount;
                    // Aurora xuyong 2014-01-16 modified for aurora's new feature start
                    if (view instanceof LinearLayout || view instanceof RelativeLayout) {
                          subChildCount = ((ViewGroup) view).getChildCount();
                          for (int m = 0; m < subChildCount; m++) {
                              subView = ((ViewGroup) view).getChildAt(m);
                    // Aurora xuyong 2014-01-16 modified for aurora's new feature end
                              // Aurora xuyong 2014-01-06 modified for aurora's new feature start
                              // in case of incoming message
                              if (subView instanceof AuroraCheckBox) {
                                  ((AuroraCheckBox) subView).auroraSetChecked(checkedState, true);
                              // Aurora xuyong 2014-01-06 modified for aurora's new feature end
                                  break;
                              }
                              // Aurora xuyong 2015-04-23 added for aurora's new feature start
                              // in case of outgoing message
                              if (subView instanceof RelativeLayout) {
                                  int subCount = ((ViewGroup) subView).getChildCount();
                                  for (int n = 0; n < subChildCount; n++) {
                                      subSubView = ((ViewGroup) subView).getChildAt(n);
                                      if (subSubView instanceof AuroraCheckBox) {
                                          ((AuroraCheckBox) subSubView).auroraSetChecked(checkedState, true);
                                          break;
                                      }
                                  }
                              }
                              // Aurora xuyong 2015-04-23 added for aurora's new feature end
                          }
                    // Aurora xuyong 2013-09-13 added for aurora's new feature end
                    }
                }
            }
        } else {
            //gionee gaoj 2012-4-10 added for CR00555790 end
        MessageListItem item = null;
        for (int i = 0; i < count; i++) {
            item = (MessageListItem) mMsgListView.getChildAt(i);
            item.setSelectedBackGroud(checkedState);
        }
        //gionee gaoj 2012-4-10 added for CR00555790 start
        }
        //gionee gaoj 2012-4-10 added for CR00555790 end
    }

    private Uri mRestrictedMidea = null;
    private boolean mRestrictedAppend = false;
    private int mRestrictedType = WorkingMessage.TEXT;

    private void showConfirmDialog(Uri uri, boolean append, int type, int messageId) {
        mRestrictedMidea = uri;
        mRestrictedAppend = append;
        mRestrictedType = type;
        new AuroraAlertDialog.Builder(ComposeMessageActivity.this)
        .setTitle(R.string.unsupport_media_type)
        //Gionee <Gaoj> <2013-05-20> delete for CR00809727 begin
        /*.setIconAttribute(android.R.attr.alertDialogIcon)*/
        //Gionee <Gaoj> <2013-05-20> delete for CR00809727 end
        .setMessage(messageId)
        .setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
            public final void onClick(DialogInterface dialog, int which) {
                if (mRestrictedMidea == null || mRestrictedType == WorkingMessage.TEXT || mWorkingMessage.isDiscarded()){
                    return;
                }
                int createMode = WorkingMessage.sCreationMode;
                WorkingMessage.sCreationMode = 0;
                int result = mWorkingMessage.setAttachment(mRestrictedType, mRestrictedMidea, mRestrictedAppend);
                if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
                    log("Restricted Midea: dataUri=" + mRestrictedMidea);
                }
                if (mRestrictedType == WorkingMessage.IMAGE && (result == WorkingMessage.IMAGE_TOO_LARGE ||
                    result == WorkingMessage.MESSAGE_SIZE_EXCEEDED)) {
                    if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
                        log("addImage: resize image " + mRestrictedMidea);
                    }
                    MessageUtils.resizeImageAsync(ComposeMessageActivity.this,
                            mRestrictedMidea, mAttachmentEditorHandler, mResizeImageCallback, mRestrictedAppend);
                    WorkingMessage.sCreationMode = createMode;
                    return;
                }
                WorkingMessage.sCreationMode = createMode;
                int typeId = R.string.type_picture;
                if (mRestrictedType == WorkingMessage.AUDIO) {
                    typeId = R.string.type_audio;
                } else if (mRestrictedType == WorkingMessage.VIDEO) {
                    typeId = R.string.type_video;
                }
                handleAddAttachmentError(result, typeId);
            }
        })
        .setNegativeButton(android.R.string.cancel, null)
        .show();
    }
    private Uri mCreationUri = null;
    private boolean mCreationAppend = false;

    //Gionee <Gaoj> <2013-05-20> modified for CR00809727 begin
    private void addAudio(final Uri uri, final boolean append) {
        //Gionee <Gaoj> <2013-05-20> modified for CR00809727 end
        int result = mWorkingMessage.setAttachment(WorkingMessage.AUDIO, uri, append);
        if (result == WorkingMessage.WARNING_TYPE){
            //Gionee <Gaoj> <2013-05-20> modified for CR00809727 begin
            /*showConfirmDialog(uri, false, WorkingMessage.AUDIO, R.string.confirm_restricted_audio);*/
            runOnUiThread(new Runnable() {
                public void run() {
                    showConfirmDialog(uri, append, WorkingMessage.AUDIO, R.string.confirm_restricted_audio);
                }
            });
            //Gionee <Gaoj> <2013-05-20> modified for CR00809727 end
            return;
        }
        handleAddAttachmentError(result, R.string.type_audio);
    }
    
    private void addTextVCard(long[] contactsIds) {
        Log.i(TAG, "compose.addTextVCard(): contactsIds.length() = " + contactsIds.length);
        String textVCard = TextUtils.isEmpty(mTextEditor.getText())? "": "\n";
        StringBuilder sb = new StringBuilder("");
        for (long contactId : contactsIds) {
            if (contactId == contactsIds[contactsIds.length-1]) {
                sb.append(contactId);
            } else {
                sb.append(contactId + ",");
            }
        }
        String selection = Data.CONTACT_ID + " in (" + sb.toString() + ")";

        Log.i(TAG, "compose.addTextVCard(): selection = " + selection);
        Uri dataUri = Uri.parse("content://com.android.contacts/data");
        Cursor cursor = getContentResolver().query(
            dataUri, // URI
            new String[]{Data.CONTACT_ID, Data.MIMETYPE, Data.DATA1}, // projection
            selection, // selection
            null, // selection args
            RawContacts.SORT_KEY_PRIMARY); // sortOrder
        if (cursor != null) {
            textVCard = getVCardString(cursor, textVCard);
            insertText(mTextEditor, textVCard);
            cursor.close();
        }
    }
    
    private void addFileAttachment(String type, Uri uri, boolean append) {
        
        if (!addFileAttachment(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI, type, uri, append)) {
            if (!addFileAttachment(MediaStore.Video.Media.EXTERNAL_CONTENT_URI, type, uri, append)) {
                if (!addFileAttachment(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, type, uri, append)) {
                    Log.i(TAG, "This file is not in media store(audio, video or image)," +
                            "attemp to add it like file uri");
                    addAttachment(type, (Uri) uri, append);
                }
            }
        } 
    }
    
    private boolean addFileAttachment(Uri mediaStoreUri, String type, Uri uri, boolean append) {
        String path = uri.getPath();
        if (path != null) {
            Cursor c = getContentResolver().query(mediaStoreUri, 
                    new String[] {MediaStore.MediaColumns._ID, Audio.Media.MIME_TYPE}, MediaStore.MediaColumns.DATA + "=?",
                    new String[] {path}, null);
            if (c != null) {
                try {
                    if (c.moveToFirst()) {
                        Uri contentUri = Uri.withAppendedPath(mediaStoreUri, c.getString(0));
                        Log.i(TAG, "Get id in MediaStore:" + c.getString(0));
                        Log.i(TAG, "Get content type in MediaStore:" + c.getString(1));
                        Log.i(TAG, "Get uri in MediaStore:" + contentUri);
                        
                        String contentType = c.getString(1);
                        addAttachment(contentType, contentUri, append);
                        return true;
                    } else {
                        Log.i(TAG, "MediaStore:" + mediaStoreUri.toString() + " has not this file");
                    }
                } finally {
                    c.close();
                }
            }
        }
        return false;
    }

    private boolean isHasRecipientCount(){
        int recipientCount = recipientCount();
        return (recipientCount > 0 && recipientCount < RECIPIENTS_LIMIT_FOR_SMS);
    }

    private String getResourcesString(int id) {
        Resources r = getResources();
        return r.getString(id);
    }

    private void checkConditionsAndSendMessage(boolean bCheckEcmMode){
        // check pin
        // convert sim id to slot id
        int requestType = GnCellConnMgr.REQUEST_TYPE_SIMLOCK;
        final int slotId;
        if (MmsApp.mGnMultiSimMessage) {
            requestType = GnCellConnMgr.REQUEST_TYPE_ROAMING;
            slotId = SIMInfo.getSlotById(this, mSelectedSimId);
            Log.d(MmsApp.TXN_TAG, "check pin and...: simId=" + mSelectedSimId + "\t slotId=" + slotId);
        } else {
            slotId = 0;
        }
        final boolean bCEM = bCheckEcmMode;
        mCellMgr.handleCellConn(slotId, requestType, new Runnable() {
            public void run() {
                int nRet = mCellMgr.getResult();
                Log.d(MmsApp.TXN_TAG, "serviceComplete result = " + GnCellConnMgr.resultToString(nRet));
                if (mCellMgr.RESULT_ABORT == nRet || mCellMgr.RESULT_OK == nRet) {
                    updateSendButtonState();
                    return;
                }
//Gionee guoyx 20130121 CR00754375 begin         
//disable the code for temp when the Qualcomm Multi sim sms send settings not ok yet!             
//                if (MmsApp.mGnMultiSimMessage && slotId != mCellMgr.getPreferSlot()) {
//                    SIMInfo si = SIMInfo.getSIMInfoBySlot(ComposeMessageActivity.this, mCellMgr.getPreferSlot());
//                    if (si == null) {
//                        Log.e(MmsApp.TXN_TAG, "serviceComplete siminfo is null");
//                        updateSendButtonState();
//                        return;
//                    }
//                    mSelectedSimId = (int)si.mSimId;
//                    Log.d("MmsApp.TXN_TAG","different with prefect,change the select simId to sim:" + mSelectedSimId);
//                }
//Gionee guoyx 20130121 CR00754375 end
                sendMessage(bCEM);
            }
        });
    }

    private void updateSendButtonState(final boolean enabled) {
        if (!mWorkingMessage.hasSlideshow()) {
            //m0
            //mSendButton.setEnabled(enabled);
            //mSendButton.setFocusable(enabled);
            //gionee gaoj 2012-4-10 added for CR00555790 start
            if (MmsApp.mGnMessageSupport) {
                mSendMsgButton.setEnabled(enabled);
                mSendMsgButton.setFocusable(enabled);
                //gionee gaoj 2013-3-21 modified for CR00787217 start
                //gionee gaoj added for CR00725602 20121201 start
                    // Aurora liugj 2013-11-06 modified for fix bug-426 start 
                /*mSendMsgText.setTextColor(enabled ? 
                        getResources().getColor(R.color.gn_msg_send_button_enable_color) : getResources().getColor(R.color.gn_msg_send_button_not_enable_color));*/
                    // Aurora liugj 2013-11-06 modified for fix bug-426 end
                //gionee gaoj added for CR00725602 20121201 end
                //gionee gaoj 2013-3-21 modified for CR00787217 end
                   // Gionee lixiaohu 2012-08-28 added for CR00681687 start
                if (MmsApp.mGnMultiSimMessage) {
                // Aurora xuyong 2014-05-23 added for multisim feature start
                // Aurora xuyong 2014-07-14 modified for aurora's new feature start
                // Aurora xuyong 2014-07-29 modified for aurora's new feature start
                    if (mSendMsgButton1 != null) {
                        mSendMsgButton1.setEnabled(enabled);
                        mSendMsgButton1.setFocusable(enabled);
                    }
                    if (mSendMsgButton2 != null) {
                        mSendMsgButton2.setEnabled(enabled);
                        mSendMsgButton2.setFocusable(enabled);
                // Aurora xuyong 2014-07-29 modified for aurora's new feature end
                // Aurora xuyong 2014-07-14 modified for aurora's new feature end
                    }
                    updateSendButtonState();
                // Aurora xuyong 2014-05-23 added for multisim feature end
                // Aurora xuyong 2014-08-25 modified for bug #7912 start
                    if (mTelephonyManager == null) {
                        mTelephonyManager = GnTelephonyManager.getDefault();
                    }
                    // Aurora xuyong 2015-07-01 modified for bug #13930 start
                    if (!getSimStateReady(mSIMInfo1State, 0)) {
                    // Aurora xuyong 2015-07-01 modified for bug #13930 end
                // Aurora xuyong 2014-08-25 modified for bug #7912 end
                   // Aurora xuyong 2014-05-23 modified for multisim feature start
                   // Aurora xuyong 2014-07-14 modified for aurora's new feature start
                   // Aurora xuyong 2014-07-29 modified for aurora's new feature start
                        mSendMsgButton1.setEnabled(false);
                   // Aurora xuyong 2014-07-29 modified for aurora's new feature end
                   // Aurora xuyong 2014-07-14 modified for aurora's new feature end
                   // Aurora xuyong 2014-05-23 modified for multisim feature end
                    }
                // Aurora xuyong 2014-08-25 modified for bug #7912 start
                    // Aurora xuyong 2015-07-01 modified for bug #13930 start
                    if (!getSimStateReady(mSIMInfo2State, 1)) {
                    // Aurora xuyong 2015-07-01 modified for bug #13930 end
                // Aurora xuyong 2014-08-25 modified for bug #7912 end
                    // Aurora xuyong 2014-07-14 modified for aurora's new feature start
                   // Aurora xuyong 2014-07-29 modified for aurora's new feature start
                        mSendMsgButton2.setEnabled(false);
                   // Aurora xuyong 2014-07-29 modified for aurora's new feature end
                    // Aurora xuyong 2014-07-14 modified for aurora's new feature end
                    }            
                }
                // Gionee lixiaohu 2012-08-28 added for CR00681687 end                    
            }/* else {
            View sendButton = showSmsOrMmsSendButton(mWorkingMessage.requiresMms());
            sendButton.setEnabled(enabled);
            sendButton.setFocusable(enabled);
            }*/
            //gionee gaoj 2012-4-10 added for CR00555790 end
            //m1
        } else {
            if (mAttachmentEditor != null) {
                mAttachmentEditor.setCanSend(enabled);
            }
        }
    }

    private void insertText(AuroraEditText edit, String insertText){
        int where = edit.getSelectionStart();

        if (where == -1) {
            edit.append(insertText);
        } else {
            edit.getText().insert(where, insertText);
        }
    }

    /**
     * This filter will constrain edits not to make the length of the text
     * greater than the specified length.
     */  
    class TextLengthFilter implements InputFilter {
        public TextLengthFilter(int max) {
            mMaxLength = max - 1;
            //mExceedMessageSizeToast = Toast.makeText(ComposeMessageActivity.this, R.string.exceed_message_size_limitation,
            //        Toast.LENGTH_SHORT);
        }

        public CharSequence filter(CharSequence source, int start, int end,
                                   Spanned dest, int dstart, int dend) {
            
            int keep = mMaxLength - (dest.length() - (dend - dstart));
            
            if (keep < (end - start)) {
                if (mExceedMessageSizeToast == null) {
                    mExceedMessageSizeToast = Toast.makeText(ComposeMessageActivity.this, R.string.exceed_message_size_limitation,
                            Toast.LENGTH_SHORT);
                }
                
                mExceedMessageSizeToast.show();
            }

            if (keep <= 0) {
                return "";
            } else if (keep >= end - start) {
                return null; // keep original
            } else {
                return source.subSequence(start, start + keep);
            }
        }

        private int mMaxLength;
    }
    
    /**
     * This filter will constrain edits not to make the length of the text
     * greater than the specified length ( eg. 40 Bytes).
     */  
    class MyLengthFilter implements InputFilter {
        public MyLengthFilter(int max) {
            mMax = max;
            mExceedSubjectSizeToast = Toast.makeText(ComposeMessageActivity.this, R.string.exceed_subject_length_limitation,
                    Toast.LENGTH_SHORT);
        }

        private CharSequence getMaxByteSequence(CharSequence str, int keep) {
            String source = str.toString();
            int byteSize = source.getBytes().length;
            if (byteSize <= keep) {
                return str;
            } else {
                int charSize = source.length();
                while (charSize > 0) {
                    source = source.substring(0, source.length()-1);
                    charSize--;
                    if (source.getBytes().length <= keep) {
                        break;
                    }
                }
                return source;
            }
        }
        
        //this is just the method code in LengthFilter, just add a Toast to show max length exceed.
        public CharSequence filter(CharSequence source, int start, int end,
                                   Spanned dest, int dstart, int dend) {

            int destOldLength = dest.toString().getBytes().length;
            int destReplaceLength = dest.subSequence(dstart, dend).toString().getBytes().length;
            CharSequence sourceSubString = source.subSequence(start, end); 
            int sourceReplaceLength = sourceSubString.toString().getBytes().length;
            int newLength =  destOldLength - destReplaceLength + sourceReplaceLength;
            if (newLength > mMax) {
                // need cut the new input charactors
                mExceedSubjectSizeToast.show();
                int keep = mMax - (destOldLength - destReplaceLength);
                if (keep <= 0) {
                    return ""; 
                } else {
                    return getMaxByteSequence(sourceSubString, keep);
                }
            } else {
                return null; // can replace
            }
        }
        private int mMax;
    }
    
    private void hideInputMethod() {
        InputMethodManager inputMethodManager =
            (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
        // Aurora xuyong 2014-03-07 modified for aurora's new feature start 
        if(mWindow !=null && mWindow.getCurrentFocus()!=null){
            inputMethodManager.hideSoftInputFromWindow(mWindow.getCurrentFocus().getWindowToken(), 0);
        }
        // Aurora xuyong 2014-03-07 modified for aurora's new feature end
    }

    // toast there are too many recipients.
    private void toastTooManyRecipients(int recipientCount) {
        String tooManyRecipients = getString(R.string.too_many_recipients, recipientCount, RECIPIENTS_LIMIT_FOR_SMS);
        Toast.makeText(ComposeMessageActivity.this, tooManyRecipients, Toast.LENGTH_LONG).show();
    }
    // Aurora xuyong 2013-11-16 added for bug#336 start
    private boolean mAddVilable = true;
    // Aurora xuyong 2013-11-16 added for bug#336 end

    private void addContacts(int pickCount) {
        // Aurora xuyong 2013-11-16 added for bug#336 start
        if (!mAddVilable) {
            return;
        }
        mAddVilable = false;
        // Aurora xuyong 2013-11-16 added for bug#336 end
        //m0
        /*Intent intent = new Intent("android.intent.action.CONTACTSMULTICHOICE");
        intent.setType(Phone.CONTENT_ITEM_TYPE);
        intent.putExtra("request_email", true);

        intent.putExtra("pick_count", pickCount);
        misPickContatct = true;
        startActivityForResult(intent, REQUEST_CODE_PICK_CONTACT);*/
        try {
        //gionee gaoj 2012-4-10 added for CR00555790 start
        if (MmsApp.mGnMessageSupport) {
            //gionee gaoj 2012-5-18 modified for CR00601632 start
            //Aurora xuyong 2013-10-11 modified for aurora's new feature start
            final Intent addContactIntent = new Intent("com.aurora.action.mms.select.contact");
            //gionee gaoj 2012-5-18 modified for CR00601632 end
            addContactIntent.setClassName("com.android.contacts", "com.android.contacts.activities.AuroraSimContactListActivity");
            //Aurora xuyong 2013-10-11 modified for aurora's new feature end
            ArrayList<String> numberList = null;
            // Aurora xuyong 2014-10-23 modified for privacy feature start
            // Aurora xuyong 2015-03-17 modified for bug #12275 start
            numberList = new ArrayList<String>(mContactContainer.getNumbersAndPrivacyWith1C());
            // Aurora xuyong 2015-03-17 modified for bug #12275 end
            // Aurora xuyong 2014-10-23 modified for privacy feature end
            if (numberList != null && numberList.size() != 0) {
                Log.i(TAG, "numbers ----------------" + numberList.get(0));
                mGnNumberList = numberList;
                addContactIntent.putExtra("ContactNumbers", numberList);
            }
            addContactIntent.putExtra("useoldcache", true);
            addContactIntent.setType(Phone.CONTENT_ITEM_TYPE);
            startActivityForResult(addContactIntent, REQUEST_CODE_ADD_RECEIPTOR);

            misPickContatct = true;
            return;
        }
        //gionee gaoj 2012-4-10 added for CR00555790 end
            misPickContatct = true;
            Intent intent = new Intent("android.intent.action.contacts.list.PICKMULTIPHONEANDEMAILS");
            intent.setType(Phone.CONTENT_TYPE);
            startActivityForResult(intent, REQUEST_CODE_PICK);
        } catch (ActivityNotFoundException e) {
            Toast.makeText(this, this.getString(R.string.no_application_response), Toast.LENGTH_SHORT).show();
            Log.e(TAG, e.getMessage());
        }
        
        //m1
    }

    private class TextVCardContact {
        protected String name = "";
        protected List<String> numbers = new ArrayList<String>();
        protected List<String> emails = new ArrayList<String>();
        protected List<String> organizations = new ArrayList<String>();

        protected void reset() {
            name = "";
            numbers.clear();
            emails.clear();
            organizations.clear();
        }
        @Override
        public String toString() {
            String textVCardString = "";
            int i = 1;
            if (name != null && !name.equals("")) {
                textVCardString += getString(R.string.contact_name) + ": " + name + "\n";
            }
            if (!numbers.isEmpty()) {
                if (numbers.size() > 1) {
                    i = 1;
                    for (String number : numbers) {
                        textVCardString += getString(R.string.contact_tel) + i + ": " + number + "\n";
                        i++;
                    }
                } else {
                    textVCardString += getString(R.string.contact_tel) + ": " + numbers.get(0) + "\n";
                }
            }
            if (!emails.isEmpty()) {
                if (emails.size() > 1) {
                    i = 1;
                    for (String email : emails) {
                        textVCardString += getString(R.string.contact_email) + i + ": " + email + "\n";
                        i++;
                    }
                } else {
                    textVCardString += getString(R.string.contact_email) + ": " + emails.get(0) + "\n";
                }
            }
            if (!organizations.isEmpty()) {
                if (organizations.size() > 1) {
                    i = 1;
                    for (String organization : organizations) {
                        textVCardString += getString(R.string.contact_organization) + i + ": " + organization + "\n";
                        i++;
                    }
                } else {
                    textVCardString += getString(R.string.contact_organization) + ": " + organizations.get(0) + "\n";
                }
            }
            return textVCardString;
        }
    }

    // create the String of vCard via Contacts message
    private String getVCardString(Cursor cursor, String textVCard) {
        final int dataContactId     = 0;
        final int dataMimeType      = 1;
        final int dataString        = 2;
        long contactId = 0l;
        long contactCurrentId = 0l;
        int i = 1;
        String mimeType;
        TextVCardContact tvc = new TextVCardContact();
        int j = 0;
        while (cursor.moveToNext()) {
            contactId = cursor.getLong(dataContactId);
            mimeType = cursor.getString(dataMimeType);
            if (contactCurrentId == 0l) {
                contactCurrentId = contactId;
            }

            // put one contact information into textVCard string
            if (contactId != contactCurrentId) {
                contactCurrentId = contactId;
                textVCard += tvc.toString();
                tvc.reset();
            }

            // get cursor data
            if (CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE.equals(mimeType)) {
                tvc.name = cursor.getString(dataString);
            }
            if (CommonDataKinds.Phone.CONTENT_ITEM_TYPE.equals(mimeType)) {
                tvc.numbers.add(cursor.getString(dataString));
            }
            if (CommonDataKinds.Email.CONTENT_ITEM_TYPE.equals(mimeType)) {
                tvc.emails.add(cursor.getString(dataString));
            }
            if (CommonDataKinds.Organization.CONTENT_ITEM_TYPE.equals(mimeType)) {
                tvc.organizations.add(cursor.getString(dataString));
            }
            // put the last one contact information into textVCard string
            if (cursor.isLast()) {
                textVCard += tvc.toString();
            }
            j++;
            if (j%10 == 0) {
                if (textVCard.length() > MmsConfig.getMaxTextLimit()) {
                    break;
                }
            }
        }
        Log.i(TAG, "compose.getVCardString():return string = " + textVCard);
        return textVCard;
    }

    private int getContactSIM(String number) {
        int simId = -1;
        //TODO Need to check why use this key id here--"sim_id"? Gionee 20130107 by guoyx
        String SIM_ID = "sim_id";//Data.SIM_ASSOCIATION_ID;
        Cursor associateSIMCursor = ComposeMessageActivity.this.getContentResolver().query(
                Data.CONTENT_URI, 
                new String[]{SIM_ID}, 
                Data.MIMETYPE + "='" + CommonDataKinds.Phone.CONTENT_ITEM_TYPE 
                    + "' AND (" + Data.DATA1 + "='" + number + "') AND (" + SIM_ID + "!= -1)", 
                null,
                null
        );

        if (null == associateSIMCursor) {
            Log.i(TAG, TAG + " queryContactInfo : associateSIMCursor is null");
        } else {
            Log.i(TAG, TAG + " queryContactInfo : associateSIMCursor is not null. Count[" + 
                    associateSIMCursor.getCount() + "]");
        }

        if ((null != associateSIMCursor) && (associateSIMCursor.getCount() > 0)) {
            associateSIMCursor.moveToFirst();
            // Get only one record is OK
            simId = (Integer) associateSIMCursor.getInt(0);
        } else {
            //search the formatted number
            if (null != associateSIMCursor && associateSIMCursor.getCount() == 0) {
                number = MessageUtils.formatNumber(number);
                associateSIMCursor.close();
                associateSIMCursor = null;
                associateSIMCursor = ComposeMessageActivity.this.getContentResolver().query(
                        Data.CONTENT_URI, 
                        new String[]{SIM_ID}, 
                        Data.MIMETYPE + "='" + CommonDataKinds.Phone.CONTENT_ITEM_TYPE 
                            + "' AND (" + Data.DATA1 + "='" + number + "') AND (" + SIM_ID + "!= -1)", 
                        null,
                        null
                );
                if ((null != associateSIMCursor) && (associateSIMCursor.getCount() > 0)) {
                    associateSIMCursor.moveToFirst();
                    // Get only one record is OK
                    simId = (Integer) associateSIMCursor.getInt(0);
                } else {
                    simId = -1;
                }
            } else {
                simId = -1;
            }
        }
        //Gionee <guoyx> <2013-06-26> modify for CR00828231 begin
        if (associateSIMCursor != null) {
            associateSIMCursor.close();
        }
        //Gionee <guoyx> <2013-06-26> modify for CR00828231 end
        return simId;
    }

    // Aurora xuyong 2015-04-02 added for android 5.0+ new feature start
    private void getSubInfoList() {
        //Aurora xuyong 2015-04-02 modified for android 5.1+ new feature start
        mSubInfoList = SubscriptionManager.from(this).getActiveSubscriptionInfoList();
        //Aurora xuyong 2015-04-02 modified for android 5.1+ new feature end
        mSubCount = (mSubInfoList != null && !mSubInfoList.isEmpty()) ? mSubInfoList.size() : 0;
        //Aurora xuyong 2015-04-02 added for android 5.1+ new feature start
        getSimInfoList();
        //Aurora xuyong 2015-04-02 added for android 5.1+ new feature end
    }
    // Aurora xuyong 2015-04-02 added for android 5.0+ new feature end

    private void getSimInfoList() {
        if (MmsApp.mGnMultiSimMessage) {
            mSimInfoList = SIMInfo.getInsertedSIMList(this.getApplicationContext());
            mSimCount = mSimInfoList.isEmpty()? 0: mSimInfoList.size();
            Log.v(TAG, "ComposeMessageActivity.getSimInfoList(): mSimCount = " + mSimCount);
        } else { // single SIM
            // Aurora xuyong 2014-08-29 deleted for bug #8021 start
            //if (GnPhone.phone != null) {
            // Aurora xuyong 2014-08-29 deleted for bug #8021 end
                try {
                    // Aurora xuyong 2014-08-29 modified for bug #8021 start
                    mSimCount = GnTelephonyManager.hasIccCard() ? 1 : 0;
                    // Aurora xuyong 2014-08-29 modified for bug #8021 end
                } catch (Exception e) {
                    Log.e(MmsApp.TXN_TAG, "check sim insert status failed");
                    mSimCount = 0;
                }
            // Aurora xuyong 2014-08-29 deleted for bug #8021 start
            //}
            // Aurora xuyong 2014-08-29 deleted for bug #8021 end
        }
        
    }

    private void checkRecipientsCount() {
//        if (isRecipientsEditorVisible()) {
//            mRecipientsEditor.structLastRecipient();
//        }
        //gionee gaoj 2012-12-13 added for CR00745515 start
//        hideInputMethod();
        //gionee gaoj 2012-12-13 added for CR00745515 end
        final int mmsLimitCount = MmsConfig.getMmsRecipientLimit();
        if (mWorkingMessage.requiresMms() && recipientCount() > mmsLimitCount) {
            String message = getString(R.string.max_recipients_message, mmsLimitCount);
            AuroraAlertDialog.Builder builder = new AuroraAlertDialog.Builder(this);
            builder.setTitle(R.string.max_recipients_title);
            builder.setCancelable(true);
            //gionee gaoj 2013-1-5 added for CR00757300 start
            if (!isRecipientsEditorVisible()) {
                message = getString(R.string.gn_max_recipients_message);
                builder.setMessage(message);
            } else {
                //gionee gaoj 2013-1-5 added for CR00757300 end
            builder.setMessage(message);
            builder.setPositiveButton(R.string.OK, new DialogInterface.OnClickListener() {
                public void onClick(DialogInterface dialog, int which) {
                    runOnUiThread(new Runnable() {
                        public void run() {
                            /*
                             * If entering an existing thread, #mRecipientsEditor never gets initialized.
                             * So, when mRecipientsEditor is not visible, it might be null.
                             */
                            List<String> recipientsList;
                            //gionee gaoj 2012-4-10 added for CR00555790 start
                            if (MmsApp.mGnMessageSupport) {
                                recipientsList = mContactContainer.getNumbers();
                            } else {
                                //gionee gaoj 2012-4-10 added for CR00555790 end
                            if (isRecipientsEditorVisible()) {
                                recipientsList = mRecipientsEditor.getNumbers();
                            } else {
                                recipientsList = new ArrayList<String>(Arrays.asList(getRecipients().getNumbers()));
                            }
                            //gionee gaoj 2012-4-10 added for CR00555790 start
                            }
                            //gionee gaoj 2012-4-10 added for CR00555790 end
                            List<String> newRecipientsList = new ArrayList<String>();

                            if (recipientCount() > mmsLimitCount * 2) {
                                for (int i = 0; i < mmsLimitCount; i++) {
                                    newRecipientsList.add(recipientsList.get(i));
                                }
                                mWorkingMessage.setWorkingRecipients(newRecipientsList);
                                ContactList recipients = ContactList.getByNumbers(newRecipientsList, false);
                                // Aurora xuyong 2014-10-23 added for privacy feature start
                                mContactContainer.setCurrentThreadId(mConversation.getThreadId());
                                // Aurora xuyong 2014-10-23 added for privacy feature end
                                mContactContainer.initContainer(recipients);
                            } else {
                                for (int i = recipientCount() - 1; i >= mmsLimitCount; i--) {
                                    recipientsList.remove(i);
                                }
                                mWorkingMessage.setWorkingRecipients(recipientsList);
                                mContactContainer.removeLastContact(recipientCount() - mmsLimitCount);
                            }
                            simSelection();
                        }
                    });
                }
            });
            //gionee gaoj 2013-1-5 added for CR00757300 start
            }
            //gionee gaoj 2013-1-5 added for CR00757300 end
            builder.setNegativeButton(R.string.no, null);
            builder.show();
            updateSendButtonState();
        } else {
            /*
             * fix CR ALPS00069541
             * if the message copy from sim card with unknown recipient
             * the recipient will be ""
             */
            //gionee gaoj 2012-4-10 added for CR00555790 start
            if (MmsApp.mGnMessageSupport) {
                if (isRecipientsEditorVisible()) {
                    mContactContainer.updateContacts();
                }
                if (isRecipientsEditorVisible() && "".equals(mContactContainer.getText()
//                        .allNumberToString().replaceAll(";", "")
                        )) {
                    new AuroraAlertDialog.Builder(this)
                            .setIconAttribute(android.R.attr.alertDialogIcon)
                            .setTitle(R.string.cannot_send_message)
                            .setMessage(R.string.cannot_send_message_reason)
                            .setPositiveButton(R.string.yes, new CancelSendingListener())
                            .show();
                } else if (!isRecipientsEditorVisible() && "".equals(mConversation.getRecipients().serialize().replaceAll(";", ""))) {
                    new AuroraAlertDialog.Builder(this)
                            .setIconAttribute(android.R.attr.alertDialogIcon)
                            .setTitle(R.string.cannot_send_message)
                            .setMessage(R.string.cannot_send_message_reason)
                            .setPositiveButton(R.string.yes, new CancelSendingListener())
                            .show();
                } else {
                    simSelection();
                }
            } else {
                //gionee gaoj 2012-4-10 added for CR00555790 end
            if (isRecipientsEditorVisible() && "".equals(mRecipientsEditor.getText()
//                    .allNumberToString().replaceAll(";", "")
                    )) {
                new AuroraAlertDialog.Builder(this)
                        .setIconAttribute(android.R.attr.alertDialogIcon)
                        .setTitle(R.string.cannot_send_message)
                        .setMessage(R.string.cannot_send_message_reason)
                        .setPositiveButton(R.string.yes, new CancelSendingListener())
                        .show();
            } else if (!isRecipientsEditorVisible() && "".equals(mConversation.getRecipients().serialize().replaceAll(";", ""))) {
                new AuroraAlertDialog.Builder(this)
                        .setIconAttribute(android.R.attr.alertDialogIcon)
                        .setTitle(R.string.cannot_send_message)
                        .setMessage(R.string.cannot_send_message_reason)
                        .setPositiveButton(R.string.yes, new CancelSendingListener())
                        .show();
            } else {
                simSelection();
            }
            //gionee gaoj 2012-4-10 added for CR00555790 start
            }
            //gionee gaoj 2012-4-10 added for CR00555790 end
        }
    }
    
    private void simSelection() {
        if (!MmsApp.mGnMultiSimMessage) {
            confirmSendMessageIfNeeded();
        } else if (mSimCount == 0 && mSubCount == 0) {
            // SendButton can't click in this case
        //a0
        } else if (send_sim_id >= 1) {
            mSelectedSimId = send_sim_id;
            send_sim_id = -1;
            Log.d(TAG, "send msg from send_sim_id = " + mSelectedSimId);
            confirmSendMessageIfNeeded();
        //a1
        } else if (mSimCount == 1 || mSubCount == 1) {
            //Aurora xuyong 2015-04-02 modified for android 5.1+ new feature start
            mSelectedSimId = (int)mSubInfoList.get(0).getSubscriptionId();
            //Aurora xuyong 2015-04-02 modified for android 5.1+ new feature end
            confirmSendMessageIfNeeded();
        } else if (mSimCount > 1 || mSubCount > 1) {
            Intent intent = new Intent();
            intent.putExtra(SELECT_TYPE, SIM_SELECT_FOR_SEND_MSG);
            // getContactSIM
            if (isRecipientsEditorVisible()) {
                //gionee gaoj 2012-4-10 added for CR00555790 start
                if (MmsApp.mGnMessageSupport) {
                    if (getRecipients().size() == 1) {
                        mAssociatedSimId = getContactSIM(mRecipientsEditor.getNumbers().get(0));
                    } else {
                        mAssociatedSimId = -1;
                    }                    
                } else {
                    //gionee gaoj 2012-4-10 added for CR00555790 end
                if (mRecipientsEditor.getRecipientCount() == 1/*isOnlyOneRecipient()*/) {
                    mAssociatedSimId = getContactSIM(mRecipientsEditor.getNumbers().get(0)); // 152188888888 is a contact number
                } else {
                    mAssociatedSimId = -1;
                }
                //gionee gaoj 2012-4-10 added for CR00555790 start
                }
                //gionee gaoj 2012-4-10 added for CR00555790 end
            } else {
                if (getRecipients().size() == 1/*isOnlyOneRecipient()*/) {
                    mAssociatedSimId = getContactSIM(getRecipients().get(0).getNumber()); // 152188888888 is a contact number
                } else {
                    mAssociatedSimId = -1;
                }
            }

            // getDefaultSIM()
            // Gionee lixiaohu 2012-08-28 added for CR00681687 start
            if (MmsApp.mGnMultiSimMessage) {
                mMessageSimId = GnSettings.System.DEFAULT_SIM_SETTING_ALWAYS_ASK;
            } else if (MmsApp.mQcMultiSimEnabled) { 
                //Gionee guoyx 20130320 modified for CR00787025 begin
                int dataSub = (int)Settings.System.getLong(getContentResolver(), 
                        GnSettings.System.MULTI_SIM_DATA_CALL_SUBSCRIPTION, GnSettings.System.DEFAULT_SIM_NOT_SET);
                Log.d(TAG, "get the user prefer data sub = " + dataSub);
                MmsConfig.backupDataSubscription(dataSub);
                
                int smsSub = (int)Settings.System.getLong(getContentResolver(), 
                        GnSettings.System.SMS_SIM_SETTING, GnSettings.System.DEFAULT_SIM_NOT_SET);
                Log.d(TAG, "get the user prefer sms sub = " + smsSub);
                //Gionee guoyx 20130323 added for CR00785623 begin
                if (smsSub < 2) {
                	try {
                        mMessageSimId = SIMInfo.getSIMInfoBySlot(getApplicationContext(),smsSub).mSimId;
                	} catch (IllegalArgumentException e) {
                        e.printStackTrace();
                    } catch (SQLiteException e) {
                		e.printStackTrace();
                	}
                } else {
                    mMessageSimId = GnSettings.System.DEFAULT_SIM_SETTING_ALWAYS_ASK;
                }
                //Gionee guoyx 20130323 added for CR00785623 end
                //Gionee guoyx 20130320 modified for CR00787025 end
            } else {
                mMessageSimId = Settings.System.getLong(getContentResolver(), 
                    GnSettings.System.SMS_SIM_SETTING, GnSettings.System.DEFAULT_SIM_NOT_SET);
            }
            // Gionee lixiaohu 2012-08-28 added for CR00681687 end
            if (mMessageSimId == GnSettings.System.DEFAULT_SIM_SETTING_ALWAYS_ASK) {
                // always ask, show SIM selection dialog
                // Gionee lixiaohu 2012-08-28 added for CR00681687 start            
                if (MmsApp.mGnMultiSimMessage) {
                    confirmSendMessageIfNeeded();
                } else {                
                    showSimSelectedDialog(intent);
                }
                // Gionee lixiaohu 2012-08-28 added for CR00681687 end                
                updateSendButtonState();
            } else if (mMessageSimId == GnSettings.System.DEFAULT_SIM_NOT_SET) {
                /*
                 * not set default SIM: 
                 * if recipients are morn than 2,or there is no associated SIM,
                 * show SIM selection dialog
                 * else send message via associated SIM
                 */
                if (mAssociatedSimId == -1) {
                    showSimSelectedDialog(intent);
                    updateSendButtonState();
                } else {
                    mSelectedSimId = mAssociatedSimId;
                    confirmSendMessageIfNeeded();
                }
            } else {
                /*
                 * default SIM:
                 * if recipients are morn than 2,or there is no associated SIM,
                 * send message via default SIM
                 * else show SIM selection dialog
                 */
                if (mAssociatedSimId == -1 || (mMessageSimId == mAssociatedSimId)) {
                    mSelectedSimId = (int) mMessageSimId;
                    confirmSendMessageIfNeeded();
                } else {
                    showSimSelectedDialog(intent);
                    updateSendButtonState();
                }
            }
        }
    }

    //gionee gaoj 2012-12-13 added for CR00745515 start
    public static final int SIM_CHOOSE_TAG = 777;
    private boolean isShowSimSelectView = false;
    private SimSelectView mSimSelectView = null;
    private Intent mIntent = new Intent();
    private boolean isOpen = true;
    //gionee gaoj 2012-12-13 added for CR00745515 end
    
    private void showSimSelectedDialog(Intent intent) {
        // TODO get default SIM and get contact SIM
        if(MmsApp.mGnMessageSupport ) {
            //gionee gaoj 2012-12-13 added for CR00745515 start
            if (isOpen && intent.getIntExtra(SELECT_TYPE, -1) != SIM_SELECT_FOR_SAVE_MSG_TO_SIM) {
                mIntent = intent;
                isShowSimSelectView = true;
                int[] location = new  int[2] ;
                mSendMsgButton.getLocationOnScreen(location);
    
                DisplayMetrics dm = new DisplayMetrics();
                getWindowManager().getDefaultDisplay().getMetrics(dm);
                int x = 0;
                Configuration config = getResources().getConfiguration();
                if (config.orientation == Configuration.ORIENTATION_LANDSCAPE) {
                    x = location[0] - dm.widthPixels/2 - 120;
                }
                int y = location[1] - dm.heightPixels/2;
                Intent viewIntent = new Intent(ComposeMessageActivity.this, SimSelectView.class);
                viewIntent.putExtra("x", x);
                viewIntent.putExtra("y", y);
                startActivityForResult(viewIntent, SIM_CHOOSE_TAG);
            } else {
              gnShowSimSelectedDialog(intent);
            }
            //gionee gaoj 2012-12-13 added for CR00745515 end
            return ;
        }
        final Intent it = intent;
        List<Map<String, ?>> entries = new ArrayList<Map<String, ?>>();
        for (int i = 0; i < mSimCount; i++) {
            SIMInfo simInfo = mSimInfoList.get(i);
            HashMap<String, Object> entry = new HashMap<String, Object>();

            entry.put("simIcon", simInfo.mSimBackgroundRes);
            int state = MessageUtils.getSimStatus(i, mSimInfoList, GnTelephonyManagerEx.getDefault());
            entry.put("simStatus", MessageUtils.getSimStatusResource(state));
            String simNumber = "";
            if (!TextUtils.isEmpty(simInfo.mNumber)) {
                switch(simInfo.mDispalyNumberFormat) {
                    //case android.provider.Telephony.SimInfo.DISPLAY_NUMBER_DEFAULT:
                    case GnTelephony.SimInfo.DISPLAY_NUMBER_FIRST:
                        if(simInfo.mNumber.length() <= 4)
                            simNumber = simInfo.mNumber;
                        else
                            simNumber = simInfo.mNumber.substring(0, 4);
                        break;
                    case GnTelephony.SimInfo.DISPLAY_NUMBER_LAST:
                        if(simInfo.mNumber.length() <= 4)
                            simNumber = simInfo.mNumber;
                        else
                            simNumber = simInfo.mNumber.substring(simInfo.mNumber.length() - 4);
                        break;
                    case 0://android.provider.Telephony.SimInfo.DISPLAY_NUMBER_NONE:
                        simNumber = "";
                        break;
                }
            }
            if (!TextUtils.isEmpty(simNumber)) {
                entry.put("simNumberShort",simNumber);
            } else {
                entry.put("simNumberShort", "");
            }

            entry.put("simName", simInfo.mDisplayName);
            if (!TextUtils.isEmpty(simInfo.mNumber)) {
                entry.put("simNumber", simInfo.mNumber);
            } else {
                entry.put("simNumber", "");
            }
            if (mAssociatedSimId == (int) simInfo.mSimId) {
                // if this SIM is contact SIM, set "Suggested"
                entry.put("suggested", getString(R.string.suggested));
            } else {
                entry.put("suggested", "");// not suggested
            }
            if (!MessageUtils.is3G(i, mSimInfoList)) {
                entry.put("sim3g", "");
            } else {
                //MTK_OP02_PROTECT_START
                if (MmsApp.isUnicomOperator()) {
                    entry.put("sim3g", "3G");
                } else 
                //MTK_OP02_PROTECT_END
                {
                    entry.put("sim3g", "");
                }
            }
            entries.add(entry);
        }

        final SimpleAdapter a = new SimpleAdapter(
                this,
                entries,
                R.layout.sim_selector,
                new String[] {"simIcon", "simStatus", "simNumberShort", "simName", "simNumber", "suggested", "sim3g"},
                new int[] {R.id.sim_icon, R.id.sim_status, R.id.sim_number_short, 
                        R.id.sim_name, R.id.sim_number, R.id.sim_suggested, R.id.sim3g});
        SimpleAdapter.ViewBinder viewBinder = new SimpleAdapter.ViewBinder() {
            public boolean setViewValue(View view, Object data, String textRepresentation) {
                if (view instanceof ImageView) {
                    if (view.getId() == R.id.sim_icon) {
                        ImageView simicon = (ImageView) view.findViewById(R.id.sim_icon);
                        simicon.setBackgroundResource((Integer) data);
                    } else if (view.getId() == R.id.sim_status) {
                        ImageView simstatus = (ImageView)view.findViewById(R.id.sim_status);
                        if ((Integer)data != GnPhone.SIM_INDICATOR_UNKNOWN
                                && (Integer)data != GnPhone.SIM_INDICATOR_NORMAL) {
                            simstatus.setVisibility(View.VISIBLE);
                            simstatus.setImageResource((Integer)data);
                        } else {
                            simstatus.setVisibility(View.GONE);
                        }
                    }
                    return true;
                }
                return false;
            }
        };
        a.setViewBinder(viewBinder);
        AuroraAlertDialog.Builder b = new AuroraAlertDialog.Builder(this);
        b.setTitle(getString(R.string.sim_selected_dialog_title));
        b.setCancelable(true);
        b.setAdapter(a, new DialogInterface.OnClickListener() {
            @SuppressWarnings("unchecked")
            public final void onClick(DialogInterface dialog, int which) {
                updateSendButtonState(false);
                if (Utils.hasLollipop()) {
                    //Aurora xuyong 2015-04-02 modified for android 5.1+ new feature start
                    mSelectedSimId = (int) mSubInfoList.get(which).getSubscriptionId();
                    //Aurora xuyong 2015-04-02 modified for android 5.1+ new feature end
                } else {
                    mSelectedSimId = (int) mSimInfoList.get(which).mSimId;
                }
                if (it.getIntExtra(SELECT_TYPE, -1) == SIM_SELECT_FOR_SEND_MSG) {
                    confirmSendMessageIfNeeded();
                } else if (it.getIntExtra(SELECT_TYPE, -1) == SIM_SELECT_FOR_SAVE_MSG_TO_SIM) {
                    //getMessageAndSaveToSim(it);
                    Message msg = mSaveMsgHandler.obtainMessage(MSG_SAVE_MESSAGE_TO_SIM_AFTER_SELECT_SIM);
                    msg.obj = it;
                    //mSaveMsgHandler.sendMessageDelayed(msg, 60);
                    mSaveMsgHandler.sendMessage(msg);
                }
                //gionee gaoj 2012-4-10 added for CR00555790 start
                if (it.getIntExtra(SELECT_TYPE, -1) == RESEND_MSG_SELECTED_SIMID && MmsApp.mGnMessageSupport) {
                    MessageItem msgItem = getMessageItem(it.getStringExtra("type"), it.getLongExtra("msgId", -1), false);
                    if (null != msgItem) {
                        msgItem.mSimId = mSelectedSimId;
                        reSendMsg(msgItem);
                    }
                }
                //gionee gaoj 2012-4-10 added for CR00555790 end
                dialog.dismiss();
            }
        });
        mSIMSelectDialog = b.create();
        mSIMSelectDialog.show();
    }
    
    private void gnShowSimSelectedDialog(Intent intent) {
        final Intent it = intent;
        List<Map<String, ?>> entries = new ArrayList<Map<String, ?>>();
        for (int i = 0; i < mSimCount; i++) {
            SIMInfo simInfo = mSimInfoList.get(i);
            HashMap<String, Object> entry = new HashMap<String, Object>();

            entry.put("simIcon", simInfo.mSimBackgroundRes);
            int state = MessageUtils.getSimStatus(i, mSimInfoList, GnTelephonyManagerEx.getDefault());
            entry.put("simStatus", MessageUtils.getSimStatusResource(state));
            String simNumber = "";
            if (!TextUtils.isEmpty(simInfo.mNumber)) {
                switch(simInfo.mDispalyNumberFormat) {
                    //case android.provider.Telephony.SimInfo.DISPLAY_NUMBER_DEFAULT:
                    case GnTelephony.SimInfo.DISPLAY_NUMBER_FIRST:
                        if(simInfo.mNumber.length() <= 4)
                            simNumber = simInfo.mNumber;
                        else
                            simNumber = simInfo.mNumber.substring(0, 4);
                        break;
                    case GnTelephony.SimInfo.DISPLAY_NUMBER_LAST:
                        if(simInfo.mNumber.length() <= 4)
                            simNumber = simInfo.mNumber;
                        else
                            simNumber = simInfo.mNumber.substring(simInfo.mNumber.length() - 4);
                        break;
                    case 0://android.provider.Telephony.SimInfo.DISPLAY_NUMBER_NONE:
                        simNumber = "";
                        break;
                }
            }
            if (!TextUtils.isEmpty(simNumber)) {
                entry.put("simNumberShort",simNumber);
            } else {
                entry.put("simNumberShort", "");
            }

            entry.put("simName", simInfo.mDisplayName);
            if (!TextUtils.isEmpty(simInfo.mNumber)) {
                entry.put("simNumber", simInfo.mNumber);
            } else {
                entry.put("simNumber", "");
            }
            if (mAssociatedSimId == (int) simInfo.mSimId) {
                // if this SIM is contact SIM, set "Suggested"
                entry.put("suggested", getString(R.string.suggested));
            } else {
                entry.put("suggested", "");// not suggested
            }
            // gionee zhouyj 2012-06-25 modify for CR00627813 start 
            if (!MessageUtils.is3G(i, mSimInfoList)) {
                entry.put("sim3g", "");
            } else {

                //MTK_OP02_PROTECT_START
                if (MmsApp.isUnicomOperator()) {
                    entry.put("sim3g", "3G");
                } else 
                //MTK_OP02_PROTECT_END
                {
                    entry.put("sim3g", "");
                }
            }
            if(MessageUtils.mUnicomCustom || MessageUtils.mShowDigitalSlot) {
                if((int) simInfo.mSlot == 0) {
                    entry.put("simSlot", getString(R.string.gn_sim_slot_1));
                } else if((int) simInfo.mSlot == 1) {
                    entry.put("simSlot", getString(R.string.gn_sim_slot_2));
                } else {
                    entry.put("simSlot", "");
                }
            } else if(MessageUtils.mShowSlot) {
                if((int) simInfo.mSlot == 0) {
                    entry.put("simSlot", getString(R.string.gn_sim_slot_a));
                } else if((int) simInfo.mSlot == 1) {
                    entry.put("simSlot", getString(R.string.gn_sim_slot_b));
                } else {
                    entry.put("simSlot", "");
                }
            }
            else {
                entry.put("simSlot", "");
            }
            // gionee zhouyj 2012-06-25 modify for CR00627813 end 
            entries.add(entry);
        }

        final SimpleAdapter a = new SimpleAdapter(
                this,
                entries,
                R.layout.gn_sim_selector,
                new String[] {"simIcon", "simStatus", "simNumberShort", "simName", "simNumber", "suggested", "sim3g", "simSlot"},
                new int[] {R.id.sim_icon, R.id.sim_status, R.id.sim_number_short, 
                        R.id.sim_name, R.id.sim_number, R.id.sim_suggested, R.id.sim3g, R.id.sim_slot});
        SimpleAdapter.ViewBinder viewBinder = new SimpleAdapter.ViewBinder() {
            private boolean mSlotVisible = false;
            public boolean setViewValue(View view, Object data, String textRepresentation) {
                //gionee gaoj 2012 6-12 added for CR00624001 start
                if (MmsApp.mTransparent) {
                    TextView nameTextView = (TextView) view.findViewById(R.id.sim_name);
                    if (nameTextView != null) {
                        nameTextView.setTextColor(Color.BLACK);
                    }
                    TextView numTextView = (TextView) view.findViewById(R.id.sim_number);
                    if (numTextView != null) {
                        numTextView.setTextColor(R.color.gn_color_gray);
                    }
                }
                //gionee gaoj 2012 6-12 added for CR00624001 end
                if (view instanceof ImageView) {
                    if (view.getId() == R.id.sim_icon) {
                        ImageView simicon = (ImageView) view.findViewById(R.id.sim_icon);
                        simicon.setBackgroundResource((Integer) data);
                    } else if (view.getId() == R.id.sim_status) {
                        ImageView simstatus = (ImageView)view.findViewById(R.id.sim_status);
                        // gionee zhouyj 2013-03-14 modify for CR00782610 start
                        if ((Integer)data != GnTelephonyManager.getSIMStateIcon(GnPhone.SIM_INDICATOR_UNKNOWN)
                                && (Integer)data != GnTelephonyManager.getSIMStateIcon(GnPhone.SIM_INDICATOR_NORMAL)) {
                            simstatus.setVisibility(View.VISIBLE);
                            simstatus.setImageResource((Integer)data);
                            mSlotVisible = false;
                        } else {
                            simstatus.setVisibility(View.GONE);
                            mSlotVisible = true;
                        }
                        // gionee zhouyj 2013-03-14 modify for CR00782610 end
                    }
                    return true;
                }
                if(view instanceof TextView) {
                    if (view.getId() == R.id.sim_number) {
                        TextView simNumber = (TextView)view.findViewById(R.id.sim_number);
                        if(!TextUtils.isEmpty((String)data)) {
                            simNumber.setText((String)data);
                            simNumber.setVisibility(View.VISIBLE);
                        } else {
                            simNumber.setText("");
                            simNumber.setVisibility(View.GONE);
                        }
                        return true;
                    }else if(view.getId() == R.id.sim_slot) {
                        TextView simSlot = (TextView)view.findViewById(R.id.sim_slot);
                        if(simSlot != null) {
                            if(mSlotVisible)
                                simSlot.setVisibility(View.VISIBLE);
                            else 
                                simSlot.setVisibility(View.GONE);
                        }
                    }
                }
                return false;
            }
        };
        a.setViewBinder(viewBinder);
        //gionee gaoj 2012-7-10 modified for CR00633449 start
        if (mSIMSelectDialog != null && mSIMSelectDialog.isShowing()) {
            //do nothing
        } else {
            mSIMSelectDialog = new AuroraAlertDialog.Builder(ComposeMessageActivity.this)
                .setTitle(getString(R.string.sim_selected_dialog_title))
                .setCancelable(true)
                .setAdapter(a, new DialogInterface.OnClickListener() {
                    @SuppressWarnings("unchecked")
                    public final void onClick(DialogInterface dialog, int which) {
                        updateSendButtonState(false);
                        if (Utils.hasLollipop()) {
                            //Aurora xuyong 2015-04-02 modified for android 5.1+ new feature start
                            mSelectedSimId = (int) mSubInfoList.get(which).getSubscriptionId();
                            //Aurora xuyong 2015-04-02 modified for android 5.1+ new feature end
                        } else {
                            mSelectedSimId = (int) mSimInfoList.get(which).mSimId;
                        }
                        if (it.getIntExtra(SELECT_TYPE, -1) == SIM_SELECT_FOR_SEND_MSG) {
                            confirmSendMessageIfNeeded();
                        } else if (it.getIntExtra(SELECT_TYPE, -1) == SIM_SELECT_FOR_SAVE_MSG_TO_SIM) {
                            Message msg = mSaveMsgHandler.obtainMessage(MSG_SAVE_MESSAGE_TO_SIM_AFTER_SELECT_SIM);
                            msg.obj = it;
                            mSaveMsgHandler.sendMessage(msg);
                            //gionee gaoj 2012-8-27 added for CR00662501 start
                            updateSendButtonState();
                            //gionee gaoj 2012-8-27 added for CR00662501 end
                        }
                        if (it.getIntExtra(SELECT_TYPE, -1) == RESEND_MSG_SELECTED_SIMID && MmsApp.mGnMessageSupport) {
                            MessageItem msgItem = getMessageItem(it.getStringExtra("type"), it.getLongExtra("msgId", -1), false);
                            if (null != msgItem) {
                                msgItem.mSimId = mSelectedSimId;
                                reSendMsg(msgItem);
                            }
                        }
                        dialog.dismiss();
                    }
                })
                .show();
        }
        //gionee gaoj 2012-7-10 modified for CR00633449 end
    }
    //Gionee <guoyx> <2013-06-09> modify for CR00824219 begin
    //add for multi-delete  
    private AuroraAlertDialog confirmMultiDelete() {
        //gionee gaoj 2012-9-20 added for CR00699291 start
        Iterator iter = mMsgListAdapter.getItemList().entrySet().iterator();
        StringBuilder Smsbuf = new StringBuilder();
        StringBuilder Mmsbuf = new StringBuilder();
        // gionee zhouyj 2013-04-01 add for CR00792091 start
        ArrayList<StringBuilder> smsbufList = new ArrayList<StringBuilder>();
        // gionee zhouyj 2013-04-01 add for CR00792091 end
        int i = 0;
        int j = 0;
        while (iter.hasNext()) {
            Map.Entry<Long, Boolean> entry = (Entry<Long, Boolean>) iter.next();
            if (entry.getValue()) {
                if (entry.getKey() > 0) {
                    if (i++ > 0) {
                        Smsbuf.append(" OR _id = ");
                    }
                    Smsbuf.append(Long.toString(entry.getKey()));
                    // gionee zhouyj 2013-04-01 add for CR00792091 start
                    if (i > SQL_MAX_LENGTH) {
                        smsbufList.add(Smsbuf);
                        Smsbuf = new StringBuilder();
                        i = 0;
                    }
                    // gionee zhouyj 2013-04-01 add for CR00792091 end
                } else {
                    if (j++ > 0) {
                        Mmsbuf.append(" OR _id = ");
                    }
                    Mmsbuf.append(Long.toString(-entry.getKey()));
                }
            }
        }
        // gionee zhouyj 2013-04-01 add for CR00792091 start
        if (i > 0) {
            smsbufList.add(Smsbuf);
        }
        final ArrayList<StringBuilder> bufList = new ArrayList<StringBuilder>(smsbufList);
        final int fj = j;
        final int fi = smsbufList.size() > 0 ? 1 : 0;
        // gionee zhouyj 2013-04-01 add for CR00792091 end
        final StringBuilder fSmsBuffer = Smsbuf;
        final StringBuilder fMmsBuffer = Mmsbuf;
        //gionee gaoj 2012-9-20 added for CR00699291 end
        AuroraAlertDialog.Builder builder = new AuroraAlertDialog.Builder(this);//, AuroraAlertDialog.THEME_AMIGO_FULLSCREEN);
        // Aurora xuyong 2014-07-02 added for reject feature start
        if (!mIsFromReject) {
            builder.setTitle(R.string.confirm_dialog_title);
        } else {
            builder.setTitle(R.string.aurora_delete_record_title);
        }
        // Aurora xuyong 2014-07-02 added for reject feature end
        //builder.setIcon(android.R.drawable.ic_dialog_alert);
        builder.setCancelable(true);
        // Aurora xuyong 2014-02-24 added for bug #2580 start
        builder.setOnDismissListener(new DialogInterface.OnDismissListener() {
            
            @Override
            public void onDismiss(DialogInterface dialog) {
                // TODO Auto-generated method stub
                mNeedShowDialog = true;
            }
        });
        // Aurora xuyong 2014-02-24 added for bug #2580 end
        // Aurora xuyong 2014-07-02 added for reject feature start
        if (!mIsFromReject) {
            builder.setMessage(R.string.confirm_delete_selected_messages);
        } else {
            builder.setMessage(R.string.aurora_delete_record_message);
        }
        // Aurora xuyong 2014-07-02 added for reject feature end
        builder.setPositiveButton(R.string.OK, new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
                // Aurora xuyong 2015-02-12 added for repoter feature start
                new TotalCount(ComposeMessageActivity.this, TotalCount.MMS_MODULE_kEY, TotalCount.MSG_DEL_RP, 1).countData();
                // Aurora xuyong 2015-02-12 added for repoter feature end
                // Aurora yudingmin 2014-08-30 modified for bug 8029 start
                AuroraProgressDialog progressDialog = DeleteProgressDialogUtil.getProgressDialog(ComposeMessageActivity.this);
                progressDialog.setCancelable(false);
                mBackgroundQueryHandler.setProgressDialog(progressDialog);
             // Aurora yudingmin 2014-08-30 modified for bug 8029 end
                mBackgroundQueryHandler.showProgressDialog();
                new Thread(new Runnable() {
                    public void run() {
                        //gionee gaoj 2012-9-20 added for CR00699291 start
                        String threaidString = String.valueOf(mConversation.getThreadId());
                        String[] args = {"GnForMultiDelete", threaidString};
                        mBackgroundQueryHandler.setMax(
                                (fi > 0 ? 1 : 0) +
                                (fj > 0 ? 1 : 0));
                        // gionee zhouyj 2013-04-01 add for CR00792091 start
                        for (int ii = 0; ii < bufList.size(); ii++) {
                            final StringBuilder buf = bufList.get(ii);
                            mBackgroundQueryHandler.startDelete(DELETE_MESSAGE_TOKEN,
                                    null, Sms.CONTENT_URI, buf.toString(), args);
                        }
                        // gionee zhouyj 2013-04-01 add for CR00792091 end
                        if (fj > 0) {
                            mBackgroundQueryHandler.startDelete(DELETE_MESSAGE_TOKEN,
                                    null, Mms.CONTENT_URI, fMmsBuffer.toString(), args);
                        }
                        //gionee gaoj 2012-9-20 added for CR00699291 end
                        /*
                        Iterator iter = mMsgListAdapter.getItemList().entrySet().iterator();
                        Uri deleteSmsUri = null;
                        Uri deleteMmsUri = null;
                        String[] argsSms = new String[mMsgListAdapter.getSelectedNumber()];
                        String[] argsMms = new String[mMsgListAdapter.getSelectedNumber()];
                        int i = 0;
                        int j = 0;
                        while (iter.hasNext()) {
                            @SuppressWarnings("unchecked")
                            Map.Entry<Long, Boolean> entry = (Entry<Long, Boolean>) iter.next();
                            if (entry.getValue()) {
                                if (entry.getKey() > 0){
                                    Log.i(TAG, "sms");
                                    argsSms[i] = Long.toString(entry.getKey());
                                    Log.i(TAG, "argsSms[i]" + argsSms[i]);
                                    //deleteSmsUri = ContentUris.withAppendedId(Sms.CONTENT_URI, entry.getKey());
                                    deleteSmsUri = Sms.CONTENT_URI;
                                    i++;
                                } else {
                                    Log.i(TAG, "mms");
                                    argsMms[j] = Long.toString(-entry.getKey());
                                    Log.i(TAG, "argsMms[j]" + argsMms[j]);
                                    //deleteMmsUri = ContentUris.withAppendedId(Mms.CONTENT_URI, -entry.getKey());
                                    deleteMmsUri = Mms.CONTENT_URI;
                                    j++;
                                }
                            }
                        }
                        mBackgroundQueryHandler.setMax(
                                (deleteSmsUri != null ? 1 : 0) +
                                (deleteMmsUri != null ? 1 : 0));
                        if (deleteSmsUri != null) {
                            mBackgroundQueryHandler.startDelete(DELETE_MESSAGE_TOKEN,
                                    null, deleteSmsUri, FOR_MULTIDELETE, argsSms);
                        }
                        if (deleteMmsUri != null) {
                            mBackgroundQueryHandler.startDelete(DELETE_MESSAGE_TOKEN,
                                    null, deleteMmsUri, FOR_MULTIDELETE, argsMms);
                        }*/
                        //gionee gaoj 2012-7-11 added for CR00628364 start
                        if (!MmsApp.mGnMessageSupport) {
                        mMsgListAdapter.mIsDeleteMode = false;
                        runOnUiThread(new Runnable() {
                            public void run() {
                                drawTopPanel(false);
                                // Aurora xuyong 2015-03-03 modified for bug #11860 start
                                drawBottomPanel(true);
                                // Aurora xuyong 2015-03-03 modified for bug #11860 end
                            }
                        });
                        }
                        //gionee gaoj 2012-7-11 added for CR00628364 end
                    }
                }).start();
            }
        });
        builder.setNegativeButton(R.string.no, null);
        return builder.show();
    }
    //Gionee <guoyx> <2013-06-09> modify for CR00824219 end
//a1

    //Gionee <guoyx> <2013-07-03> modify for CR00829344 begin
    public static AuroraActivity getComposeContext() {
        return sCompose == null ? null : sCompose.get();
    }
    //Gionee <guoyx> <2013-07-03> modify for CR00829344 end

    @Override
    public void onShutDown() {
        // gionee zhouyj 2012-07-03 add for CR00629309 start 
        if(MmsApp.mGnMessageSupport && mDestroy) 
            return ;
        // gionee zhouyj 2012-07-03 add for CR00629309 end 
        saveDraft(false);
    }

    /*
    this function is add for read report
    */
    private final int READ_REPORT_DISABLED                      = 0;
    private final int READ_REPORT_SINGLE_MODE_ENABLED           = 1;
    private final int READ_REPORT_GEMINI_MODE_ENABLED_SLOT_0    = 2;
    private final int READ_REPORT_GEMINI_MODE_ENABLED_SLOT_1    = 4;
    private final int READ_REPORT_GEMINI_MODE_ENABLED_BOTH      = READ_REPORT_GEMINI_MODE_ENABLED_SLOT_0|READ_REPORT_GEMINI_MODE_ENABLED_SLOT_1;
    
    //Gionee <guoyx> <2013-07-03> modify for CR00829344 begin
    private void checkAndSendReadReport() {
        final Context ct = ComposeMessageActivity.this;
        final long threadId = mConversation.getThreadId();        
        Log.d(MmsApp.TXN_TAG,"checkAndSendReadReport,threadId:"+threadId);
        new Thread(new Runnable() {
            public void run() {
                SharedPreferences prefs = AuroraPreferenceManager.getDefaultSharedPreferences(ct);
                int rrAllowed = READ_REPORT_DISABLED;
                long simId1 = -1;
                long simId2 = -1;
                if (MmsApp.mGnMultiSimMessage) {
                // Aurora xuyong 2014-08-05 added for bug #7249 start
                    if (mSIMInfo1 == null) {
                    	try {
                            mSIMInfo1 = SIMInfo.getSIMInfoBySlot(ct, 0);
	                    } catch (IllegalArgumentException e) {
	                        e.printStackTrace();
	                    } catch (SQLiteException e) {
	                		e.printStackTrace();
	                	}
                        // Aurora xuyong 2014-11-17 added for bug #9803 start
                        MessageUtils.addSIMInfo(mSIMInfo1);
                        // Aurora xuyong 2014-11-17 added for bug #9803 end
                    }
                    if (mSIMInfo1 != null) {
                        // Aurora xuyong 2014-05-26 modified for multisim feature start
                        if (prefs.getBoolean(MessagingPreferenceActivity.READ_REPORT_AUTO_REPLY, false) == true) {
                        // Aurora xuyong 2014-05-26 modified for multisim feature end
                            rrAllowed = READ_REPORT_GEMINI_MODE_ENABLED_SLOT_0;
                        }
                        simId1 = mSIMInfo1.mSimId;
                        Log.d(MmsApp.TXN_TAG,"slot0 simId is:"+ simId1);
                    }
                    if (mSIMInfo2 == null) {
                    	try {
                        	mSIMInfo2 = SIMInfo.getSIMInfoBySlot(ct, 1);
	                    } catch (IllegalArgumentException e) {
	                        e.printStackTrace();
	                    } catch (SQLiteException e) {
	                		e.printStackTrace();
	                	}
                        // Aurora xuyong 2014-11-17 added for bug #9803 start
                        MessageUtils.addSIMInfo(mSIMInfo2);
                        // Aurora xuyong 2014-11-17 added for bug #9803 end
                    }
                    if (mSIMInfo2 != null) {
                        // Aurora xuyong 2014-05-26 modified for multisim feature start
                        if (prefs.getBoolean(MessagingPreferenceActivity.READ_REPORT_AUTO_REPLY, false) == true) {
                        // Aurora xuyong 2014-05-26 modified for multisim feature end
                            rrAllowed += READ_REPORT_GEMINI_MODE_ENABLED_SLOT_1;
                        }
                        simId2 = mSIMInfo2.mSimId;
                        Log.d(MmsApp.TXN_TAG,"slot1 simId is:"+ simId2);
                  // Aurora xuyong 2014-08-05 added for bug #7249 end
                    }
                } else {
                    if (prefs.getBoolean(MessagingPreferenceActivity.READ_REPORT_AUTO_REPLY, false) == true) {
                        rrAllowed = READ_REPORT_SINGLE_MODE_ENABLED;
                    }
                }
                Log.d(MmsApp.TXN_TAG,"rrAllowed="+rrAllowed);
                // if read report is off, mark the mms read report status readed.
                if (rrAllowed == READ_REPORT_DISABLED) {
                    ContentValues values = new ContentValues(1);
                    String where = Mms.THREAD_ID + " = " + threadId + " and " + Mms.READ_REPORT + " = 128";
                    // update uri inbox is not used, must indicate here.
                    where += " and " + Mms.MESSAGE_BOX + " = " + Mms.MESSAGE_BOX_INBOX;
                    values.put(Mms.READ_REPORT, PduHeaders.READ_STATUS__DELETED_WITHOUT_BEING_READ);
                    SqliteWrapper.update(ct, ct.getContentResolver(), Mms.Inbox.CONTENT_URI,
                                        values,
                                        where,
                                        null);
                    return;
                }
                if (rrAllowed > READ_REPORT_DISABLED) {
                    String suffix = "";
                    switch (rrAllowed) {
                    case READ_REPORT_SINGLE_MODE_ENABLED:
                        //nothing to do in single card mode
                        break;
                    case READ_REPORT_GEMINI_MODE_ENABLED_SLOT_0:
                        //slot 0 has card and read report on
                        suffix = " and " + Mms.SIM_ID + " = " + simId1;
                        //mark slot 1 card readed, because it off read report.
                        if (simId2 != -1) {
                            Log.d(MmsApp.TXN_TAG, "mark slot 1 card readed");
                            markReadReportProcessed(ct, threadId, simId2);
                        }
                        break;
                    case READ_REPORT_GEMINI_MODE_ENABLED_SLOT_1:
                        //slot 1 has card and read report on
                        suffix = " and " + Mms.SIM_ID + " = " + simId2;
                        //mark slot 0 card readed, because it off read report.
                        if (simId1 != -1) {
                            Log.d(MmsApp.TXN_TAG,"mark slot 0 card readed");
                            markReadReportProcessed(ct, threadId, simId1);
                        }
                        break;
                    case READ_REPORT_GEMINI_MODE_ENABLED_BOTH:
                        //both slot has card and on.
                        suffix = " and (" + Mms.SIM_ID + " = " + simId2 + " or " + Mms.SIM_ID + " = " + simId1 +")"; 
                        break;
                    default:
                        Log.e(MmsApp.TXN_TAG,"impossible value for rrAllowed.");
                        break;
                    }
                    boolean networkOk = ((ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE))
                                        .getNetworkInfo(ConnectivityManager.TYPE_MOBILE_MMS).isAvailable();
                    int airplaneMode = Settings.System.getInt(ct.getContentResolver(), Settings.System.AIRPLANE_MODE_ON, 0);                    
                    //network not ok.next time will try.
                    if ((networkOk != true)||(airplaneMode == 1)) {
                        Log.d(MmsApp.TXN_TAG, "networkok:"+networkOk+",airplaneMode:"+airplaneMode);
                        return;
                    }
                    Cursor cs = null;
                    try {
                        String where = Mms.THREAD_ID + " = " + threadId + " and " + Mms.READ_REPORT + " = 128" + suffix;
                        cs = SqliteWrapper.query(ct, ct.getContentResolver(),Mms.Inbox.CONTENT_URI,
                                                new String[]{Mms._ID, Mms.SIM_ID},
                                                where,
                                                null, null);
                        if (cs != null) {
                            final int count = cs.getCount();
                            if (count > 0) {
                                //mark the ones need send read report status to pending as 130.
                                ContentValues values = new ContentValues(1);
                                values.put(Mms.READ_REPORT, 130);
                                // update uri inbox is not used, must indicate here.
                                where += " and " + Mms.MESSAGE_BOX + " = " + Mms.MESSAGE_BOX_INBOX;
                                SqliteWrapper.update(ct, ct.getContentResolver(), Mms.Inbox.CONTENT_URI,
                                                    values,
                                                    where,
                                                    null);
                                //show a toast.
                                runOnUiThread(new Runnable() {
                                    public void run() {
                                        Toast.makeText(ct,
                                                    ct.getResources().getQuantityString(R.plurals.read_report_toast_msg, count, count),
                                                    Toast.LENGTH_SHORT).show();
                                    }
                                });
                            }
                            startSendReadReport(cs);
                        }
                    } catch (Exception e) {
                        Log.e(MmsApp.TXN_TAG,"exception happend when scan read report!:"+e.getMessage());
                    } finally {
                        if (cs != null) {
                            cs.close();
                        }
                    }
                }
            }

            private void markReadReportProcessed(Context ct, long threadId, long simId) {
                ContentValues values = new ContentValues(1);
                values.put(Mms.READ_REPORT, PduHeaders.READ_STATUS__DELETED_WITHOUT_BEING_READ);
                String where = Mms.THREAD_ID + " = " + threadId + " and " + Mms.READ_REPORT + " = 128"
                                    + " and " + Mms.SIM_ID + " = " + simId;
                // update uri inbox is not used, must indicate here.
                where += " and " + Mms.MESSAGE_BOX + " = " + Mms.MESSAGE_BOX_INBOX;                
                SqliteWrapper.update(ct, ct.getContentResolver(), Mms.Inbox.CONTENT_URI,
                                    values,
                                    where,
                                    null);
            }
            
            private void startSendReadReport(final Cursor cursor) {
                cursor.moveToPosition(-1);
                while (cursor.moveToNext()) {
                    Log.d(MmsApp.TXN_TAG,"send an intent for read report.");
                    long msgId = cursor.getLong(0);
                    Intent rrIntent = new Intent(ct, TransactionService.class);
                    rrIntent.putExtra("uri",Mms.Inbox.CONTENT_URI+"/"+msgId);//the uri of mms that need send rr
                    rrIntent.putExtra("type",Transaction.READREC_TRANSACTION);
                    if (MmsApp.mGnMultiSimMessage) {
                        int simId = cursor.getInt(1);
                        Log.d(MmsApp.TXN_TAG,"simId:"+simId);
                        rrIntent.putExtra("simId", simId);
                    }
                    ct.startService(rrIntent);
                }
            }
        }).start();
    }
    
    /**
     * Remove the number which is the same as any one before;
     * When the count of recipients over the limit, make a toast and remove the recipients over the limit.
     * @param recipientsString the numbers slipt by ','.
     * @return recipientsString the numbers slipt by ',' after modified.
     */
    private String getStringForMultipleRecipients(String recipientsString) {
        recipientsString = recipientsString.replaceAll(",", ";");
        String[] recipients_all = recipientsString.split(";");
        List<String> recipientsList = new ArrayList<String>();
        for (String recipient : recipients_all) {
            recipientsList.add(recipient);
        }

        Set<String> recipientsSet = new HashSet<String>();
        recipientsSet.addAll(recipientsList);

        if (recipientsSet.size() > RECIPIENTS_LIMIT_FOR_SMS) {
            toastTooManyRecipients(recipients_all.length);
        }

        recipientsList.clear();
        recipientsList.addAll(recipientsSet);

        recipientsString = "";
        int count = recipientsList.size() > RECIPIENTS_LIMIT_FOR_SMS ? RECIPIENTS_LIMIT_FOR_SMS : recipientsList.size();
        for(int i = 0; i < count; i++) {
            if (i == (count - 1)) {
                recipientsString += recipientsList.get(i);
            } else {
                recipientsString += recipientsList.get(i) + ";";
            }
        }
        return recipientsString;
    }
    
    private void addLeMeiImage(Uri uri, boolean append) {
        if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
            log("addImage: append=" + append + ", uri=" + uri);
        }
        // For CU spec, the max image size is 100K.
        MmsConfig.setUserSetMmsSizeLimit(IMAGE_SIZE_MINI);
        int result = mWorkingMessage.setAttachment(WorkingMessage.IMAGE, uri,
                append);

        if (result == WorkingMessage.IMAGE_TOO_LARGE
                || result == WorkingMessage.MESSAGE_SIZE_EXCEEDED) {
            if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
                log("addImage: resize image " + uri);
            }
            MessageUtils.resizeImageAsync(this, uri, mAttachmentEditorHandler,
                    mResizeImageCallback, append);
            return;
        } else if (result == WorkingMessage.WARNING_TYPE) {
            mCreationUri = uri;
            mCreationAppend = append;
            runOnUiThread(new Runnable() {
                public void run() {
                    showConfirmDialog(mCreationUri, mCreationAppend,
                            WorkingMessage.IMAGE,
                            R.string.confirm_restricted_image);
                }
            });
            return;
        }
        handleAddAttachmentError(result, R.string.type_picture);
    }

    private void addLeMeiVideo(Uri uri, boolean append) {
        if (uri != null) {
             // For CU spec, the video size is 300K.
            MmsConfig.setUserSetMmsSizeLimit(AUDIO_VIDEO_SIZE_MINI);
            int result = mWorkingMessage.setAttachment(WorkingMessage.VIDEO,
                    uri, append);
            if (result == WorkingMessage.UNSUPPORTED_TYPE) {
                addLeMeiImage(uri, append);
            } else if (result == WorkingMessage.WARNING_TYPE) {
                showConfirmDialog(uri, append, WorkingMessage.VIDEO,
                        R.string.confirm_restricted_video);
            } else {
                handleAddAttachmentError(result, R.string.type_video);
            }
        }
    }

    private void addLeMeiAudio(Uri uri, boolean append) {
        Log.i(TAG, "Enter addAudio");
        MmsConfig.setUserSetMmsSizeLimit(AUDIO_VIDEO_SIZE_MINI);
        int result = mWorkingMessage.setAttachment(WorkingMessage.AUDIO, uri,
                append);
        if (result == WorkingMessage.WARNING_TYPE) {
            showConfirmDialog(uri, false, WorkingMessage.AUDIO,
                    R.string.confirm_restricted_audio);
            return;
        }
        handleAddAttachmentError(result, R.string.type_audio);
    }

    private void addLeMeiAudio(Uri uri) {
        MmsConfig.setUserSetMmsSizeLimit(AUDIO_VIDEO_SIZE_MINI);
        int result = mWorkingMessage.setAttachment(WorkingMessage.AUDIO, uri,
                false);
        if (result == WorkingMessage.WARNING_TYPE) {
            showConfirmDialog(uri, false, WorkingMessage.AUDIO,
                    R.string.confirm_restricted_audio);
            return;
        }
        handleAddAttachmentError(result, R.string.type_audio);
    }
    
    private void addLeMeiAttachment(String type, Uri uri, boolean append) {
        if (uri != null) {
            // When we're handling Intent.ACTION_SEND_MULTIPLE, the passed in items can be
            // videos, and/or images, and/or some other unknown types we don't handle. When
            // a single attachment is "shared" the type will specify an image or video. When
            // there are multiple types, the type passed in is "*/*". In that case, we've got
            // to look at the uri to figure out if it is an image or video.
            boolean wildcard = "*/*".equals(type);
            Log.i(TAG, "Got send intent mimeType :" + type);
            if (type.startsWith("image/") || 
                    (wildcard && uri.toString().startsWith(mImageUri))) {
                addLeMeiImage(uri, append);
            } else if (type.startsWith("video/") ||
                    (wildcard && uri.toString().startsWith(mVideoUri))) {
                addLeMeiVideo(uri, append);
            } else if (type.startsWith("audio/") || 
                    (wildcard && uri.toString().startsWith(mAudioUri))) {
                addLeMeiAudio(uri, append);
            }
        }
    }
    
    private void getSimInfoListForLeMei() {
        // mSimInfoList = SIMInfo.getInsertedSIMList(this);
        if (MmsApp.mGnMultiSimMessage == true) {
            mSimInfoList = new ArrayList<SIMInfo>();
            if (mSimDis == 0) {
                // add both two card.
             // Aurora xuyong 2014-08-05 modified for bug #7249 start
                if (mSIMInfo1 == null) {
                    // Aurora xuyong 2015-05-26 modified for bug #13707 start
                	try {
	                    mSIMInfo1 = SIMInfo.getSIMInfoBySlot(this,
	                        GnPhone.GEMINI_SIM_1);
                	} catch (IllegalArgumentException e) {
                        e.printStackTrace();
                    } catch (SQLiteException e) {
                		e.printStackTrace();
                	}
                    // Aurora xuyong 2015-05-26 modified for bug #13707 end
                    // Aurora xuyong 2014-11-17 added for bug #9803 start
                    MessageUtils.addSIMInfo(mSIMInfo1);
                    // Aurora xuyong 2014-11-17 added for bug #9803 end
                }
                if (mSIMInfo2 == null) {
                    // Aurora xuyong 2015-05-26 modified for bug #13707 start
                	try {
	                    mSIMInfo2 = SIMInfo.getSIMInfoBySlot(this,
	                        GnPhone.GEMINI_SIM_2);
                	} catch (IllegalArgumentException e) {
                        e.printStackTrace();
                    } catch (SQLiteException e) {
                		e.printStackTrace();
                	}
                    // Aurora xuyong 2015-05-26 modified for bug #13707 end
                    // Aurora xuyong 2014-11-17 added for bug #9803 start
                    MessageUtils.addSIMInfo(mSIMInfo2);
                    // Aurora xuyong 2014-11-17 added for bug #9803 end
                }
                if (mSIMInfo1 != null && mSIMInfo2 != null) {
                    mSimInfoList.add(mSIMInfo1);
                    mSimInfoList.add(mSIMInfo2);
                }
            } else if (mSimDis == 1) {
                // add sim2
                if (mSIMInfo2 == null) {
                    // Aurora xuyong 2015-05-26 modified for bug #13707 start
                	try {
	                    mSIMInfo2 = SIMInfo.getSIMInfoBySlot(this,
	                        GnPhone.GEMINI_SIM_2);
                	} catch (IllegalArgumentException e) {
                        e.printStackTrace();
                    } catch (SQLiteException e) {
                		e.printStackTrace();
                	}
                    // Aurora xuyong 2015-05-26 modified for bug #13707 end
                    // Aurora xuyong 2014-11-17 added for bug #9803 start
                    MessageUtils.addSIMInfo(mSIMInfo2);
                    // Aurora xuyong 2014-11-17 added for bug #9803 end
                }
                if (mSIMInfo2 != null) {
                    Log.i(TAG, "sim2Info is null");
                    mSimInfoList.add(mSIMInfo2);
                }
            } else if (mSimDis == 2) {
                // add sim1;
                if (mSIMInfo1 == null) {
                    // Aurora xuyong 2015-05-26 modified for bug #13707 start
                	try {
	                    mSIMInfo1 = SIMInfo.getSIMInfoBySlot(this,
	                        GnPhone.GEMINI_SIM_1);
                	} catch (IllegalArgumentException e) {
                        e.printStackTrace();
                    } catch (SQLiteException e) {
                		e.printStackTrace();
                	}
                    // Aurora xuyong 2015-05-26 modified for bug #13707 end
                    // Aurora xuyong 2014-11-17 added for bug #9803 start
                    MessageUtils.addSIMInfo(mSIMInfo1);
                    // Aurora xuyong 2014-11-17 added for bug #9803 end
                }
                if (mSIMInfo1 != null) {
                    Log.i(TAG, "sim1Info is null");
                    mSimInfoList.add(mSIMInfo1);
              // Aurora xuyong 2014-08-05 modified for bug #7249 end
                }
            } else {
                mSimInfoList = SIMInfo.getInsertedSIMList(this.getApplicationContext());
            }
            mSimCount = mSimInfoList.isEmpty() ? 0 : mSimInfoList.size();
        } else {
            mSimCount = 1;
        }
    }

    //gionee gaoj 2012-7-4 added for CR00637162 start
    /*private PopupMenu.OnMenuItemClickListener mMenuItemClickListemer = new PopupMenu.OnMenuItemClickListener() {
        @Override
        public boolean onMenuItemClick(MenuItem item) {
            // TODO Auto-generated method stub
            switch(item.getItemId()) {
            case R.id.gn_multi_selection:
                isSelectedAll = !isSelectedAll;
                markCheckedState(isSelectedAll);
                if(isSelectedAll) {
                    for(int i = 0; i < mSelectMap.size(); i++) {
                        mSelectMap.put(i, true);
                    }
//                    selectAllItems();
//                    mIsMultiStar = isMultiStar();
                } else {
                    for(int i = 0; i < mSelectMap.size(); i++) {
                        mSelectMap.put(i, false);
                    }
//                    mSelectItems.clear();
                    if (mMsgListAdapter.mIsDeleteMode) {
                        onFinishMultiChoose();
                    }
                }
                mMsgListAdapter.initStaredMaps(mMsgListAdapter.getCursor());
                mDeleteImageButton.setEnabled(mMsgListAdapter.getSelectedNumber() >= 1 ? true : false);
                if (MmsApp.mLightTheme) {
                    mDeleteImageButton.setImageResource(mMsgListAdapter.getSelectedNumber() >= 1 ? R.drawable.gn_com_delete_bg : R.drawable.gn_com_delete_unuse_bg);
                } else {
                    mDeleteImageButton.setImageResource(mMsgListAdapter.getSelectedNumber() >= 1 ? R.drawable.gn_com_delete_dark_bg : R.drawable.gn_com_delete_unuse_dark_bg);
                }
                setMulImageButton(mMsgListAdapter.getSelectedNumber() >= 1 ? true : false);
                updateSelectionMenu();
                break;
            }
            return true;
        }
    };*/
    //gionee gaoj 2012-7-4 added for CR00637162 end

    public Conversation getConversation() {
        return mConversation;
    }
    
    private void showQuickTextDialog() {
        mQuickTextDialog = null;
        //if (mQuickTextDialog == null) {
            List<String> quickTextsList = new ArrayList<String>();

            // add user's quick text
            //gionee gaoj 2012-5-5 added for CR00576332 start
            Cursor cursor = null;
            if (MmsApp.mGnMessageSupport) {
                cursor = getContentResolver().query(
                        MmsSms.CONTENT_URI_QUICKTEXT, null, null, null,
                        "_id desc");
            } else {
            //gionee gaoj 2012-5-5 added for CR00576332 end
            cursor = getContentResolver().query(MmsSms.CONTENT_URI_QUICKTEXT, null, null, null, null);
            //gionee gaoj 2012-5-5 added for CR00576332 start
            }
            //gionee gaoj 2012-5-5 added for CR00576332 end
            if (cursor != null) {
                while (cursor.moveToNext()) {
                    quickTextsList.add(cursor.getString(1));
                }
                cursor.close();
            }

            //gionee gaoj 2012-5-5 added for CR00576332 start
            if (!MmsApp.mGnMessageSupport) {
                //gionee gaoj 2012-5-5 added for CR00576332 end
            // add default quick text
            String[] default_quick_texts = getResources().getStringArray(R.array.default_quick_texts);
            for (int i = 0; i < default_quick_texts.length; i++) {
                quickTextsList.add(default_quick_texts[i]);
            }
            //gionee gaoj 2012-5-5 added for CR00576332 start
            }
            //gionee gaoj 2012-5-5 added for CR00576332 end

            List<Map<String, ?>> entries = new ArrayList<Map<String, ?>>();
            for (String text : quickTextsList) {
                HashMap<String, Object> entry = new HashMap<String, Object>();
                entry.put("text", text);
                entries.add(entry);
            }

            //gionee gaoj 2012-5-5 added for CR00555790 start
            SimpleAdapter adapter = null;
            if (MmsApp.mTransparent) {
                adapter = new SimpleAdapter( this, entries, R.layout.gn_quick_text_list_item, 
                        new String[] {"text"}, new int[] {R.id.quick_text});
            } else {
                adapter = new SimpleAdapter( this, entries, R.layout.quick_text_list_item, 
                        new String[] {"text"}, new int[] {R.id.quick_text});
            }
            final SimpleAdapter qtAdapter = adapter;
            //gionee gaoj 2012-5-5 added for CR00555790 end
            AuroraAlertDialog.Builder qtBuilder = new AuroraAlertDialog.Builder(this);

            qtBuilder.setTitle(getString(R.string.select_quick_text));
            qtBuilder.setCancelable(true);
            qtBuilder.setAdapter(qtAdapter, new DialogInterface.OnClickListener() {
                @SuppressWarnings("unchecked")
                public final void onClick(DialogInterface dialog, int which) {
                    HashMap<String, Object> item = (HashMap<String, Object>) qtAdapter.getItem(which);
                    if (mSubjectTextEditor != null && mSubjectTextEditor.isFocused()){
                        insertText(mSubjectTextEditor, (String)item.get("text"));
                    } else {
                        insertText(mTextEditor, (String)item.get("text"));
                    }
                    dialog.dismiss();
                }
            });
            mQuickTextDialog = qtBuilder.create();
        //}
        mQuickTextDialog.show();
    }

//MTK_OP01_PROTECT_START
    // add for text zoom
    /*private void initZoomResourceRefs() {
        mZoomIn = (ImageButton) findViewById(R.id.zoomIn);
        mZoomOut = (ImageButton) findViewById(R.id.zoomOut);
        
        mZoomIn.setVisibility(View.GONE);
        mZoomOut.setVisibility(View.GONE);
        
        mZoomIn.setOnClickListener(new android.view.View.OnClickListener() {
            @Override
            public void onClick(View v) {
                changeTextZoom(true);
            }
        });
        mZoomOut.setOnClickListener(new android.view.View.OnClickListener() {
            @Override
            public void onClick(View v) {
                changeTextZoom(false);
            }
        });
    }*/

    /*private void setZoomVisibility(int visible) {
        //gionee wangym 2012-11-22 add for CR00735223 start
        if(MmsApp.mIsTouchModeSupport )
       {
           mZoomIn.setVisibility(View.GONE);
           mZoomOut.setVisibility(View.GONE);
       }
        else
       {
        mZoomIn.setVisibility(visible);
        mZoomOut.setVisibility(visible);
        }
        //gionee wangym 2012-11-22 add for CR00735223 end
    }*/

    /*private int changeTextZoom(boolean zoomIn) {
        if (zoomIn) {
            if (mCurrentSize <= MIN_TEXT_SIZE) {
                mZoomOut.setEnabled(true);
            }
            int size = mCurrentSize + TEXT_SIZE_CHANGE;
            if (size >= MAX_TEXT_SIZE) {
                mCurrentSize = MAX_TEXT_SIZE;
                mZoomIn.setEnabled(false);
            } else {
                mCurrentSize = size;
            }
            Log.i(TAG, "zoom in, got currentSize is: " + mCurrentSize);
        } else {
            if (mCurrentSize >= MAX_TEXT_SIZE) {
                mZoomIn.setEnabled(true);
            }
            int size = mCurrentSize - TEXT_SIZE_CHANGE;
            if (size <= MIN_TEXT_SIZE) {
                mCurrentSize = MIN_TEXT_SIZE;
                mZoomOut.setEnabled(false);
            } else {
                mCurrentSize = size;
            }
            Log.i(TAG, "zoom out, got currentSize is: " + mCurrentSize);
        }
        mMsgListAdapter.setTextSize(mCurrentSize);
        mMsgListAdapter.notifyDataSetChanged();
        return mCurrentSize;
    }*/
//MTK_OP01_PROTECT_END
    //gionee gaoj 2012-4-10 added for CR00555790 start
    private void starMessage(MessageItem msgItem, boolean star) {
        Uri uri = Mms.CONTENT_URI;
        if ("sms".equals(msgItem.mType)) {
            uri = Sms.CONTENT_URI;
        }

        final Uri starUri = ContentUris.withAppendedId(uri, msgItem.mMsgId);

        final ContentValues values = new ContentValues(1);
        values.put("star", star ? 1 : 0);

        new Thread(new Runnable() {
            public void run() {
                getContentResolver().update(starUri,
                        values, null, null);
            }
        }, "starMessage").start();
    }
    
    // gionee zhouyj 2012-07-05 add for CR00637457 start
    private void starMessage(String ids, boolean star) {
        final Uri uri = Uri.parse("content://sms/star_more/" + ids);
        final ContentValues values = new ContentValues(1);
        values.put("star", star ? 1 : 0);
        new Thread(new Runnable() {
            public void run() {
                getContentResolver().update(uri,
                        values, null, null);
            }
        }, "starMessage").start();
    }
    // gionee zhouyj 2012-07-05 add for CR00637457 end

    private void encryptiontoast(boolean hasencryption) {
        final int resId = hasencryption ? R.string.gn_confirm_encryption
                : R.string.gn_confirm_dncryption;
        Toast.makeText(this, resId, Toast.LENGTH_SHORT).show();
    }

    private void inputencryption() {
        DevicePolicyManager DPM = (DevicePolicyManager) getSystemService(Context.DEVICE_POLICY_SERVICE);
        int quality = DevicePolicyManager.PASSWORD_QUALITY_ALPHABETIC;
        int minQuality = DPM.getPasswordQuality(null);
        if (quality < minQuality) {
            quality = minQuality;
        }
        if (quality >= DevicePolicyManager.PASSWORD_QUALITY_NUMERIC) {
            int minLength = DPM.getPasswordMinimumLength(null);
            if (minLength < MIN_PASSWORD_LENGTH) {
                minLength = MIN_PASSWORD_LENGTH;
            }
            final int maxLength = DPM.getPasswordMaximumLength(quality);
            Intent intent = new Intent(ComposeMessageActivity.this,
                    MsgChooseLockPassword.class);
            intent.putExtra(LockPatternUtils.PASSWORD_TYPE_KEY, quality);
            intent.putExtra(MsgChooseLockPassword.PASSWORD_MIN_KEY, minLength);
            intent.putExtra(MsgChooseLockPassword.PASSWORD_MAX_KEY, maxLength);
            startActivityForResult(intent, ConvFragment.UPDATE_PASSWORD_REQUEST);
        }
    }

    private void checkencryption(Bundle bundle) {
        Intent intent = getIntent();
        Conversation conversation = null;

        boolean viewAttachment = false;
        if (bundle != null) {
            viewAttachment = bundle.getBoolean("viewattachment");
            Long threadId = bundle.getLong("thread", 0);
            conversation = Conversation.get(this, threadId, false);
        }

        long threadId = intent.getLongExtra("thread_id", 0);
        if (threadId > 0) {
            conversation = Conversation.get(this, threadId, false);
        } else {
            Uri intentData = intent.getData();
            if (intentData != null) {
                if (intentData.getPathSegments().size() < 2) {
                    String recipientStr = intentData.getSchemeSpecificPart();
                    recipientStr = recipientStr.replaceAll(",", ";");
                    String[] recipients_all = recipientStr.split(";");
                    if (recipients_all.length > RECIPIENTS_LIMIT_FOR_SMS) {
                        recipientStr = "";
                        for (int i = 0; i < RECIPIENTS_LIMIT_FOR_SMS; i++) {
                            if (i == (RECIPIENTS_LIMIT_FOR_SMS - 1)) {
                                recipientStr += recipients_all[i];
                            } else {
                                recipientStr += (recipients_all[i] + ";");
                            }
                        }
                        toastTooManyRecipients(recipients_all.length);
                    }
                    recipientStr = recipientStr.replaceAll("-", "");
                    ContactList list = ContactList.getByNumbers(this, recipientStr, true, true);
                    if (list.size() < 1) {
                        Contact entry = Contact.get(intentData.getSchemeSpecificPart(), false);
                        list.add(entry);
                        conversation = Conversation.get(this, list, true);
                        return;
                    }
                    conversation = Conversation.get(this, list, false);
                } else {
                    conversation = Conversation.get(this, intentData, false);
                }
            }
        }
        if (conversation != null && conversation.getEncryption() && viewAttachment == false && !ConvFragment.isEncryptionList) {
            final Intent intentinput = new Intent();
            intentinput.setClass(this, MsgChooseLockPassword.class);
            intentinput.putExtra("isdecryption", true);
            startActivityForResult(intentinput, ConvFragment.CONFIRM_PASSWORD_REQUEST);
        }
    }

    private void updateEncryption(){
        long threadid = mConversation.getThreadId();
        Uri threadiduri = Uri.parse("content://mms-sms/encryption/" + threadid);
        int update = mConversation.updatethreads(getApplicationContext(), threadiduri,
                mConversation.getEncryption());
        if (update > 0) {
            encryptiontoast(mConversation.getEncryption());
            mConversation.updateNotification();
        }
    }

    private static final int HEIGHT_LANDSCAPE = 105;
    //gionee gaoj added for CR00725602 20121201 start
    private static final int HEIGHT_PORTRAIT = 256;
    //gionee gaoj added for CR00725602 20121201 end

    private int getOptimisedMetrics(int metrics){
        DisplayMetrics dm = new DisplayMetrics();
        this.getWindowManager().getDefaultDisplay().getMetrics(dm);
        return metrics * dm.densityDpi / DisplayMetrics.DENSITY_MEDIUM;
    }

    private void ajustAttachmentViewSlideHeight() {
        if(mIsLandscape == true){
            int height = getOptimisedMetrics(HEIGHT_LANDSCAPE);
            ViewGroup.LayoutParams lp = mAttachmentSlideView.getLayoutParams();
            if(lp == null){
                lp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, height);
            }else{
                lp.height = height;
            }
            mAttachmentSlideView.setLayoutParams(lp);
        }else{
            // Aurora xuyong 2013-10-12 modified for aurora's new feature start 
            DisplayMetrics dm = new DisplayMetrics();
            this.getWindowManager().getDefaultDisplay().getMetrics(dm);
            // Aurora xuyong 2015-03-09 modified for aurora's new feature start
            int height = (int)dm.density * 113;//getOptimisedMetrics(HEIGHT_PORTRAIT);
            // Aurora xuyong 2015-03-09 modified for aurora's new feature end
            // Aurora xuyong 2013-10-12 modified for aurora's new feature end
            ViewGroup.LayoutParams lp = mAttachmentSlideView.getLayoutParams();
            if(lp == null){
                lp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, height);
            }else{
                lp.height = height;
            }
            mAttachmentSlideView.setLayoutParams(lp);
        }
    }

    private void showInputMethod(View view) {
        // Aurora xuyong 2014-03-06 added for aurora's new feature start
        if (mAddButton != null) {
            mAddButton.setImageResource(R.drawable.aurora_insert_attch_selector);
        }
        // Aurora xuyong 2014-03-06 added for aurora's new feature end
        if (mAttachmentSlideView != null
                && View.VISIBLE == mAttachmentSlideView.getVisibility()) {
            if(mAttachmentSlideViewCurrent == mAttachmentSlideViewHome){
                mAttachmentSlideView.setVisibility(View.GONE);
            }else{
                showAnAttachmentSlide(mAttachmentSlideViewHome);
                mAttachmentSlideView.setVisibility(View.GONE);
            }
        }
        if (view instanceof AuroraEditText) {
            InputMethodManager inputMethodManager = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
            inputMethodManager.showSoftInput(view, 0);
        }
    }

    /*private boolean isChineseLanguage(){
        String laungue = Locale.getDefault().getLanguage();
        if (laungue != null
                && laungue.equals("zh")) {
            return true;
        }
        return false;
    }*/

    private void showAttachmentSlideView() {
        // Aurora xuyong 2014-03-06 added for aurora's new feature start
        if (mAddButton != null) {
            mAddButton.setImageResource(R.drawable.aurora_back_keyborad_selector);
        }
        // Aurora xuyong 2014-03-06 added for aurora's new feature end
        if(mAttachmentSlideView == null){
            // gionee lwzh modify for CR00774362 20130227 begin
            ViewStub viewStub = (ViewStub) findViewById(R.id.gn_select_attachment);

            if (viewStub != null) {
                mAttachmentSlideView = (ViewAnimator) viewStub.inflate();
            }
            // mAttachmentSlideView =
            // (ViewAnimator)findViewById(R.id.gn_select_attachment);
            // gionee lwzh modify for CR00774362 20130227 end
            
            GnIconTextGridPageSlideShower shower = (GnIconTextGridPageSlideShower)
                                        mAttachmentSlideView.findViewById(R.id.gn_view_slide_shower);
            /*if (!isChineseLanguage()){
                //Non-Chinese language tends to be long strings, so we use a different layout
                shower.setPageLayoutResId(0, R.layout.gn_attachment_gridpage_foreign_lang);
            }*/
            shower.setup();
            mAttachmentSlideViewHome = shower;
            mAttachmentSlideViewCurrent = shower;
            shower.setOnItemClickListener(new OnItemClickListener(){
                @Override
                public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                    //find if inflated
                    View foundView = mAttachmentSlideView.findViewWithTag(id);
                    if(foundView != null){
                        showAnAttachmentSlide(foundView);
                    //Aurora xuyong 2013-10-11 modified for aurora's new feature start
                    }else if(id == R.drawable.aurora_attach_smily_selector /*|| id == R.drawable.gn_select_attachment_smiley_dark*/){
                    //Aurora xuyong 2013-10-11 modified for aurora's new feature end
                        ViewStub stub = (ViewStub) mAttachmentSlideView
                                .findViewById(R.id.gn_select_emoticons_stub);
                        if(stub != null){
                            ViewGroup emoticonView = (ViewGroup)stub.inflate();
                            buildEmoticonView(emoticonView);
                            emoticonView.setTag(id);
                            showAnAttachmentSlide(emoticonView);
                        }
                    } /*else if(id == R.drawable.gn_select_attachment_quick_text || id == R.drawable.gn_select_attachment_quick_text_dark){
                        showQuickTextDialog();
                    }else if(id == R.drawable.gn_select_attachment_subject || id == R.drawable.gn_select_attachment_subject_dark){
                        // gionee zhouyj 2012-06-29 add for CR00632132 start 
                        if(MmsApp.mGnMessageSupport) {
                            mSubjectEditorFocus = true;
                            mSubjectEditorNull = true;
                        }
                        // gionee zhouyj 2012-06-29 add for CR00632132 end
                        //Gionee <guoyx> <2013-07-25> modify for CR00780083 begin
                        if (mSubjectTextEditor != null 
                                && mSubjectTextEditor.getVisibility() == View.VISIBLE) {
                            mSubjectTextEditor.requestFocus();
                        } else {
                            showSubjectEditor(true);
                        }
                        //Gionee <guoyx> <2013-07-25> modify for CR00780083 end
                    //Aurora xuyong 2013-10-11 modified for aurora's new feature start
                    }*/else if(id == R.drawable.aurora_attach_photo_selector/* || id == R.drawable.gn_select_attachment_gallery_dark*/){
                    //Aurora xuyong 2013-10-11 modified for aurora's new feature end
                        MessageUtils.selectImage(ComposeMessageActivity.this, REQUEST_CODE_ATTACH_IMAGE);
                    //Aurora xuyong 2013-10-11 modified for aurora's new feature start
                    }else if(id == R.drawable.aurora_attach_camera_selector/* || id == R.drawable.gn_select_attachment_camera_dark*/){
                    //Aurora xuyong 2013-10-11 modified for aurora's new feature end
                        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                        // Aurora xuyong 2013-11-20 deleted for bug #903 start
                        // Aurora xuyong 2013-11-26 modified for aurora's new feature satrt
                        File localfile = new File(Mms.ScrapSpace.SCRAP_FILE_PATH);
                        if (!localfile.exists()) {
                            localfile.getParentFile().mkdirs();
                        }
                        Uri localUri = Uri.fromFile(localfile);
                        intent.putExtra(MediaStore.EXTRA_OUTPUT, localUri);
                        // Aurora xuyong 2013-11-26 modified for aurora's new feature end
                        // Aurora xuyong 2013-11-20 deleted for bug #903 end
                        startActivityForResult(intent, REQUEST_CODE_TAKE_PICTURE);
                    //Aurora xuyong 2013-10-11 modified for aurora's new feature start
                    }else if(id == R.drawable.aurora_attach_video_selector/* || id == R.drawable.gn_select_attachment_video_dark*/){
                    //Aurora xuyong 2013-10-11 modified for aurora's new feature end
                        // Aurora liugj 2013-09-30 modified for aurora's new feature start
                            setAuroraMenuAdapter(null);
                            // Aurora liugj 2013-09-30 modified for aurora's new feature end
                        setAuroraMenuItems(R.menu.aurora_attachment_vedio_menu);
                        // Aurora xuyong 2013-11-20 modify for monkey-running checked exception start
                        try {
                            showAuroraMenu();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        // Aurora xuyong 2013-11-20 modify for monkey-running checked exception end
                        //MessageUtils.selectVideo(ComposeMessageActivity.this, REQUEST_CODE_ATTACH_VIDEO);
                    }/*else if(id == R.drawable.gn_select_attachment_record_video || id == R.drawable.gn_select_attachment_record_video_dark){
                        int currentSlideSize = 0;
                        SlideshowModel slideShow = mWorkingMessage.getSlideshow();
                        // Set video size limit. Subtract 1K for some text.
                        long sizeLimit = MmsConfig.getUserSetMmsSizeLimit(true) - SlideshowModel.SLIDESHOW_SLOP - TEXT_SPACE;

                        if (sizeLimit > 0) {
                            //int durationLimit = getVideoCaptureDurationLimit();
                            // gionee zhouyj 2012-04-21 modified for CR00576337 start
                             annotated by zhouyj
                            Intent intent = new Intent(MediaStore.ACTION_VIDEO_CAPTURE);
                            intent.putExtra(MediaStore.EXTRA_VIDEO_QUALITY, 0);
                            intent.putExtra("android.intent.extra.sizeLimit", sizeLimit);
                            intent.putExtra("android.intent.extra.durationLimit", durationLimit);
                            startActivityForResult(intent, REQUEST_CODE_TAKE_VIDEO);
                            
                            // gionee zhouyj 2012-10-18 modify for CR00651210 start 
                                  // Aurora liugj 2013-11-12 modified for bug-554 start
                            //StorageManager mSM = (StorageManager) getApplicationContext().getSystemService(STORAGE_SERVICE);
                            // Aurora xuyong 2013-11-14 modified for S4 adapt start
                       // Aurora xuyong 2014-04-18 modified for bug #4361 start
                            if (hasNoStorage()) {
                       // Aurora xuyong 2014-04-18 modified for bug #4361 end
                            // Aurora xuyong 2013-11-14 modified for S4 adapt end
                                  // Aurora liugj 2013-11-12 modified for bug-554 end
                                Toast.makeText(ComposeMessageActivity.this, getString(R.string.gn_no_storage), Toast.LENGTH_LONG).show();
                            }else if(null == TempFileProvider.getAvailableSdcard(ComposeMessageActivity.this, MmsConfig.getMaxMessageSize())) {
                                Toast.makeText(ComposeMessageActivity.this, getString(R.string.storage_has_no_space),Toast.LENGTH_SHORT).show();
                            } else {
                                MessageUtils.recordVideo(ComposeMessageActivity.this, REQUEST_CODE_TAKE_VIDEO, sizeLimit);
                            }
                            // gionee zhouyj 2012-10-18 modify for CR00651210 end 
                            // gionee zhouyj 2012-04-21 add for CR00576337 end
                        }
                        else {
                            Toast.makeText(ComposeMessageActivity.this,
                                    getString(R.string.message_too_big_for_video),
                                    Toast.LENGTH_SHORT).show();
                        }
                    //Aurora xuyong 2013-10-11 modified for aurora's new feature start
                    }*/else if(id == R.drawable.aurora_attach_audio_selector/* || id == R.drawable.gn_select_attachment_sound_dark*/){
                    //Aurora xuyong 2013-10-11 modified for aurora's new feature end
                        // Aurora liugj 2013-09-30 modified for aurora's new feature start
                            setAuroraMenuAdapter(null);
                            // Aurora liugj 2013-09-30 modified for aurora's new feature end
                        setAuroraMenuItems(R.menu.aurora_attachment_audio_menu);
                        // Aurora xuyong 2013-11-20 modify for monkey-running checked exception start
                        try {
                            showAuroraMenu();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        // Aurora xuyong 2013-11-20 modify for monkey-running checked exception end
                        /*AuroraAlertDialog.Builder alertBuilder=new AuroraAlertDialog.Builder(ComposeMessageActivity.this);
                        alertBuilder.setTitle(getString(R.string.add_music));
                        String[] items = new String[2];
                        items[0] = getString(R.string.attach_ringtone);
                        items[1] = getString(R.string.attach_sound);
                        alertBuilder.setItems(items, new DialogInterface.OnClickListener(){
                            public void onClick(DialogInterface dialog,int which){
                                switch(which){
                                    case 0:
                                        MessageUtils.selectRingtone(ComposeMessageActivity.this,REQUEST_CODE_ATTACH_RINGTONE);
                                        break;
                                    case 1:
                                        if(!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
                                            if (MmsApp.mGnMessageSupport == true) {
                                                Toast.makeText(ComposeMessageActivity.this,
                                                        getString(R.string.insert_sd_card), Toast.LENGTH_LONG).show();
                                            } else {
                                                Toast.makeText(ComposeMessageActivity.this,
                                                        "Please Insert SD card!", Toast.LENGTH_LONG).show();;
                                            }
                                            return ;
                                            }
                                        MessageUtils.selectAudio(ComposeMessageActivity.this,REQUEST_CODE_ATTACH_SOUND);
                                        break;
                                    }
                                }
                        });
                        alertBuilder.create().show();*/
                    }/*else if(id == R.drawable.gn_select_attachment_record_audio || id == R.drawable.gn_select_attachment_record_audio_dark){

                        int currentSlideSize = 0;
                        SlideshowModel slideShow = mWorkingMessage.getSlideshow();

                        if (false) {
                            mAppendAttachmentSign = true;
                        }

                        if (slideShow != null) {
                            SlideModel slide = slideShow.get(0);
                            currentSlideSize = slide == null ? 0 : slide.getSlideSize();
                        }
                        long sizeLimit = 0;
                        if(mAppendAttachmentSign){
                            sizeLimit = computeAttachmentSizeLimitForAppen(slideShow);
                        }
                        else {
                            sizeLimit = computeAttachmentSizeLimit(slideShow, currentSlideSize);
                        }
                        MessageUtils.recordSound(ComposeMessageActivity.this, REQUEST_CODE_RECORD_SOUND, sizeLimit);
                    }else if(id == R.drawable.gn_select_attachment_slideshow || id == R.drawable.gn_select_attachment_slideshow_dark){
                        //gionee gaoj 2012-9-24 added for CR00699147 start
                        if (!mWorkingMessage.hasSubject()) {
                            showSubjectEditor(false);
                        }
                        //gionee gaoj 2012-9-24 added for CR00699147 end
                        editSlideshow();
                    //Aurora xuyong 2013-10-11 modified for aurora's new feature start
                    } */else if (id == R.drawable.aurora_attach_contact_selector/* || id == R.drawable.gn_select_attachment_contacts_dark*/) {
                        // Aurora xuyong 2013-11-16 added for bug#336 start
                        if (!mAddVilable) {
                            return;
                        }
                        mAddVilable = false;
                        // Aurora xuyong 2013-11-16 added for bug#336 end
                        //gionee gaoj 2012-5-18 modified for CR00601632 start
                        Intent intent = new Intent("com.aurora.action.mms.select.contact");
                        //gionee gaoj 2012-5-18 modified for CR00601632 end
                        intent.setClassName("com.android.contacts", "com.android.contacts.activities.AuroraSimContactListActivity");
                    //Aurora xuyong 2013-10-11 modified for aurora's new feature end
                        intent.setType(Phone.CONTENT_ITEM_TYPE);
                        intent.putExtra("useoldcache", true);
                        //gionee gaoj 2012-8-3 added for CR00663537 start
                        intent.putExtra("attachcontacts", true);
                        //gionee gaoj 2012-8-3 added for CR00663537 end
                        // Aurora xuyong 2014-02-25 added for aurora's new feature start
                        intent.putExtra("isAttachment", true);
                        // Aurora xuyong 2014-02-25 added for aurora's new feature end
                        startActivityForResult(intent, REQUEST_CODE_TEXT_VCARD);
                    }
                    //gionee luoguangming 2012.08.29 modify for CR00682236 begin
                   /* else if (id == R.drawable.ic_attach_insert_gps_holo_light) {
                        //GIONEE: wangfei 2012 09 24 add for CR00703647 begin
                        gpsEnabled = Settings.Secure.isLocationProviderEnabled(
                                        getContentResolver(), LocationManager.GPS_PROVIDER);
                        if(gpsEnabled){
                            gnInsertGPS();
                        }else{
                            new AuroraAlertDialog.Builder(ComposeMessageActivity.this)
                                .setTitle(getString(R.string.gn_mms_enable_gps))
                                .setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
                                    public void onClick(DialogInterface dialog,int whichButton){
                                        gnInsertGPS();
                                    }
                                })
                                .setNegativeButton(android.R.string.cancel, null)
                                .show();
                        }
                        //GIONEE: wangfei 2012 09 24 add for CR00703647 end
                    }*/
                  //gionee luoguangming 2012.08.29 modify for CR00682236 end                
                    //gionee gaoj 2012-8-14 added for CR00623375 start
                    /*if (MmsApp.mGnRegularlyMsgSend) {
                        if (id == R.drawable.gn_select_regularly_send_msg || id == R.drawable.gn_select_regularly_send_msg_dark) {
                          //Gionee <guoyx> <2013-07-18> delete for CR00780083 begin
//                            //Gionee <guoyx> <2013-07-10> add for CR00829847 begin
//                            hideAttachmentSlideView();
//                            //Gionee <guoyx> <2013-07-10> add for CR00829847 end
                          //Gionee <guoyx> <2013-07-18> delete for CR00780083 end
                            Log.d("RegSendMsg", "ComposeMessageActivity....regulauly button onclick");
                            if (MmsApp.mLightTheme) {
                                mDateTimeDialog = new DateTimeDialog(ComposeMessageActivity.this, /*AuroraAlertDialog.THEME_AMIGO_FULLSCREEN,*/ //mDateTimeSetListener, null);
                            //} else {
                            //    mDateTimeDialog = new DateTimeDialog(ComposeMessageActivity.this, /*AuroraAlertDialog.THEME_AMIGO_FULLSCREEN,*/ mDateTimeSetListener, null);
                            //}
                            //if (!mDateTimeDialog.isShowing()) {
                            //    mDateTimeDialog.show();
                                //gionee gaoj 2012-8-21 added for CR00678520 start
                            //    mIsReSetTime = false;
                                //gionee gaoj 2012-8-21 added for CR00678520 end
                            //}
                        // gionee zhouyj 2012-08-16 add for CR00678252 start 
                        //} else if(id == R.drawable.gn_select_attachment_geolocation || id == R.drawable.gn_select_attachment_geolocation_dark) {
                          //Gionee <guoyx> <2013-07-18> delete for CR00780083 begin
//                            //Gionee <guoyx> <2013-07-10> add for CR00829847 begin
//                            hideAttachmentSlideView();
//                            //Gionee <guoyx> <2013-07-10> add for CR00829847 end
                          //Gionee <guoyx> <2013-07-18> delete for CR00780083 end
                            //mLocation = new GnLocation(ComposeMessageActivity.this);
                            //mLocation.setLocationListener(new GnLocation.GnLocationListener() {
                                
                             /*   public void onLocatePoi(ArrayList<String> poi) {
                                    // TODO Auto-generated method stub
                                    Intent i = new Intent("android.intent.action.gnselectpoi");
                                    i.putExtra("poi", poi);
                                    startActivityForResult(i, REQUEST_CODE_LOCATION_POI);
                                }
                                
                                public void onLocateComplete(String address) {
                                    // TODO Auto-generated method stub
                                    if(null != mLocation && mLocation.isNeedLocated()) {
                                        // gionee zhouyj 2012-08-20 add for CR00678380 start 
                                        String addr = mTextEditor.getText().toString().trim();
                                        if("".equals(addr) || addr.equals(mLastAddress)) {
                                            mLastAddress = address;
                                            addr = address;
                                        } else {
                                            addr += " " + address;
                                        }
                                        // gionee zhouyj 2012-08-20 add for CR00678380 end 
                                        mWorkingMessage.setText(addr);
                                        mTextEditor.setText(addr);
                                        Selection.setSelection(mTextEditor.getText(),mTextEditor.getText().toString().length());
                                        //if(View.VISIBLE != mPoiButton.getVisibility()) {
                                        //    mPoiButton.setVisibility(View.VISIBLE);
                                        //}
                                        mLocation.setNeedLocated(false);
                                    }
                                }
                                
                                public void onShowDialog() {
                                    // TODO Auto-generated method stub
                                    // gionee zhouyj 2012-12-17 add for CR00746553 start 
                                    Intent intent = new Intent("gn.android.intent.action.APP_START");
                                    intent.putExtra("appname", ComposeMessageActivity.this.getPackageName());
                                    ComposeMessageActivity.this.sendBroadcast(intent);
                                    // gionee zhouyj 2012-12-17 add for CR00746553 end 
                                }});
                        }
                        // gionee zhouyj 2012-08-16 add for CR00678252 end 
                    }*/
                    //gionee gaoj 2012-8-14 added for CR00623375 end
                }
            });
            //Aurora xuyong 2013-10-11 modified for aurora's new feature start
            int smileyiconid = R.drawable.aurora_attach_smily_selector;
            int contactsiconid = R.drawable.aurora_attach_contact_selector;
            int cameraiconid = R.drawable.aurora_attach_camera_selector;
            int galleryiconid = R.drawable.aurora_attach_photo_selector;
            // Aurora xuyong 2015-03-09 deleted for aurora's new feature start
            //int videocionid = R.drawable.aurora_attach_video_selector;
            // Aurora xuyong 2015-03-09 deleted for aurora's new feature end
            int soundiconid = R.drawable.aurora_attach_audio_selector;
            //Aurora xuyong 2013-10-11 modified for aurora's new feature end
            
            int smileystr = R.string.gn_select_attachment_smiley;
            int contactstr = R.string.gn_select_attachment_contacts;
            int camerastr = R.string.aurora_camera;
            int gallerystr = R.string.gn_select_attachment_gallery;
            // Aurora xuyong 2015-03-09 deleted for aurora's new feature start
            //int videostr = R.string.gn_select_attachment_video;
            // Aurora xuyong 2015-03-09 deleted for aurora's new feature end
            int soundstr = R.string.gn_select_attachment_sound;
            // Aurora xuyong 2013-10-12 modified for aurora's new feature start 
            int[] iconIds={ /*smileyiconid,*/ contactsiconid, cameraiconid, galleryiconid,
                     // Aurora xuyong 2015-03-09 modified for aurora's new feature start
                     /*videocionid,*/ soundiconid/*, 0, 0, 0*/};
                     // Aurora xuyong 2015-03-09 modified for aurora's new feature end
            int[] labelIds={/*smileystr,*/ contactstr, camerastr, gallerystr,
                     // Aurora xuyong 2015-03-09 modified for aurora's new feature start
                     /*videostr,*/ soundstr/*, 0, 0, 0*/};
                     // Aurora xuyong 2015-03-09 modified for aurora's new feature end
            // Aurora xuyong 2013-10-12 modified for aurora's new feature end
            int length = Math.min(iconIds.length, labelIds.length);
            for(int i=0; i<length; ++i){
                shower.pushItemResources(labelIds[i], iconIds[i], iconIds[i]);
            }
            //gionee gaoj added for CR00725602 20121201 start
            /*int contactsiconid = R.drawable.gn_select_attachment_contacts;
            int quicktexticonid = R.drawable.gn_select_attachment_quick_text;
            int smileyiconid = R.drawable.gn_select_attachment_smiley;
            int sendmsgiconid = R.drawable.gn_select_regularly_send_msg;
            int galleryiconid = R.drawable.gn_select_attachment_gallery;
            int cameraiconid = R.drawable.gn_select_attachment_camera;
            int geolocationiconid = R.drawable.gn_select_attachment_geolocation;
            int videocionid = R.drawable.gn_select_attachment_video;
            int recordvieoiconid = R.drawable.gn_select_attachment_record_video;
            int soundiconid = R.drawable.gn_select_attachment_sound;
            int audioiconid = R.drawable.gn_select_attachment_record_audio;
            int slideshowiconid = R.drawable.gn_select_attachment_slideshow;
            int subjecticonid = R.drawable.gn_select_attachment_subject;
            if (MmsApp.mDarkStyle) {
                contactsiconid = R.drawable.gn_select_attachment_contacts_dark;
                quicktexticonid = R.drawable.gn_select_attachment_quick_text_dark;
                smileyiconid = R.drawable.gn_select_attachment_smiley_dark;
                sendmsgiconid = R.drawable.gn_select_regularly_send_msg_dark;
                galleryiconid = R.drawable.gn_select_attachment_gallery_dark;
                cameraiconid = R.drawable.gn_select_attachment_camera_dark;
                geolocationiconid = R.drawable.gn_select_attachment_geolocation_dark;
                videocionid = R.drawable.gn_select_attachment_video_dark;
                recordvieoiconid = R.drawable.gn_select_attachment_record_video_dark;
                soundiconid = R.drawable.gn_select_attachment_sound_dark;
                audioiconid = R.drawable.gn_select_attachment_record_audio_dark;
                slideshowiconid = R.drawable.gn_select_attachment_slideshow_dark;
                subjecticonid = R.drawable.gn_select_attachment_subject_dark;
            }
            int contactstr = R.string.gn_select_attachment_contacts;
            int quicktextstr = R.string.gn_select_attachment_quick_text;
            int smileystr = R.string.gn_select_attachment_smiley;
            int sendmsgstr = R.string.gn_select_regularly_send_msg;
            int gallerystr = R.string.gn_select_attachment_gallery;
            int camerastr = R.string.gn_select_attachment_camera;
            int locationstr = R.string.gn_select_attachment_geo_location;
            int videostr = R.string.gn_select_attachment_video;
            int recordvideostr = R.string.gn_select_attachment_record_video;
            int soundstr = R.string.gn_select_attachment_sound;
            int audiostr = R.string.gn_select_attachment_record_audio;
            int slideshowstr = R.string.gn_select_attachment_slideshow;
            int subjectstr = R.string.gn_select_attachment_subject;*/
            //gionee gaoj added for CR00725602 20121201 end
            //gionee gaoj 2012-8-14 added for CR00623375 start
            //push items
            /*if (MmsApp.mGnRegularlyMsgSend) {
                int[] iconIds={contactsiconid,quicktexticonid,smileyiconid,sendmsgiconid,galleryiconid,cameraiconid,
                        geolocationiconid,videocionid,recordvieoiconid,soundiconid,audioiconid,slideshowiconid,subjecticonid
                };

                int[] labelIds={contactstr,quicktextstr,smileystr,sendmsgstr,gallerystr,camerastr,
                        locationstr,videostr,recordvideostr,soundstr,audiostr,slideshowstr,subjectstr
                };

                int length = Math.min(iconIds.length, labelIds.length);
                for(int i=0; i<length; ++i){
                    shower.pushItemResources(labelIds[i], iconIds[i], iconIds[i]);
                }
                //gionee luoguangming 2012.08.29 modify for CR00682236 begin
                if(gnNGMflag == true){
                shower.pushItemResources(R.string.gn_select_attachment_insert_gps_coordinates, R.drawable.ic_attach_insert_gps_holo_light, R.drawable.ic_attach_insert_gps_holo_light);}
                //gionee luoguangming 2012.08.29 modify for CR00682236 end
            } else {
                int[] iconIds={contactsiconid,quicktexticonid,smileyiconid,galleryiconid,cameraiconid,
                        geolocationiconid,videocionid,recordvieoiconid,soundiconid,audioiconid,slideshowiconid,subjecticonid
                    };

                    int[] labelIds={contactstr,quicktextstr,smileystr,gallerystr,camerastr,
                            locationstr,videostr,recordvideostr,soundstr,audiostr,slideshowstr,subjectstr
                    };

                    int length = Math.min(iconIds.length, labelIds.length);
                    for(int i=0; i<length; ++i){
                        shower.pushItemResources(labelIds[i], iconIds[i], iconIds[i]);
                    }
                    //gionee luoguangming 2012.08.29 modify for CR00682236 begin
                    if(gnNGMflag == true){
                    shower.pushItemResources(R.string.gn_select_attachment_insert_gps_coordinates, R.drawable.ic_attach_insert_gps_holo_light, R.drawable.ic_attach_insert_gps_holo_light);}
                    //gionee luoguangming 2012.08.29 modify for CR00682236 end
            }
            //gionee gaoj 2012-8-14 added for CR00623375 end
            final LinearLayoutFilter layout = (LinearLayoutFilter) findViewById(R.id.compose_activity_viewroot);

            layout.setFilter(new LinearLayoutFilter.FilterListener() {

                public boolean onFilterMeasure(int measureSpecWidth, int measureSpecHeight) {
                    // gionee zhouyj 2012-08-20 add for CR00678252 start 
                    if (MmsApp.mGnRegularlyMsgSend && null != mRegularlyToolBar && mRegularlyToolBar.isShowing()) {
                        mRegularlyToolBar.hide();
                    }
                    // gionee zhouyj 2012-08-20 add for CR00678252 end 
                    if (getResources().getConfiguration().hardKeyboardHidden < Configuration.KEYBOARDHIDDEN_YES) {
                        return false;
                    }

                    if(mIsLandscape){
                        mWaitingExpand = false;
                        mWaitingShrink = false;
                        return false;
                    }

                    int height = MeasureSpec.getSize(measureSpecHeight);
                    int width = MeasureSpec.getSize(measureSpecWidth);

                    int slideHeight = mAttachmentSlideView.getLayoutParams().height;// mAttachmentSlideView.getHeight();

                    mExpandThresholdPortrait = getWindowManager().getDefaultDisplay().getHeight()
                            - slideHeight / 2;
                    mShrinkThresholdPortrait = getWindowManager().getDefaultDisplay().getHeight()
                        - slideHeight / 2;

                    if(mWaitingExpand == true) {
                        if (layout.getHeight() > mExpandThresholdPortrait){
                            //already Expand
                            mWaitingExpand = false;
                            return false;
                        }
                        if (height < mExpandThresholdPortrait) {
                            return true;
                        }else {
                            mAttachmentSlideView.setVisibility(View.VISIBLE);
                            mWaitingExpand = false;
                        }
                    }else if(mWaitingShrink == true){
                        if (mcontactView != null && mcontactView.hasFocus()){
                            if (layout.getHeight() < mShrinkThresholdPortrait){
                                //already shrinked
                                mWaitingShrink = false;
                                mcontactView = null;
                                return false;
                            }
                            if(height > mShrinkThresholdPortrait) {
                                return true;
                            }else {
                                mcontactView = null;
                                mWaitingShrink = false;
                                mAttachmentSlideView.setVisibility(View.GONE);
                            }
                        }
                    }
                    return false;
                }

                public boolean onFilterLayout(boolean changed, int left, int top, int right, int bottom) {
                    return false;
                }
          });*/
        }
        mWaitingExpand = true;
        mWaitingShrink = false;
        // Aurora xuyong 2014-04-19 deleted for bug #4395 start
        //hideInputMethod();
        // Aurora xuyong 2014-04-19 deleted for bug #4395 end
        ajustAttachmentViewSlideHeight();
        mAttachmentSlideView.setVisibility(View.VISIBLE);
        hideInputMethod();
    }

    private void showAnAttachmentSlide(View slide){
        int index = mAttachmentSlideView.indexOfChild(slide);
        if(index >= 0){
            Log.d(TAG, "showAnAttachmentSlide:mAttachmentSlideViewCurrent="+slide
                    +";mAttachmentSlideViewHome="+mAttachmentSlideViewHome+
                    ";mAttachmentSlideViewCurrent="+mAttachmentSlideViewCurrent);
            hideInputMethod();
            if(mAttachmentSlideViewCurrent == mAttachmentSlideViewHome
                    && slide != mAttachmentSlideViewCurrent){
                if(mLeftOutAnimation == null){
                    mLeftOutAnimation = AnimationUtils.loadAnimation(this,
                            R.anim.slideview_left_out_anim);
                }
                if(mRightInAnimation == null){
                    mRightInAnimation = AnimationUtils.loadAnimation(this,
                            R.anim.slideview_right_in_anim);
                }
                mAttachmentSlideView.setOutAnimation(mLeftOutAnimation);
                mAttachmentSlideView.setInAnimation(mRightInAnimation);
            }else{
                if(mRightOutAnimation == null){
                    mRightOutAnimation = AnimationUtils.loadAnimation(this,
                            R.anim.slideview_right_out_anim);
                }
                if(mLeftInAnimation == null){
                    mLeftInAnimation = AnimationUtils.loadAnimation(this,
                            R.anim.slideview_left_in_anim);
                }
                mAttachmentSlideView.setOutAnimation(mRightOutAnimation);
                mAttachmentSlideView.setInAnimation(mLeftInAnimation);
            }
            mAttachmentSlideView.setDisplayedChild(index);
            mAttachmentSlideViewCurrent = slide;
        }
    }

    @SuppressWarnings("unchecked")
    protected void buildEmoticonView(ViewGroup emoticonView) {
        GnIconTextGridPageSlideShower shower = (GnIconTextGridPageSlideShower)
                                emoticonView.findViewById(R.id.gn_slide_category_emoticons);
        shower.setup();
        shower.setPageLayoutResId(0, R.layout.gn_gridpage_emoticons);

        int[] icons = SmileyParser.DEFAULT_SMILEY_RES_IDS;
        String[] names = getResources().getStringArray(
                SmileyParser.DEFAULT_SMILEY_NAMES);
        final String[] texts = getResources().getStringArray(
                SmileyParser.DEFAULT_SMILEY_TEXTS);

        final int N = names.length;

        final List<Map<String, ?>> entries = new ArrayList<Map<String, ?>>();
        for (int i = 0; i < N; i++) {
            // We might have different ASCII for the same icon, skip it if
            // the icon is already added.
            boolean added = false;
            for (int j = 0; j < i; j++) {
                if (icons[i] == icons[j]) {
                    added = true;
                    break;
                }
            }
            if (!added) {
                HashMap<String, Object> entry = new HashMap<String, Object>();

                entry.put("icon", icons[i]);
                entry.put("name", names[i]);
                entry.put("text", texts[i]);

                entries.add(entry);
            }
        }

        final int ENTRY_COUNT = entries.size();
        for(int i=0; i<ENTRY_COUNT; ++i){
            HashMap<String, Object> entry = (HashMap<String, Object>) entries.get(i);
            String name = (String)entry.get("name");
            int icon = (Integer)entry.get("icon");
            //Don't show emoticons' name
            ImageView iconView = (ImageView)getLayoutInflater().inflate(R.layout.gn_gridpage_emoticons_item, null);
            iconView.setImageResource(icon);
            shower.pushItemView(iconView, i);
        }

        shower.setOnItemClickListener(new OnItemClickListener(){
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long entryIndex) {
                HashMap<String, Object> entry = (HashMap<String, Object>) entries.get((int)entryIndex);
                String text = (String)entry.get("text");
                // gionee zhouyj 2012-06-05 add for CR00600850 start 
                if(MmsApp.mGnMessageSupport ) {
                    if (mSubjectTextEditor != null && mSubjectTextEditor.isFocused()){
                        mSubjectTextEditor.removeTextChangedListener(mSubjectEditorWatcher);
                        insertText(mSubjectTextEditor, (String)text);
                        mSubjectTextEditor.addTextChangedListener(mSubjectEditorWatcher);
                    }else{
                        mTextEditor.removeTextChangedListener(mTextEditorWatcher);
                        insertText(mTextEditor, (String)text);
                        mTextEditor.addTextChangedListener(mTextEditorWatcher);
                        onUserInteraction();
                        // gionee zhouyj 2012-06-16 add for CR00624837 start 
                        mWorkingMessage.setText(mTextEditor.getText().toString());
                        // gionee zhouyj 2012-06-16 add for CR00624837 end 
                        if (mAttachmentEditor != null) {
                            mAttachmentEditor.onTextChangeForOneSlide(mWorkingMessage.getText());
                        }
                        
                        if (mWorkingMessage.getText() != null) {
                            updateCounter(mWorkingMessage.getText(), mWorkingMessage.getText().toString().length(), 0, 1);
                        }
                        updateSendButtonState();
                    }
                } else {
                // gionee zhouyj 2012-06-05 add for CR00600850 end 
                    if (mSubjectTextEditor != null && mSubjectTextEditor.isFocused()){
                        insertText(mSubjectTextEditor, (String)text);
                    } else {
                        insertText(mTextEditor, (String)text);
                    }
                // gionee zhouyj 2012-06-05 add for CR00600850 start 
                }
                // gionee zhouyj 2012-06-05 add for CR00600850 end 
            }
        });
    }

    private int getVideoCaptureDurationLimit() {
        return CamcorderProfile.get(CamcorderProfile.QUALITY_LOW).duration;
    }
    
    //Gionee <zhouyj> <2013-06-29> modify for CR00803744 begin
    private void autoRegulationMessageLayoutHeight() {
        Message msg = mHandler.obtainMessage(CALC_MESSAGE_LAYOUT_HEIGHT);
        mHandler.removeMessages(CALC_MESSAGE_LAYOUT_HEIGHT);
        mHandler.sendMessageDelayed(msg, CALC_MESSAGE_LAYOUT_DALEY_TIME);
    }
    // Aurora xuyong 2013-12-26 added for bug #1222 start
     // Aurora xuyong 2014-06-07 modified for bug #5521 start
    // Aurora xuyong 2015-03-09 modified for aurora's new feature start
    private static int BOTTOMPANEL_MAX_HEIGHT_PIX = 238;
    // Aurora xuyong 2015-03-09 modified for aurora's new feature end
     // Aurora xuyong 2014-06-07 modified for bug #5521 end
    // Aurora xuyong 2013-12-26 added for bug #1222 end
    private void handleAutoRegulationMessageLayoutHeight() {
        // gionee lwzh modify for CR00774362 20130227 begin
        //if (mTextEditor.getText().toString().isEmpty() && !mSentMessage) {
        //    return;
        //}
        // gionee lwzh modify for CR00774362 20130227 end
        
        int bottomPanelTempHeight = 0;
        DisplayMetrics dm = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(dm);
        //Gionee guoyx 20121009 add for CR00703857 begin
        try {
            getWindowManager().getDefaultDisplay().getMetrics(dm);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
        if (dm == null) {
            Log.e(TAG, "Get the instance of DisplayMetrics is null!");
            return;
        }
        //Gionee guoyx 20121009 add for CR00703857 end
        int screenWidth = dm.widthPixels;
        int screenHeight = dm.heightPixels;
        final LinearLayoutFilter layout = (LinearLayoutFilter) findViewById(R.id.compose_activity_viewroot);
        LinearLayout.LayoutParams linearParams = (LinearLayout.LayoutParams) mBottomPanel
                .getLayoutParams();
        linearParams.height = LayoutParams.WRAP_CONTENT;
        mBottomPanel.setLayoutParams(linearParams);

        layout.measure(View.MeasureSpec.makeMeasureSpec(screenWidth,
                View.MeasureSpec.EXACTLY), View.MeasureSpec.makeMeasureSpec(
                screenHeight, View.MeasureSpec.EXACTLY));
        bottomPanelTempHeight = mBottomPanel.getMeasuredHeight();

        //Gionee <zhouyj> <2013-04-29> modify for CR00803416 begin
        //gionee gaoj 2012-6-18 added for CR00625710 start
        if (isRecipientsEditorVisible()) {
        // Aurora xuyong 2013-12-26 modified for bug #1222 start
            if (bottomPanelTempHeight <= (int)(BOTTOMPANEL_MAX_HEIGHT_PIX * dm.density)) {
                linearParams.height = LayoutParams.WRAP_CONTENT;
                mBottomPanel.setLayoutParams(linearParams);
            } else {
             // Aurora xuyong 2014-08-14 modified for bug #7190 start
                if (mTextEditor != null && (mTextEditor.getText() == null || mTextEditor.getText().length() <= 0)) {
                    linearParams.height = LayoutParams.WRAP_CONTENT;
                 mBottomPanel.setLayoutParams(linearParams);
                } else {
                    linearParams.height = ((int)(BOTTOMPANEL_MAX_HEIGHT_PIX * dm.density));
                    mBottomPanel.setLayoutParams(linearParams);
                }
             // Aurora xuyong 2014-08-14 modified for bug #7190 end
            }
        } else {
            if (bottomPanelTempHeight <= (int)(BOTTOMPANEL_MAX_HEIGHT_PIX * dm.density)) {
                linearParams.height = LayoutParams.WRAP_CONTENT;
                mBottomPanel.setLayoutParams(linearParams);
            } else {
             // Aurora xuyong 2014-08-06 added for bug #7190 start
                if (mTextEditor != null && (mTextEditor.getText() == null || mTextEditor.getText().length() <= 0)) {
                    linearParams.height = LayoutParams.WRAP_CONTENT;
                    mBottomPanel.setLayoutParams(linearParams);
                } else {
             // Aurora xuyong 2014-08-06 added for bug #7190 end
                linearParams.height = ((int)(BOTTOMPANEL_MAX_HEIGHT_PIX * dm.density));
        // Aurora xuyong 2013-12-26 modified for bug #1222 end
                mBottomPanel.setLayoutParams(linearParams);
             // Aurora xuyong 2014-08-06 added for bug #7190 start
                }
             // Aurora xuyong 2014-08-06 added for bug #7190 end
                //Gionee <guoyx> <2013-07-11> delete for CR00824311 begin
//                if ((getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) && mScrollView != null) {
//                    mScrollView.layout(mScrollView.getLeft(), mLayout.getTop(), mScrollView.getRight(), mLayout.getBottom());
//                    mScrollView.fullScroll(View.FOCUS_DOWN);
//                }
                //Gionee <guoyx> <2013-07-11> delete for CR00824311 end
            }
        }
        //gionee gaoj 2012-6-18 added for CR00625710 end
        //Gionee <zhouyj> <2013-04-29> modify for CR00803416 end
    }
    //Gionee <zhouyj> <2013-06-29> modify for CR00803744 end

    private void ensureTextCounterState() {
        int currentTextLines = mTextEditor.getLineCount();
        // Aurora xuyong 2014-07-29 modified for aurora's new feature start
        if (currentTextLines < 3) {
        // Aurora xuyong 2014-07-29 modified for aurora's new feature end
            mTextCounter.setVisibility(View.GONE);
            // Aurora xuyong 2014-08-05 added for aurora multisim feature start
            if (mMultiTextCounter != null) {
                mMultiTextCounter.setVisibility(View.GONE);
            }
            // Aurora xuyong 2014-08-05 added for aurora multisim feature end
            mediaTextView.setVisibility(View.GONE);
            // Aurora xuyong 2014-08-05 added for aurora multisim feature start
            if (mMultiMediaSizeInfo != null) {
                mMultiMediaSizeInfo.setVisibility(View.GONE);
            }
            // Aurora xuyong 2014-08-05 added for aurora multisim feature end
        // Aurora xuyong 2014-07-29 modified for aurora's new feature start
        } else if (currentTextLines >= 3 && mTextEditor.getVisibility() == View.VISIBLE) {
        // Aurora xuyong 2014-07-29 modified for aurora's new feature end
            // Making the counter invisible ensures that it is used to correctly
            // calculate the position of the send button even if we choose not to
            // display the text.
            mTextCounter.setVisibility(View.VISIBLE);
            // Aurora xuyong 2014-08-05 added for aurora multisim feature start
            if (mMultiTextCounter != null) {
                mMultiTextCounter.setVisibility(View.VISIBLE);
            }
            // Aurora xuyong 2014-08-05 added for aurora multisim feature end
            mediaTextView.setVisibility(View.GONE);
            // Aurora xuyong 2014-08-05 added for aurora multisim feature start
            if (mMultiMediaSizeInfo != null) {
                mMultiMediaSizeInfo.setVisibility(View.GONE);
            }
            // Aurora xuyong 2014-08-05 added for aurora multisim feature end
        } else {
            mTextCounter.setVisibility(View.INVISIBLE);
            // Aurora xuyong 2014-08-05 added for aurora multisim feature start
            if (mMultiTextCounter != null) {
                mMultiTextCounter.setVisibility(View.INVISIBLE);
            }
            // Aurora xuyong 2014-08-05 added for aurora multisim feature end
            mediaTextView.setVisibility(View.VISIBLE);
            // Aurora xuyong 2014-08-05 added for aurora multisim feature start
            if (mMultiMediaSizeInfo != null) {
                mMultiMediaSizeInfo.setVisibility(View.VISIBLE);
            }
            // Aurora xuyong 2014-08-05 added for aurora multisim feature end
        }
    }

    private void resetTextCounterState(){
        DisplayMetrics dm = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(dm);
        int screenWidth = dm.widthPixels;
        int screenHeight = dm.heightPixels;
        mBottomPanel.measure(
                View.MeasureSpec.makeMeasureSpec(screenWidth, View.MeasureSpec.EXACTLY),
                View.MeasureSpec.makeMeasureSpec(screenHeight, View.MeasureSpec.EXACTLY));
        // Aurora xuyong 2014-08-12 modified for bug #7286 start
        if (mWorkingMessage != null && !mWorkingMessage.requiresMms()) {
            if (MmsApp.mGnMessageSupport) {
                ensureTextCounterState();
            }
        }
        // Aurora xuyong 2014-08-12 modified for bug #7286 end
    }

    private void gnAddTextVCard(Intent intent) {
        if(intent != null){
            final ArrayList<String> numbersArray = intent.getStringArrayListExtra("ContactNumbers");
            String strShow = "";
            // Aurora xuyong 2014-03-20 deleted for bug #3347 start
            /*TextVCardContact tvc = new TextVCardContact();
            for (int i = 0; i < numbersArray.size(); i++) {
                String strNameAndNumber = numbersArray.get(i);
                String displayName = "";
                String number = "";

                tvc.reset();

                String strSplit[] = strNameAndNumber.split(":");

                if (strSplit.length == 0) {
                    continue;
                } else if (strSplit.length == 1){
                    number = strSplit[0];
                } else {
                    int k = 0;
                    k = strNameAndNumber.lastIndexOf(":");
                    if(k < 0){
                        number = strNameAndNumber;
                        displayName = strNameAndNumber;
                    }
                    else{
                        number = strNameAndNumber.substring(k+1);
                        displayName = strNameAndNumber.substring(0,k);
                    }
                }

                if (!TextUtils.isEmpty(displayName)) {
                    tvc.name = displayName;
                }
                if (!TextUtils.isEmpty(number)) {
                    if (Mms.isEmailAddress(number)) {
                        tvc.emails.add(number);
                    } else {
                        tvc.numbers.add(number);
                    }
                    strShow = strShow.concat(tvc.toString());

                    if (strShow.length() >= MmsConfig.getMaxTextLimit()) {
                        break;
                    }
                }
            }*/
            // Aurora xuyong 2014-03-20 deleted for bug #3347 end
            // Aurora xuyong 2014-03-20 added for bug #3347 start
            int size = numbersArray.size();
            for (int i = 0; i < size; i++) {
                strShow += numbersArray.get(i) + ";" + STR_CN;
            }
            // Aurora xuyong 2014-03-20 added for bug #3347 end
            insertText(mTextEditor, strShow);
        }
    }

    //GIONEE: wangfei 2012 09 24 add for CR00703647 begin
    private void gnInsertGPS(){
        mGnInsertGpsFlag = true;
        GnGetLocationCoordinatesUtil gpscoordinate = new GnGetLocationCoordinatesUtil(ComposeMessageActivity.this);
        String GnCurrentLocationString = gpscoordinate.ReturnCoordinates();
        mGnPreLocationString = gpscoordinate.readPreviousLocation();

        final AuroraProgressDialog progressdialog = new AuroraProgressDialog(ComposeMessageActivity.this);
        progressdialog.setIndeterminate(true);
        progressdialog.setCancelable(false);
        //gionee luoguangming 2012.10.29 modify for CR00722413 begin
        progressdialog.setMessage(getString(R.string.gn_loading_gps));
        //gionee luoguangming 2012.10.29 modify for CR00722413  end

        progressdialog.show();           

        mInsertGpsHandler= new Handler();
        mInsertGpsHandler.postDelayed(new Runnable(){                              
        int gnGetGpscount=0;
        //Gionee qinkai 2012-10-16 added for CR00714684 start
        int gnGpsTotalCount;
       {
             if(gnNGMflag == true) {
                    gnGpsTotalCount = 20;
             }else{
                         gnGpsTotalCount = 4;
                     }
        }
        //Gionee qinkai 2012-10-16 added for CR00714684 end
        
            public void run() {
                if(mGnInsertGpsFlag == true){
                      GnGetLocationCoordinatesUtil gpscoordinate = new GnGetLocationCoordinatesUtil(ComposeMessageActivity.this);
                      String GnCurrentLocationString = gpscoordinate.ReturnCoordinates();
                        //Gionee qinkai 2012-10-16 added for CR00714684 start
                      if(gnGetGpscount < gnGpsTotalCount){
                        //Gionee qinkai 2012-10-16 added for CR00714684 end
                        mInsertGpsHandler.postDelayed(this, 3000);
                          if(gpscoordinate.ReturnCoordinates()!=null){
                            progressdialog.dismiss(); 
                            mInsertGpsHandler.removeCallbacks(this);
                            insertText(mTextEditor, GnCurrentLocationString);
                          }
                    }else{    
                        progressdialog.dismiss();
                        new AuroraAlertDialog.Builder(ComposeMessageActivity.this)
//                            .setIcon(getResources().getDrawable(android.R.drawable.ic_dialog_alert))
                            .setTitle(getString(R.string.gps_use_last_location))                                    
                            .setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
                                public void onClick(DialogInterface dialog,int whichButton){
                                    if(mGnPreLocationString != null){
                                        insertText(mTextEditor,mGnPreLocationString);
                                    }else{
                                        Toast.makeText(getApplicationContext(), R.string.gn_avalid_location, Toast.LENGTH_LONG).show();
                                    }
                                }
                            })
                            .setNegativeButton(android.R.string.cancel, null)                    
                            .show();            
                    }
                    gnGetGpscount++;
                }else{
                      progressdialog.dismiss();
                    mInsertGpsHandler.removeCallbacks(this);
                }
            }       
        },3000);
    }
    //GIONEE: wangfei 2012 09 24 add for CR00703647 end

    private class SaveDraftListener implements OnClickListener {

        @Override
        public void onClick(DialogInterface arg0, int arg1) {

            if (arg1 == DialogInterface.BUTTON_POSITIVE) {
                mToastForDraftSave = true;
                mNeedSaveDraft = true;
                arg0.dismiss();
                // Aurora xuyong 2014-07-14 added for aurora's new feature start
                if (operConvMap != null && operConvMap.size() > 0) {
                    deleteConvByIds(operConvMap);
                }
                // Aurora xuyong 2014-07-14 added for aurora's new feature end
                finish();
            } else if (arg1 == DialogInterface.BUTTON_NEUTRAL) {
                mWorkingMessage.discard();
                arg0.dismiss();
                // Aurora xuyong 2014-07-14 added for aurora's new feature start
                if (operConvMap != null && operConvMap.size() > 0) {
                    deleteConvByIds(operConvMap);
                }
                // Aurora xuyong 2014-07-14 added for aurora's new feature end
                finish();
            }
        }
    }

    private void reSendSimSelection(MessageItem msgItem) {
        if (mSimCount == 0 && mSubCount == 0) {
            //do nothing
            // Aurora xuyong 2013-12-28 modified for aurora's new feature start
            Message msg = mHandler.obtainMessage(SHOW_NO_SIMCARD_TOAST);
            mHandler.sendMessage(msg);
            return;
            // Aurora xuyong 2013-12-28 modified for aurora's new feature end
        } else if (mSimCount == 1 || mSubCount == 1) {
            if (MmsApp.mGnMultiSimMessage == true) {
                msgItem.mSimId = (int) mSimInfoList.get(0).mSimId;
            }
            reSendMsg(msgItem);
        } else if (mSimCount > 1 || mSubCount > 1) {
            Intent intent = new Intent();
            intent.putExtra(SELECT_TYPE, RESEND_MSG_SELECTED_SIMID);
            intent.putExtra("type", msgItem.mType);
            intent.putExtra("msgId", msgItem.mMsgId);
            if (getRecipients().size() == 1/*isOnlyOneRecipient()*/) {
                mAssociatedSimId = getContactSIM(getRecipients().get(0).getNumber()); // 152188888888 is a contact number
            } else {
                mAssociatedSimId = -1;
            }

            mMessageSimId = Settings.System.getLong(getContentResolver(), 
                    GnSettings.System.SMS_SIM_SETTING, GnSettings.System.DEFAULT_SIM_NOT_SET);
            if (mMessageSimId == GnSettings.System.DEFAULT_SIM_SETTING_ALWAYS_ASK) {
                showSimSelectedDialog(intent);
            } else if (mMessageSimId == GnSettings.System.DEFAULT_SIM_NOT_SET) {
                if (mAssociatedSimId == -1) {
                    showSimSelectedDialog(intent);
                } else {
                    msgItem.mSimId = mAssociatedSimId;
                    reSendMsg(msgItem);
                }
            } else {
                if (mAssociatedSimId == -1 || (mMessageSimId == mAssociatedSimId)) {
                    msgItem.mSimId = (int) mMessageSimId;
                    reSendMsg(msgItem);
                } else {
                    showSimSelectedDialog(intent);
                }
            }
        }
    }

    private void reSendMsg(MessageItem msgItem) {
        
        mSentMessage = true;
        
        if (null != msgItem) {
            if (mSimCount == 0 && mSubCount == 0) {
                // Aurora xuyong 2013-12-28 modified for aurora's new feature start
                Message msg = mHandler.obtainMessage(SHOW_NO_SIMCARD_TOAST);
                mHandler.sendMessage(msg);
                // Aurora xuyong 2013-12-28 modified for aurora's new feature end
                return;
            }
            WorkingMessage message = WorkingMessage.createEmpty(ComposeMessageActivity.this);
            if ("sms".equals(msgItem.mType)) {
                synchronized(mConversation) {
                    if (mMsgListAdapter.getCursor().getCount() <= 1) {
                        mConversation.clearThreadId();
                    }
                }
                // Delete the old undelivered SMS and load its content.
                Uri uri = ContentUris.withAppendedId(Sms.CONTENT_URI, msgItem.mMsgId);
                SqliteWrapper.delete(ComposeMessageActivity.this,
                        mContentResolver, uri, null, null);
                message.setConversation(mConversation);
                message.setText(msgItem.mBody);
            } else {
                message = WorkingMessage.load(ComposeMessageActivity.this, msgItem.mMessageUri);
                if (message == null){
                    Log.e(TAG, "load Sms has some error!");
                    return;
                }
                message.setConversation(mConversation);
                message.setSubject(msgItem.mSubject, false);
            }
            message.mRepeatSendReceiver = msgItem.mAddress;
            message.setmIsRepeatSend(true);
            if (MmsApp.mGnMultiSimMessage) {
                message.sendGemini(msgItem.mSimId);
            } else {
                message.send(mConversation.getRecipients().serialize());
            }
        }
    }

    /*private void startQueryLockedAndStaredMsg(long threadId){
        Conversation.startQueryHaveLockedMessages(mBackgroundQueryHandler, threadId,
                ConversationList.HAVE_LOCKED_MESSAGES_TOKEN);
        Conversation.startQueryHaveStarMessages(mBackgroundQueryHandler, threadId,
                ConvFragment.HAVE_STAR_MESSAGES_TOKEN);
    }*/

    /*private boolean getSelectMsgLockedState(){
        boolean locked = false;
        Iterator iter = mMsgListAdapter.getmMsgLocked().entrySet().iterator();
        while (iter.hasNext()) {
            @SuppressWarnings("unchecked")
            Map.Entry<Long, Boolean> entry = (Entry<Long, Boolean>) iter.next();
            if (entry.getValue()) {
                locked = true;
                break;
            }
        }
        return locked;
    }*/

    private boolean getSelectMsgStaredState(){
        boolean stared = false;
        Iterator iter = mMsgListAdapter.getmMsgStared().entrySet().iterator();
        while (iter.hasNext()) {
            @SuppressWarnings("unchecked")
            Map.Entry<Long, Boolean> entry = (Entry<Long, Boolean>) iter.next();
            if (entry.getValue()) {
                stared = true;
                break;
            }
        }
        return stared;
    }


    private class DeleteGnMessageListener implements OnClickListener {
        private boolean mDeleteStared;

        public DeleteGnMessageListener(boolean deleteStared) {
            mDeleteStared = deleteStared;
        }

        public void setDeleteStared(boolean deleteStared) {
            mDeleteStared = deleteStared;
        }

        public void onClick(DialogInterface dialog, int whichButton) {
            mBackgroundQueryHandler.setProgressDialog(DeleteProgressDialogUtil
                    .getProgressDialog(ComposeMessageActivity.this));
            mBackgroundQueryHandler.showProgressDialog();

            //gionee gaoj 2012-9-20 added for CR00699291 start
            Map<Long, Boolean> staredMap = mMsgListAdapter.getmMsgStared();
            Iterator iter = null;

            final Map<Long, Boolean> itemMap  = new HashMap<Long, Boolean>();
            iter = mMsgListAdapter.getItemList().entrySet().iterator();
            while (iter.hasNext()) {
                @SuppressWarnings("unchecked")
                Map.Entry<Long, Boolean> entry = (Entry<Long, Boolean>) iter.next();
                itemMap.put(entry.getKey(), entry.getValue());
            }
            int size = itemMap.size();
            long[] ids = new long[size];
            int counter = 0;

            if (mDeleteStared) {
                // do nothing
            } else {
                iter = itemMap.entrySet().iterator();
                while (iter.hasNext()) {
                    @SuppressWarnings("unchecked")
                    Map.Entry<Long, Boolean> entry = (Entry<Long, Boolean>) iter.next();
                    if (entry.getValue()) {
                        if (staredMap.get(entry.getKey())) {
                            ids[counter] = entry.getKey();
                            counter++;
                        }
                    }
                }
            }
            //gionee gaoj 2012-9-20 added for CR00699291 end
            for(long id : ids) {
                itemMap.remove(id);
            }
            deleteSelectedMsg(itemMap,size);
            markCheckedState(false);
            onFinishMultiChoose();
        }

        private void deleteSelectedMsg(final Map<Long, Boolean> selectedMap, final int size){
            new Thread(new Runnable() {
                public void run() {
                    Uri deleteSmsUri = null;
                    Uri deleteMmsUri = null;
                    String[] argsSms = new String[size];
                    String[] argsMms = new String[size];
                    int i = 0;
                    int j = 0;
                    Iterator iter = selectedMap.entrySet().iterator();
                    while (iter.hasNext()) {
                        @SuppressWarnings("unchecked")
                        Map.Entry<Long, Boolean> entry = (Entry<Long, Boolean>) iter.next();
                        if (entry.getValue()) {
                            if (entry.getKey() > 0) {
                                Log.i(TAG, "deleteSelectedMsg():delete sms");
                                argsSms[i] = Long.toString(entry.getKey());
                                deleteSmsUri = Sms.CONTENT_URI;
                                i++;
                            } else {
                                Log.i(TAG, "deleteSelectedMsg():delete mms");
                                argsMms[j] = Long.toString(-entry.getKey());
                                deleteMmsUri = Mms.CONTENT_URI;
                                j++;
                            }
                        }
                    }
                    mBackgroundQueryHandler.setMax((deleteSmsUri != null ? 1 : 0)
                            + (deleteMmsUri != null ? 1 : 0));
                    if (deleteSmsUri != null) {
                        mBackgroundQueryHandler.startDelete(DELETE_MESSAGE_TOKEN, null,
                                deleteSmsUri, FOR_MULTIDELETE, argsSms);
                    }
                    if (deleteMmsUri != null) {
                        mBackgroundQueryHandler.startDelete(DELETE_MESSAGE_TOKEN, null,
                                deleteMmsUri, FOR_MULTIDELETE, argsMms);
                    }
                    if (deleteSmsUri == null && deleteMmsUri == null) {
                        mBackgroundQueryHandler.dismissProgressDialog();
                    }
                }
            }).start();
        }
    }


    //Gionee <guoyx> <2013-06-09> modify for CR00824219 begin
     // Aurora liugj 2013-10-30 modified for fix bug-310 start
    private AuroraAlertDialog confirmDeleteGnDialog(final ConvFragment.GnDeleteThreadListener listener, boolean deleteAll,
            boolean stared) {
        //gionee gaoj 2012-9-20 added for CR00699291 start
        View contents = View.inflate(ComposeMessageActivity.this,
                R.layout.gn_delete_message_dialog_view, null);
        TextView msg = (TextView) contents.findViewById(R.id.gn_single_message);
        // Aurora xuyong 2014-05-08 modified for bug #4695 start
        // Aurora xuyong 2014-07-02 added for reject feature start
        if (!mIsFromReject) {
            msg.setText(R.string.gn_confirm_delete_messages);
        } else {
            msg.setText(R.string.aurora_delete_record_message);
        }
        // Aurora xuyong 2014-07-02 added for reject feature end
        // Aurora xuyong 2014-05-08 modified for bug #4695 end
        final CheckBox starCheckbox = (CheckBox) contents.findViewById(R.id.gn_delete_favorite_msg);
        //gionee gaoj added for CR00725602 20121201 start
        /*msg.setTextColor(Color.WHITE);
        starCheckbox.setTextColor(Color.WHITE);
        //gionee gaoj added for CR00725602 20121201 end
        //gionee gaoj 2012-5-24 added for CR00588933 start
        if (MmsApp.mTransparent) {
            msg.setTextColor(Color.BLACK);
            starCheckbox.setTextColor(Color.BLACK);
            // gionee zhouyj 2012-09-13 modify for CR00692871 start
            starCheckbox.setButtonDrawable(R.drawable.gn_btn_check_transparent);
            // gionee zhouyj 2012-09-13 modify for CR00692871 end
        }*/
        //gionee gaoj 2012-5-24 added for CR00588933 end
        if (!stared) {
            starCheckbox.setVisibility(View.GONE);
            listener.setDeleteStaredMessage(true);
        } else {
            listener.setDeleteStaredMessage(starCheckbox.isChecked());
            starCheckbox.setOnClickListener(new View.OnClickListener() {
                public void onClick(View v) {
                    listener.setDeleteStaredMessage(starCheckbox.isChecked());
                }
            });
        }
         // Aurora liugj 2013-10-30 modified for fix bug-310 end
        //gionee gaoj 2012-9-20 added for CR00699291 end

        AuroraAlertDialog.Builder builder = new AuroraAlertDialog.Builder(this);//, AuroraAlertDialog.THEME_AMIGO_FULLSCREEN);
        // Aurora xuyong 2014-07-02 added for reject feature start
        if (!mIsFromReject) {
            builder.setTitle(R.string.confirm_dialog_title);
        } else {
            builder.setTitle(R.string.aurora_delete_record_title);
        }
        // Aurora xuyong 2014-07-02 added for reject feature end
        // Aurora xuyong 2014-02-24 added for bug #2580 start
        builder.setOnDismissListener(new DialogInterface.OnDismissListener() {
            
            @Override
            public void onDismiss(DialogInterface dialog) {
                // TODO Auto-generated method stub
                mNeedShowDialog = true;
            }
        });
        // Aurora xuyong 2014-02-24 added for bug #2580 end
//        builder.setIcon(android.R.drawable.ic_dialog_alert);
        builder.setCancelable(true);
        builder.setPositiveButton(R.string.delete, listener);
        builder.setNegativeButton(R.string.no, null);
        builder.setView(contents);
        return builder.show();
    }
    //Gionee <guoyx> <2013-06-09> modify for CR00824219 end
    //gionee gaoj 2012-4-10 added for CR00555790 end
    
    // gionee zhouyj 2012-05-21 add for CR00601523 start
    public boolean isSignatureEnable() {
        return mSignatureEnable;
    }
    
    public String getSignatureContent() {
        return mSignatureContent;
    }
    // gionee zhouyj 2012-05-21 add for CR00601523 end

    // gionee zhouyj 2012-07-05 modify for CR00637457 start
    /*private void setMulImageButton(boolean select) {
        boolean selectAreMms = false;
        Cursor cursor = mMsgListAdapter.getCursor();
        // gionee zhouyj 2012-07-27 modify for CR00658536 start 
        int i = 0;
        cursor.moveToPosition(-1);
        mAllMms = true;
        mAllStar = true;
        while(cursor.moveToNext()) {
            // gionee zhouyj 2012-12-26 add for CR00716602 start 
            if(mSelectMap != null && mSelectMap.get(i) != null && mSelectMap.get(i)) {
                if(cursor.getString(COLUMN_MSG_TYPE).equals("sms")) {
                    if(mAllMms) mAllMms = false;
                    if(cursor.getInt(COLUMN_SMS_STAR) == 0) {
                        mAllStar = false;
                        break;
                    }
                }
            }
            // gionee zhouyj 2012-12-26 add for CR00716602 end 
            i++;
        }
        // gionee zhouyj 2012-07-27 modify for CR00658536 end 
        /*mCopyImageButton.setEnabled(!mAllMms);
        mCopyImageButton.setImageTextEnabled(!mAllMms);*/
        //boolean canForward = (mMsgListAdapter.getSelectedNumber() == 1) || (mMsgListAdapter.getSelectedNumber() > 1 && !mAllMms);
        /*mForwardImageButton.setEnabled(canForward);
        mForwardImageButton.setImageTextEnabled(canForward);
        mMoreImageButton.setEnabled(mMsgListAdapter.getSelectedNumber() == 1);
        mMoreImageButton.setImageTextEnabled(mMsgListAdapter.getSelectedNumber() == 1);
        if (MmsApp.mLightTheme) {
            mCopyImageButton.setImageResource(!mAllMms ? R.drawable.gn_com_copy_bg : R.drawable.gn_com_copy_unuse_bg);
            mForwardImageButton.setImageResource(canForward ? R.drawable.gn_com_forward_bg : R.drawable.gn_com_forward_unuse_bg);
            mMoreImageButton.setImageResource(mMsgListAdapter.getSelectedNumber() == 1 ? R.drawable.gn_com_more_bg : R.drawable.gn_com_more_unuse_bg);
        } else {
            mCopyImageButton.setImageResource(!mAllMms ? R.drawable.gn_com_copy_dark_bg : R.drawable.gn_com_copy_unuse_dark_bg);
            mForwardImageButton.setImageResource(canForward ? R.drawable.gn_com_forward_dark_bg : R.drawable.gn_com_forward_unuse_dark_bg);
            mMoreImageButton.setImageResource(mMsgListAdapter.getSelectedNumber() == 1 ? R.drawable.gn_com_more_dark_bg : R.drawable.gn_com_more_unuse_dark_bg);
        }*/

        /*setCopyMenuState(!mAllMms);
        setForwardMenuState(canForward);
    }*/
    // gionee zhouyj 2012-07-05 modify for CR00637457 end

    /*private PopupMenu constructPopupMenu(View v) {
        final Context context = ComposeMessageActivity.this;
        if (context == null) {
            return null;
        }
        final PopupMenu popupMenu = new PopupMenu(context, v);
        final Menu menu = popupMenu.getMenu();
        if (v == mMoreImageButton) {
            popupMenu.inflate(R.menu.gn_com_more_menu);
        } else if (v == mMenuMoreButton) {
            popupMenu.inflate(R.menu.gn_menu_more);
            MenuItem encryItem = menu.findItem(R.id.gn_com_encryption);
            if (!isRecipientsEditorVisible()) {
                encryItem.setTitle(mConversation.getEncryption() ? R.string.menu_decryption : R.string.menu_encryption);
            } else {
                menu.removeItem(R.id.gn_com_encryption);
            }
            //gionee gaoj 2012-8-7 added for CR00671408 start
            if (!MmsApp.isOpenApi() || isRecipientsEditorVisible() || mConversation.getRecipients().size() != 1) {
                menu.removeItem(R.id.gn_com_blacklist);
            }
            //gionee gaoj 2012-8-7 added for CR00671408 end
        }

        popupMenu.setOnMenuItemClickListener(this);
        setupPopupMenuItems(menu, v);
        return popupMenu;
    }

    private void setupPopupMenuItems(Menu menu, View v) {
        if (v == mMoreImageButton) {
            if(mMsgListAdapter.getSelectedNumber() != 1) 
                return ;
            mMsgItem = getOnlyItem();
            if(mMsgItem == null) 
                return ;
            //gionee gaoj added for CR00725602 20121201 start
            if (mMsgItem.isSms()) {
                MenuItem item = menu.findItem(R.id.gn_com_star);
                if (mMsgItem.mStar) {
                    item.setTitle(R.string.cancel_favorite);
                } else {
                    item.setTitle(R.string.add_to_favorite);
                }
            } else if (mMsgItem.isMms()){
                menu.removeItem(R.id.gn_com_star);
            }
            //gionee gaoj added for CR00725602 20121201 end
            if (!(getRecipients().size() == 1 &&
                    (mMsgItem.mBoxId == Sms.MESSAGE_TYPE_OUTBOX || mMsgItem.mBoxId == Sms.MESSAGE_TYPE_FAILED) && !mMsgItem.mIsRegularlyMms)) {
                menu.removeItem(R.id.gn_com_edit);
            }
            if (!(mMsgItem.isMms() && mMsgItem.mAttachmentType == WorkingMessage.SLIDESHOW)) {
                menu.removeItem(R.id.gn_com_slidshow);
            }
            //gionee gaoj 2012-8-21 modified for CR00678269 start
            if (!(mMsgItem.isSms() && mSimCount > 0 && !mMsgItem.isSending()) || mMsgItem.isRegularlyMms()) {
                menu.removeItem(R.id.gn_com_copy_sim);
            }
            //gionee gaoj 2012-8-21 modified for CR00678269 end
            // gionee zhouyj 2012-09-07 modify for CR00687609 start 
            if (mMsgItem.isSms() || !haveSomethingToCopyToSDCard(mMsgItem.mMsgId)) {
                menu.removeItem(R.id.gn_com_copy_sdcard);
            }
            // gionee zhouyj 2012-09-07 modify for CR00687609 end 
        } else if (v == mMenuMoreButton) {
            MenuItem encryItem = menu.findItem(R.id.gn_com_encryption);
            if (!isRecipientsEditorVisible()) {
                encryItem.setTitle(mConversation.getEncryption() ? R.string.menu_decryption : R.string.menu_encryption);
            } else {
                menu.removeItem(R.id.gn_com_encryption);
            }
            //gionee gaoj 2012-8-7 added for CR00671408 start
            if (!MmsApp.isOpenApi() || isRecipientsEditorVisible() || mConversation.getRecipients().size() != 1) {
                menu.removeItem(R.id.gn_com_blacklist);
            }
            //gionee gaoj 2012-8-7 added for CR00671408 end
        }
    }

    @Override
    public boolean onMenuItemClick(MenuItem item) {
        // TODO Auto-generated method stub
        MessageItem msgItem = null;
        if (mMsgListAdapter.getSelectedNumber() == 1) {
            msgItem = getOnlyItem();
            if (null == msgItem)
                return false;
        }
        switch (item.getItemId()) {
        //gionee gaoj added for CR00725602 20121201 start
        case R.id.gn_com_star:
            Cursor cursor = mMsgListAdapter.getCursor();
            cursor.moveToPosition(-1);
            int j = 0, count = 0;
            String ids = "";
            while(cursor.moveToNext()) {
                if(mSelectMap.get(j)) {
                    if(cursor.getString(COLUMN_MSG_TYPE).equals("sms")) {
                        if(count > 0) 
                            ids += " OR _id = ";
                        ids += cursor.getString(COLUMN_ID);
                        count++;
                    }
                }
                j++;
            }
            starMessage(ids, !mAllStar);
            break;
        //gionee gaoj added for CR00725602 20121201 end
        //gionee gaoj 2012-8-7 added for CR00671408 start
        case R.id.gn_com_blacklist:
            gnAddBlackList();
            break;
        //gionee gaoj 2012-8-7 added for CR00671408 end
        case R.id.gn_com_encryption:
            if (Conversation.getFirstEncryption() == true) {
                inputencryption();
            } else {
                updateEncryption();
            }
            break;
        case R.id.gn_com_preferences:
            Intent intent = new Intent(this, MessagingPreferenceActivity.class);
            startActivityIfNeeded(intent, -1);
            break;
        case R.id.gn_com_edit:
            editMessageItem(msgItem);
            drawBottomPanel();
            break;

        case R.id.gn_com_slidshow:

            if (mClickCanResponse) {
                mClickCanResponse = false;
                MessageUtils.viewMmsMessageAttachment(ComposeMessageActivity.this,
                        ContentUris.withAppendedId(Mms.CONTENT_URI, msgItem.mMsgId), null);
            }
            break;

        case R.id.gn_com_copy_sim:

            mSaveMsgThread = new SaveMsgThread(msgItem.mType, msgItem.mMsgId);
            mSaveMsgThread.start();
            break;

        case R.id.gn_com_copy_sdcard:

            StorageManager mSM = (StorageManager) getApplicationContext().getSystemService(STORAGE_SERVICE);

            if (!mSM.getVolumeState(MessageUtils.SDCARD_2).equals(Environment.MEDIA_MOUNTED)
                    && !mSM.getVolumeState(MessageUtils.SDCARD_1).equals(Environment.MEDIA_MOUNTED)) {
                Toast.makeText(ComposeMessageActivity.this, getString(R.string.Insert_sdcard), Toast.LENGTH_LONG).show();
                onFinishMultiChoose();
                return false;
            }

            // gionee zhouyj 2012-07-13 add for CR00647101 start 
            if(MmsApp.mStorageMountedCount == 2) {
                Intent i = new Intent("android.intent.action.choosesdcard");
                i.putExtra("tips", getString(R.string.copy_attachment_to));
                i.putExtra("uri", mMsgItem.mMessageUri.toString());
                startActivityForResult(i, REQUEST_CODE_CHOOSE_SDCARD);
            } else if(MmsApp.mStorageMountedCount == 1) {
                Intent i = new Intent(ComposeMessageActivity.this, AttachmentPickerActivity.class);
                i.setData(msgItem.mMessageUri);
                startActivityForResult(i, REQUEST_CODE_MULTI_SAVE);
            } else {
                Toast.makeText(this, getString(R.string.gn_no_sdcard), Toast.LENGTH_SHORT).show();
            }
            // gionee zhouyj 2012-07-13 add for CR00647101 end
            break;

        case R.id.gn_com_details:
            String messageDetails = MessageUtils.getMessageDetails(
                    ComposeMessageActivity.this, msgItem);
            mDetailDialog = new AuroraAlertDialog.Builder(ComposeMessageActivity.this)
                    .setTitle(R.string.message_details_title)
                    .setMessage(messageDetails)
                    .setCancelable(true)
                    .show();
            break;

            //gionee gaoj 2013-1-4 added for CR00756848 start
        case R.id.gn_com_batch:
            if (!mMsgListLongClick) {
              //Gionee <guoyx> <2013-07-18> modify for CR00780083 begin
                hideAttachmentSlideView();
              //Gionee <guoyx> <2013-07-18> modify for CR00780083 end
                mMsgListLongClick = true;
                mMsgListAdapter.mIsDeleteMode = true;
                hideInputMethod();
                drawTopPanel(false);
                drawBottomPanel();
                startMsgListQuery();
                
                // gionee lwzh modify for CR00774362 20130227 begin
                if (mGnmultiSelectStub == null) {
                    initMultiSelect();
                }
                // gionee lwzh modify for CR00774362 20130227 end
                mGnmultiSelectStub.setVisibility(View.VISIBLE);
                if(!mFirstLongClick) {
                    mFirstLongClick = true;
                    Cursor cur = mMsgListAdapter.getCursor();
//                    mCurrentPos = position;
                    String type = cur.getString(COLUMN_MSG_TYPE);
                    long msgId = cur.getLong(COLUMN_ID);
                    mMsgItem = mMsgListAdapter.getCachedMessageItem(type, msgId, cur);
                }
            }
            break;
            //gionee gaoj 2013-1-4 added for CR00756848 end
        default:
            break;
        }
        //gionee gaoj 2013-1-4 added for CR00756848 start
        if (item.getItemId() == R.id.gn_com_batch ||
                item.getItemId() == R.id.gn_com_preferences ||
                item.getItemId() == R.id.gn_com_encryption ||
                item.getItemId() == R.id.gn_com_blacklist) {
            //do nothing
        } else {
            onFinishMultiChoose();
        }
        //gionee gaoj 2013-1-4 added for CR00756848 end
        return true;
    }*/

    //gionee gaoj 2012-5-24 added for CR00588933 end
    
    // gionee zhouyj 2012-05-29 add for CR00601178 end
    public void updateSelectionMenu() {
        // Aurora xuyong 2014-08-22 deleted for bug #7739 & #7853 start
        //int count = mMsgListAdapter.getSelectedNumber();
        // Aurora xuyong 2014-08-22 deleted for bug #7739 & #7853 end
        // Aurora xuyong 2013-09-13 modified for aurora's new feature start
        if (mSelectAll != null) {
            // Aurora xuyong 2013-11-29 modified for bug #978 start
            // Aurora xuyong 2013-12-11 modified for aurora's new feature start
            if (mMsgListAdapter.getSelectedNumber() > 0 && mMsgListAdapter.getSelectedNumber() >= mMsgListAdapter.getChildCount()) {
            // Aurora xuyong 2013-12-11 modified for aurora's new feature end
            // Aurora xuyong 2013-11-29 modified for bug #978 end
                // Aurora xuyong 2013-09-18 modified for aurora's new feature start
                mSelectAll.setText(ComposeMessageActivity.this.getResourcesString(R.string.no_select_all));
                // Aurora xuyong 2013-09-18 modified for aurora's new feature end
            } else {
                mSelectAll.setText(ComposeMessageActivity.this.getResourcesString(R.string.select_all));
            }
        // Aurora xuyong 2013-09-13 modified for aurora's new feature end
            // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
            //String text = getResources().getString(R.string.gn_select_conversation_more, count);
            //mCountTitle.setText(text);
            // Aurora xuyong 2013-09-13 deleted for aurora's new feature end
        }
    }
    // gionee zhouyj 2012-05-29 add for CR00601178 end
    // Aurora xuyong 2014-08-22 deleted for bug #7739 & #7853 start
    //private void updateSelectMap(int pos) {
        // gionee zhouyj 2012-08-22 modify for CR00678526 start
    //    mSelectMap.put(pos, (null == mSelectMap.get(pos)) ? true : !mSelectMap.get(pos));
        // gionee zhouyj 2012-08-22 modify for CR00678526 end
    //}
    // Aurora xuyong 2013-09-26 added for aurora's new feature start
    /*private void initMap(Cursor cursor, int pos) {
        mSelectMap.clear();
        for(int i = 0; i < cursor.getCount(); i++) {
            if (i == pos) {
                mSelectMap.put(i, true);
            } else {
                mSelectMap.put(i, false);
            }           
        } 
    }*/
    // Aurora xuyong 2013-09-26 added for aurora's new feature end
    
    /*private void initMap(Cursor cursor) {
        //gionee gaoj 2012-9-27 added for CR00704839 start
        mSelectMap.clear();
        //gionee gaoj 2012-9-27 added for CR00704839 end
        for(int i = 0; i < cursor.getCount(); i++) 
            mSelectMap.put(i, false);
    }*/
    // Aurora xuyong 2014-08-22 deleted for bug #7739 & #7853 end
    private int getClickPosition(long id) {
        int pos = 0;
        Cursor cursor = mMsgListAdapter.getCursor();
        cursor.moveToPosition(-1);
        while(cursor.moveToNext()) {
            if(id == cursor.getLong(COLUMN_ID)){
                return pos;
            }
            pos++;
        }
        return -1;
    }
    
    private MessageItem getOnlyItem() {
        //gionee gaoj 2012-9-20 added for CR00699291 start
      // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 start
        mSelectMap = mMsgListAdapter.getSelectedMap();
      // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 end
        Iterator iter = mSelectMap.entrySet().iterator();
        int position = 0;
        while (iter.hasNext()) {
            @SuppressWarnings("unchecked")
            Map.Entry<Integer, Boolean> entry = (Entry<Integer, Boolean>) iter.next();
            if (entry.getValue()) {
                position = entry.getKey();
            }
        }

        MessageItem item = null;
        Cursor cursor = mMsgListAdapter.getCursor();
        // gionee zhouyj 2012-10-10 modify for CR00709877 start 
        if (!cursor.moveToPosition(position) || cursor.isAfterLast())
            return null;
        // gionee zhouyj 2012-10-10 modify for CR00709877 end 
        return getMessageItem(cursor.getString(COLUMN_MSG_TYPE), 
                cursor.getLong(COLUMN_ID), true);
        //gionee gaoj 2012-9-20 added for CR00699291 end
    }
     // Aurora xuyong 2015-04-16 deleted for yulore feature start
    /*// Aurora xuyong 2013-09-17 added for aurora's new feature start
    private boolean isAllNumber(String number) {
        char[] numbers = number.toCharArray();
        for (char c : numbers) {
            if ((c < '0' || c > '9') && c != '+') {
                return false;
            }
        }
        return true;
    }
    // Aurora xuyong 2013-10-17 added for aurora's new feature start
    private boolean startWithNum(String string) {
        char[] ca =  string.toCharArray();
        return  (ca[0] > '0' && ca[0] < '9') || ca[0] == '+';
    }
    // Aurora xuyong 2013-10-17 added for aurora's new feature end
    // Aurora xuyong 2013-09-17 added for aurora's new feature end*/
    // Aurora xuyong 2015-04-16 deleted for yulore feature end

    // gionee lwzh add for CR00633086 20120702 begin
    private void gnUpdateTitle(ContactList list) {
        // Aurora xuyong 2014-01-08 added for aurora's new feature start
        setAuroraMenuAdapter(null);
        if (list.size() == 1 && list.get(0).existsInDatabase()) {
            // Aurora xuyong 2014-04-21 deleted for bug #4364 start
            //setAuroraMenuItems(R.menu.aurora_compose_exist_contact_menu);
            // Aurora xuyong 2014-04-21 deleted for bug #4364 end
        } else if (list.size() == 1 && !list.get(0).existsInDatabase()) {
            // Aurora xuyong 2014-04-21 deleted for bug #4364 start
            //setAuroraMenuItems(R.menu.aurora_compose_new_contact_menu);
            // Aurora xuyong 2014-04-21 deleted for bug #4364 end
        // Aurora xuyong 2014-01-08 added for aurora's new feature start
        } else {
            LinearLayout popGroup = (LinearLayout)((LayoutInflater)LayoutInflater.from(ComposeMessageActivity.this)).inflate(R.layout.aurora_group_list_callback, null);
            popGroup.setFocusable(true);
            popGroup.setFocusableInTouchMode(true);
            TextView emptyView = (TextView)popGroup.findViewById(R.id.aurora_empty_view);
            ListView menuList = (ListView)popGroup.findViewById(R.id.aurora_group_call_list);
            menuList.setScrollbarFadingEnabled(true);
            AuroraGroupRecipientsAdapter adapter = new AuroraGroupRecipientsAdapter(ComposeMessageActivity.this, list, mMessageListItemHandler);
            menuList.setAdapter(adapter);
            // Aurora xuyong 2013-09-27 added for aurora's new feature start
          // Aurora xuyong 2014-08-30 deleted for bug #7803 start
            //DisplayMetrics dm = new DisplayMetrics();
            //ComposeMessageActivity.this.getWindowManager().getDefaultDisplay().getMetrics(dm);
          // Aurora xuyong 2014-08-30 deleted for bug #7803 end
            int number = adapter.getCount();
            // Aurora xuyong 2013-10-14 modified for aurora's new feature start 
            // Aurora xuyong 2014-03-25 modified for aurora's new feature start
          // Aurora xuyong 2014-08-30 modified for bug #7803 start
            int itemHeight = (int)(this.getResources().getDimensionPixelOffset(com.aurora.R.dimen.aurora_list_doubleline_height));
            menuList.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, (int)((number >= 5 ? 4.5 : number) * itemHeight)));
          // Aurora xuyong 2014-08-30 modified for bug #7803 end
            // Aurora xuyong 2014-03-25 modified for aurora's new feature end
            // Aurora xuyong 2013-10-14 modified for aurora's new feature end
            // Aurora xuyong 2013-09-27 added for aurora's new feature end
          // Aurora xuyong 2014-09-12 modified for bug #8282 start
             // Aurora yudingmin 2014-10-15 modified for bug #9092 start
            if(puwGroup == null){
                puwGroup = new GroupPop(popGroup);
            } else {
                puwGroup.setContentView(popGroup);
            }
             // Aurora yudingmin 2014-10-15 modified for bug #9092 end
          // Aurora xuyong 2014-09-12 modified for bug #8282 end
            popGroup.setOnClickListener(new View.OnClickListener() {
                
                @Override
                public void onClick(View v) {
                    // TODO Auto-generated method stub
                    // Aurora xuyong 2014-02-18 modified for aurora's new feature start
                    dismissGroupNewMenu(puwGroup);
                    //mMessageListItemHandler.sendEmptyMessage(CANCEL_POP);
                    // Aurora xuyong 2014-02-18 modified for aurora's new feature end
                }
            });
            popGroup.setOnKeyListener(new View.OnKeyListener() {
                
                @Override
                public boolean onKey(View v, int keyCode, KeyEvent event) {
                    // TODO Auto-generated method stub
                    if (event.getAction() == KeyEvent.ACTION_DOWN) {
                        switch(keyCode) {
                            case KeyEvent.KEYCODE_BACK:
                                // Aurora xuyong 2014-02-18 modified for aurora's new feature start
                                dismissGroupNewMenu(puwGroup);
                                // Aurora xuyong 2014-02-18 modified for aurora's new feature end
                                break;
                            default:
                                break;
                        }
                    }
                    return false;
                }
            });
          // Aurora xuyong 2014-09-12 modified for bug #8282 start
            puwGroup.setWindowLayoutMode(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
            puwGroup.setAnimationStyle(R.style.ActionBottomBarPopupAnimation);
            puwGroup.setFocusable(true);
            puwGroup.setBackgroundDrawable(new BitmapDrawable());
            puwGroup.setOutsideTouchable(true);
          // Aurora xuyong 2014-09-12 modfiied for bug #8282 end
            // Aurora xuyong 2014-02-18 deleted for aurora's new feature start
            //isPopRunning = true;
            //popType = 1;
            //popImage_alpha = 1.0f;
            // Aurora xuyong 2014-02-18 deleted for aurora's new feature end
        }
        // Aurora xuyong 2014-01-08 added for aurora's new feature end
        // Aurora xuyong 2014-01-08 added for aurora's new feature end
      //gionee gaoj 2012-7-4 added for CR00637162 start
        if (isRecipientsEditorVisible()) {
            //if (mMultiTablLayout != null) {
            //    mMultiTablLayout.setVisibility(View.GONE);
            //}

            if (mTitleLayout != null) {
                //mTitleLayout.setVisibility(View.GONE);
            }
            return;
        } else {
            //if (mTopPanel !=null) {
            //    mTopPanel.setVisibility(View.GONE);
            //}
        }
        // Aurora xuyong 2014-07-19 modified for bug #6646 start
        String title = mIsFromReject ? Utils.getRejectNameByNumber(this, list.get(0).getNumber()) : null;
        String subTitle = null;
        int cnt = list.size();
        Contact contact = null;
        if (mIsFromReject && title != null) {
            contact = list.get(0);
            final String addr = contact.getNumber();
            // Aurora xuyong 2014-07-19 modified for sougou start
            // Aurora xuyong 2015-04-16 modified for yulore feature start
            mNumberArea = MessageUtils.getNumAreaFromAora(ComposeMessageActivity.this, mMessageListItemHandler, addr, title);
            // Aurora xuyong 2015-04-16 modified for yulore feature end
            // Aurora xuyong 2014-07-19 modified for sougou end
            // Aurora xuyong 2015-04-16 deleted for yulore feature start
            /*if (contact.existsInDatabase()) {
                if (mNumberArea == null || "".equals(mNumberArea)) {
                    subTitle = addr;
                } else {
                    subTitle = addr + "  " + mNumberArea;
                }
            } else {
                if (mNumberArea != null && !"".equals(mNumberArea)) {
                    subTitle = mNumberArea;
                    if (isAllNumber(title)) {
                        if (startWithNum(subTitle)) {
                            subTitle = " " + subTitle;
                        } else {
                            if (subTitle.contains(" ")) {
                                subTitle = " " + subTitle;
                            }
                        }
                    }
                } else {
                    subTitle = addr;
                    if (isAllNumber(title)) {
                        subTitle = " " + subTitle;
                    }
                }
            }*/
            // Aurora xuyong 2015-04-16 deleted for yulore feature end
        } else {
            switch (cnt) {
                case 1:
                    contact = list.get(0);
                   // Aurora xuyong 2014-10-25 modified for privacy feature start
                    if (contact.getPrivacy() > AuroraPrivacyUtils.getCurrentAccountId()) {
                        title = contact.getNumber();
                    } else {
                        title = contact.getName();
                    }
                   // Aurora xuyong 2014-10-25 modified for privacy feature end
                    final String addr = contact.getNumber();
                    // Aurora xuyong 2014-07-19 modified for sougou start
                    // Aurora xuyong 2015-04-16 modified for yulore feature start
                    mNumberArea = MessageUtils.getNumAreaFromAora(ComposeMessageActivity.this, mMessageListItemHandler, addr, title);
                    // Aurora xuyong 2015-04-16 modified for yulore feature end
                    // Aurora xuyong 2014-07-19 modified for sougou end
                    // Aurora xuyong 2015-04-16 deleted for yulore feature start
                    /*if (contact.existsInDatabase()) {
                        if (mNumberArea == null || "".equals(mNumberArea)) {
                            subTitle = addr;
                        } else {
                            // Aurora xuyong 2013-10-17 modified for aurora's new feature start
                            subTitle = addr + "  " + mNumberArea;
                            // Aurora xuyong 2013-10-17 modified for aurora's new feature end
                        }
                    } else {
                        if (mNumberArea != null && !"".equals(mNumberArea)) {
                            subTitle = mNumberArea;
                            // Aurora xuyong 2013-10-17 modified for aurora's new feature start
                            if (isAllNumber(title)) {
                                if (startWithNum(subTitle)) {
                                    subTitle = " " + subTitle;
                                } else {
                                    // Aurora xuyong 2013-10-17 modified for aurora's new feature start
                                    if (subTitle.contains(" ")) {
                                        subTitle = " " + subTitle;
                                    }
                                    // Aurora xuyong 2013-10-17 modified for aurora's new feature end
                                }
                            }
                            // Aurora xuyong 2013-10-17 modified for aurora's new feature end
                        } else {
                            subTitle = addr;
                            // Aurora xuyong 2013-10-17 modified for aurora's new feature start
                            if (isAllNumber(title)) {
                                subTitle = " " + subTitle;
                            }
                            // Aurora xuyong 2013-10-17 modified for aurora's new feature end
                        }
                    }*/
                    // Aurora xuyong 2015-04-16 deleted for yulore feature end
                    // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
                    /*if (mMsgCount != 0) {
                        title = title + " (" + mMsgCount + ")";
                    }*/
                    // Aurora xuyong 2013-09-13 deleted for aurora's new feature end
                    break;
    
                default:
                    title = list.formatNames(", ");
                    subTitle = getResources()
                            .getQuantityString(R.plurals.recipient_count, cnt, cnt);
                    break;
            }

            // Aurora xuyong 2014-07-19 modified for bug #6646 end
        }
        // Aurora xuyong 2013-11-13 modified for BUG #658 start
        if (mTitleLayout != null) {
            // Aurora xuyong 2013-01-20 modified for bug #1985 start
            if (!mMsgListAdapter.mIsDeleteMode) {
                mTitleLayout = null;
            }
            // Aurora xuyong 2013-01-20 modified for bug #1985 start
        }
        gnInitMessageTitle();
        // Aurora xuyong 2013-11-13 modified for BUG #658 end
        // Aurora xuyong 2015-05-06 modified for bug #13424 start
        if (mTitleName != null) {
        	mTitleName.setText(title);
        }
        // Aurora xuyong 2015-05-06 modified for bug #13424 end
        // Aurora xuyong 2013-09-17 deleted for aurora's new feature start
        // Aurora xuyong 2015-03-04 deletetd for bug #11930 start
        /*if (isAllNumber(subTitle)) {
            Typeface ttf = Typeface.createFromFile("system/fonts/number.ttf");
            mTitleNumberArea.setTypeface(ttf);
        }*/
        // Aurora xuyong 2015-03-04 deletetd for bug #11930 end
        // Aurora xuyong 2013-09-17 deleted for aurora's new feature end
        // Aurora xuyong 2015-04-16 modified for yulore feature start
        // Aurora xuyong 2015-05-06 modified for bug #13424 start
        if (mTitleNumberArea != null) {
            mTitleNumberArea.setText(mNumberArea);
        }
        // Aurora xuyong 2015-05-06 modified for bug #13424 end
        // Aurora xuyong 2015-04-16 modified for yulore feature end
        //gionee gaoj 2013-3-21 added for CR00787217 start
        // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
        //mTitleName.setTextColor(getResources().getColor(R.color.gn_title_name_color));
        //mTitleNumberArea.setTextColor(getResources().getColor(R.color.gn_title_number_color));
        // Aurora xuyong 2013-09-13 deleted for aurora's new feature end
        //gionee gaoj 2013-3-21 added for CR00787217 end
        // gionee zhouyj 2012-11-06 modify for CR00705435 start
        // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
        //mCallButton.setVisibility((contact != null && contact.isEmail()) ? View.GONE
        //        : View.VISIBLE);
        // Aurora xuyong 2013-09-13 deleted for aurora's new feature end
        // gionee zhouyj 2012-11-06 modify for CR00705435 end
        
        if (cnt > 1) {
            // gionee gaoj 2013-1-4 added for CR00756848 start
            // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
            //mCallButton.setImageResource(R.drawable.gn_ic_menu_group);
            // Aurora xuyong 2013-09-13 deleted for aurora's new feature end
            // gionee gaoj 2013-1-4 added for CR00756848 end
        }
        
        if (mMsgListAdapter.mIsDeleteMode) {
            //if (mMultiTablLayout != null) {
            //    mMultiTablLayout.setVisibility(View.VISIBLE);
            //}
        } else if (mTitleLayout != null) {
            mTitleLayout.setVisibility(View.VISIBLE);
        }
        // gionee zhouyj 2013-03-26 add for CR00784180 start
        // Aurora xuyong 2013-12-11 modified for aurora's new feature start
        isSelectedAll = mMsgListAdapter.getSelectedNumber() > 0 && mMsgListAdapter.getSelectedNumber() >= mMsgListAdapter.getChildCount();
        // Aurora xuyong 2013-12-11 modified for aurora's new feature end
        if (mSelectAll != null) {
            // Aurora xuyong 2013-09-13 modified for aurora's new feature start
            if (isSelectedAll) {
                // Aurora xuyong 2013-09-18 modified for aurora's new feature start
                mSelectAll.setText(ComposeMessageActivity.this.getResourcesString(R.string.no_select_all));
                // Aurora xuyong 2013-09-18 modified for aurora's new feature end
            } else {
                mSelectAll.setText(ComposeMessageActivity.this.getResourcesString(R.string.select_all));
            }
            // Aurora xuyong 2013-09-13 modified for aurora's new feature end
        }
        // gionee zhouyj 2013-03-26 add for CR00784180 end
    //gionee gaoj 2012-7-4 added for CR00637162 end
        /*String title = null;;
        String subTitle = null;
        int cnt = list.size();
        Log.d(TAG, "gnUpdateTitle(): list.size()" + list.size());
        switch (cnt) {
            case 0: {
                String recipient = null;
                if (mContactContainer != null) {
                    recipient = mContactContainer.getText().toString();
                }
 
                if (TextUtils.isEmpty(recipient)) {
                    title = getString(R.string.create_new_message);
                } else {
                    // remove trailing separtors
                    if (isRecipientsEditorVisible()) {
                        title = getResources().getString(R.string.recipient_title,  mContactContainer.getRecipientCount());
                    }else {
                        if (recipient.endsWith(", ") || recipient.endsWith(",")) {
                            title = recipient.substring(0, recipient.lastIndexOf(","));
                        } else {
                            title = recipient;
                        }
                        final int c = mRecipientsEditor.getRecipientCount();
                        if (c > 1) {
                            subTitle = getResources().getQuantityString(R.plurals.recipient_count, c, c);
                        }
                    }
                }
                break;
            }
            
            case 1: {
                    if (isRecipientsEditorVisible()) {
                        title = getResources().getString(R.string.recipient_title, 1);
                    } else {
                        Contact contact = list.get(0);
                        title = contact.getName();

                        final String addr = contact.getNumber();
                        mNumberArea = MessageUtils.getNumAreaFromAora(addr);
                        if (contact.existsInDatabase()) {
                            if (mNumberArea == null || "".equals(mNumberArea)) {
                                subTitle = addr;
                            } else {
                                subTitle = addr + "   " + mNumberArea;
                            }
                        } else {
                            if (mNumberArea != null && !"".equals(mNumberArea)) {
                                subTitle = mNumberArea;
                            }
                        }

                        if (mMsgCount != 0) {
                            title = title + " (" + mMsgCount + ")";
                        }
                    }
                break;
            }
            default: {
                // Handle multiple recipients
                    if (isRecipientsEditorVisible()) {
                        cnt = mContactContainer.getRecipientCount();
                        if (cnt == 0) {
                            title = getString(R.string.create_new_message);
                        } else {
                            title = getResources().getString(R.string.recipient_title, cnt);
                        }
                    } else {
                        title = list.formatNames(", ");
                        subTitle = getResources().getQuantityString(R.plurals.recipient_count, cnt, cnt);
                    }
                break;
            }
        }
        mDebugRecipients = list.serialize();

        AuroraActionBar actionBar = getAuroraActionBar();

        if (isRecipientsEditorVisible()) {
            actionBar.setTitle(title);
        } else {
            actionBar.setTitle(title);
            actionBar.setSubtitle(subTitle);
        }*/
    }
    // Aurora xuyong 2013-11-13 added for aurora's new feature start
    private ChipsRecipientAdapter mCA;
    // Aurora xuyong 2013-11-13 added for aurora's new feature end
    private void gnInitRecipientsEditor() {
//m0
//        if (isRecipientsEditorVisible()) {
        if (isRecipientsEditorVisible() && isInitRecipientsEditor) {
//m1
            return;
        }
        // Must grab the recipients before the view is made visible because getRecipients()
        // returns empty recipients when the editor is visible.
        ContactList recipients = getRecipients();
//a0
        while (!recipients.isEmpty() && recipients.size() > RECIPIENTS_LIMIT_FOR_SMS) {
            recipients.remove(RECIPIENTS_LIMIT_FOR_SMS);
        }
//a1
        // gionee lwzh modify for CR00774362 20130227 begin
        //gionee gaoj 2012-7-2 added for CR00632216 start
        // gionee zhouyj 2013-04-08 modify for CR00793169 start
        if (MmsApp.mGnMessageSupport) {
            // Aurora xuyong 2014-10-22 modified for bug #9213 start
            // Aurora xuyong 2015-07-25 modified for bug #14157 start
        	mHandler.postDelayed(new Runnable() {
                public void run() {
                    if (!ContactsCacheSingleton.getInstance().isInited()) {
                        ContactsCacheSingleton.getInstance().init(null, ComposeMessageActivity.this.getApplicationContext());
                        ContactsCacheSingleton.getInstance().starQueryNumbers();
                    }
                }
            }, 100);
            // Aurora xuyong 2015-07-25 modified for bug #14157 end
            // Aurora xuyong 2014-10-22 modified for bug #9213 end
        }
        // gionee zhouyj 2013-04-08 modify for CR00793169 end
        //gionee gaoj 2012-7-2 added for CR00632216 end
        
        ViewStub viewStub = (ViewStub)findViewById(R.id.recipients_subject_linear);
        
        /*if (viewStub != null) {
            mTopPanel = viewStub.inflate();
            mTopPanel.setVisibility(View.VISIBLE);
        }*/
        
        //mPickContacts = (ImageButton) mTopPanel.findViewById(R.id.pick_contacts);
        // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
        //mRecipientsCount = (TextView) mTopPanel.findViewById(R.id.recipients_count);
        // Aurora xuyong 2013-09-13 deleted for aurora's new feature end
        //gionee gaoj 2013-3-21 added for CR00787217 start
        // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
        //mRecipientsCount.setTextColor(getResources().getColor(R.color.gn_msg_recipients_count_color));
        // Aurora xuyong 2013-09-13 deleted for aurora's new feature end
        //gionee gaoj 2013-3-21 added for CR00787217 end
        /*mPickContacts.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                mContactContainer.updateContacts();
                addContacts(10000);
                return;
            }
        });*/
        
        //gionee gaoj 2012-4-10 added for CR00555790 start
//        ViewStub stub = (ViewStub) findViewById(R.id.contact_container_stub);
//        if (stub != null) {
//            View parent = stub.inflate();
        // Aurora xuyong 2013-09-17 added for aurora's new feature start
            // Aurora xuyong 2013-10-21 added for bug #177 start
            mAuroraActionBar.removeItem(0);
            // Aurora xuyong 2013-10-21 added for bug #177 end
            addAuroraActionBarItem(AuroraActionBarItem.Type.Add,
                AURORA_ADD_BUTTON_ID);
            mAuroraActionBar.setCustomView(R.layout.aurora_recipients_area);
            ViewGroup recipientsGroup = mAuroraActionBar.getCustomView(R.id.aurora_recipients_area);
            mContactContainerScroll = (ScrollView)recipientsGroup.findViewById(R.id.aurora_container_scroll);
            mContactContainer = (ContactContainer)recipientsGroup.findViewById(R.id.aurora_recipients_editor);
            // Aurora xuyong 2013-10-25 modified for bug 220 start
            // Aurora xuyong 2015-02-13 modified for bug #11672 start
            if (mConversation != null && mConversation.getRecipients().size() <= 0) {
                mContactContainer.updateContacts(true);
            } else {
                mContactContainer.updateContacts(false);
            }
            // Aurora xuyong 2015-02-13 modified for bug #11672 end
            // Aurora xuyong 2013-10-25 modified for bug 220 end
            //mContactContainerScroll = (ScrollView) mTopPanel.findViewById(R.id.container_scroll);
            //mContactContainer = (ContactContainer) mTopPanel.findViewById(R.id.recipients_editor);
//        }
        // gionee lwzh add for CR00774362 20130227 end
        mContactContainerScroll.setVisibility(View.VISIBLE);
        mContactContainer.setVisibility(View.VISIBLE);
        //Gionee <zhouyj> <2013-05-22> modify for CR00818496 begin
        // Aurora xuyong 2013-11-13 added for aurora's new feature start
        mCA = new ChipsRecipientAdapter(this);
        // Aurora xuyong 2015-05-25 added for aurora's new feature start
        mCA.setShowPhoneAndEmail(true);
        // Aurora xuyong 2015-05-25 added for aurora's new feature end
        mRecipientsList.setAdapter(mCA);
        mRecipientsList.setOnItemClickListener(new OnItemClickListener() {
            public void onItemClick(AdapterView<?> parent, View view,
                    int position, long id) {

                if (view == null && parent != null) {
                    view = parent.getChildAt(position);
                }
                if (view == null) {
                    return;
                }

                TextView name = (TextView) view.findViewById(R.id.name);
                TextView number = (TextView) view.findViewById(R.id.number);
             // Aurora xuyong 2014-10-23 modified for privacy feature start
                TextView privacy = (TextView) view.findViewById(R.id.aurora_privacy);

                mContactContainer.getInfo(name, number, privacy);
             // Aurora xuyong 2014-10-23 modified for privacy feature emd
            }
        });
        mContactContainer.setHandler(mMessageListItemHandler);
        // Aurora xuyong 2013-11-13 added for aurora's new feature end
        // Aurora xuyong 2013-11-13 modified for aurora's new feature start
        if (MmsApp.mGnOptimizeAutoComplete) {
            mContactContainer.setAdapter(null);
        // Aurora xuyong 2013-11-13 modified for aurora's new feature end
        } else {
            mContactContainer.setAdapter(new RecipientsAdapter(this));
        }
        //Gionee <zhouyj> <2013-05-22> modify for CR00818496 end
        mContactContainer.setMaxLines(MAX_LINES);
        // Aurora xuyong 2015-09-14 added for aurora's new feature start
        mContactContainer.setBackKeyListener(new ContactContainer.BackKeyListener() {
			
			@Override
			public void onBackKeyPressed() {
				// TODO Auto-generated method stub
                // Aurora xuyong 2015-10-08 modified for aurora's new feature start
				dismissPops();
                // Aurora xuyong 2015-10-08 modified for aurora's new feature end
			}
		});
        // Aurora xuyong 2015-09-14 added for aurora's new feature end
        //gionee gaoj 2012-7-31 added for CR00661303 start
        DisplayMetrics dm = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(dm);
        int screenHeight = dm.heightPixels;
        int height = screenHeight * 2 / 5;
        mContactContainer.setDropDownHeight(height);
        //gionee gaoj 2012-7-31 added for CR00661303 end

        mContactContainer.setContactsChangeListener(new ContactContainer.ContactsChangeListener() {
            public void contactsChanged() {
                List<String> numberList = mContactContainer
                        .getNumbers();

                //gionee gaoj 2012-7-9 added for CR00626901 start
                int size = numberList.size();
                int recipientLimit = MmsConfig.getSmsRecipientLimit();
                if (size > recipientLimit) {
                    String tooManyMsg = getString(R.string.too_many_recipients, size,
                            recipientLimit);
                    Toast.makeText(ComposeMessageActivity.this,
                            tooManyMsg, Toast.LENGTH_LONG).show();
                    mContactContainer.removeLastContact(size - recipientLimit);
                    return;
                }
                //gionee gaoj 2012-7-9 added for CR00626901 end
                // Aurora xuyong 2014-10-23 modified for privacy feature start
                mWorkingMessage.setWorkingRecipients(mContactContainer.getNumbersAndPrivacy());
                // Aurora xuyong 2014-10-23 modified for privacy feature end
                if (!numberList.isEmpty()) {
                    mWorkingMessage.setHasEmail(
                            mContactContainer.containsEmail(), true);
                }
                //gionee gaoj 2012-6-20 modified for CR00627021 start
                final ContactList recipients = mContactContainer.constructContactsFromInput(false);
                // gionee zhouyj 2012-05-24 add for CR00608463 start 
                updateTitle(recipients);
                // gionee zhouyj 2012-05-24 add for CR00608463 end 
                //gionee gaoj 2012-6-20 modified for CR00627021 end
                // Aurora xuyong 2014-03-31 added for aurora's new feature start
                // Aurora xuyong 2014-06-17 modified for bug #5825 start
                final Set<String> recipientsSet = new HashSet<String>();
                // Aurora xuyong 2014-06-17 modified for bug #5825 end
                for (String number : numberList) {
                    recipientsSet.add(number);
                }
                // Aurora xuyong 2014-04-03 modified for auroa's new feature start
                // Aurora xuyong 2014-04-04 modified for aurora's new feature start
                //Long threadId = -1l;
                try {
                // Aurora xuyong 2014-06-17 modified for bug #5825 start
                    new Thread(new Runnable() {
                        
                        @Override
                        public void run() {
                            // Aurora xuyong 2014-06-13 modified for aurora's new feature start
                          // Aurora xuyong 2014-07-14 modified for aurora's new feature start
                          // Aurora xuyong 2014-10-23 modified for privacy feature start
                                long privacy = 0;
                                if (recipients.size() == 1) {
                                    privacy = recipients.get(0).getPrivacy();
                                }
                                boolean isConvExsit = checkConvExsitByRecipient(recipientsSet, privacy);
                                // Aurora xuyong 2015-06-30 modified for bug #13909 start
                                long threadId = -1;
                                try{
                                    threadId = Utils.getOrCreateThreadId(ComposeMessageActivity.this, recipientsSet, privacy);
                                } catch (IllegalArgumentException e) {
                                    LogTag.error("Can't get or create the thread id");
                                }
                                // Aurora xuyong 2015-06-30 modified for bug #13909 end
                                String oldValue = String.valueOf(mConversation.getThreadId());
                          // Aurora xuyong 2014-10-23 modified for privacy feature end
                          // Aurora xuyong 2014-10-25 modified for privacy feature start
                                mConversation = Conversation.get(ComposeMessageActivity.this, threadId, false, privacy);
                          // Aurora xuyong 2014-10-25 modified for privacy feature end
                          // Aurora xuyong 2014-07-23 modified for aurora's new feature start
                                if (operConvMap != null && !operConvMap.containsKey(threadId)) {
                                    // the method of that we check a conv whether it exists is it's state at the first time we get
                                    operConvMap.put(threadId, isConvExsit);
                                }
                          // Aurora xuyong 2014-09-09 added for 4.4 feature start
                                if (operConvStack != null) {
                                    operConvStack.push(threadId);
                                }
                          // Aurora xuyong 2014-09-09 added for 4.4 feature end
                          // Aurora xuyong 2014-07-23 modified for aurora's new feature end
                          // Aurora xuyong 2014-07-14 modified for aurora's new feature end
                            // Aurora xuyong 2014-06-13 modified for aurora's new feature end
                                // Aurora xuyong 2015-11-05 modified for bug #17082 start
                                // Aurora xuyong 2015-11-20 modified for aurora's new feature start
                                if (!mConversation.hasDraft() || isGnForwardMessage) {
                                    mWorkingMessage.clearConversation(mConversation, false);
                                } else {
                                    mWorkingMessage = WorkingMessage.loadDraft(ComposeMessageActivity.this, mConversation);
                                }
                                // Aurora xuyong 2015-11-20 modified for aurora's new feature end
                                // Aurora xuyong 2015-11-05 modified for bug #17082 end
                                mWorkingMessage.setConversation(mConversation);
                               // Aurora xuyong 2014-10-23 added for privacy feature start
                                // Aurora xuyong 2014-10-30 modified for bug #9503 start
                                if (MmsApp.sHasPrivacyFeature) {
                                    updatePrivacyThreadId(String.valueOf(mConversation.getThreadId()), oldValue);
                                }
                             // Aurora xuyong 2014-10-30 modified for bug #9503 end
                                mContactContainer.setCurrentThreadId(mConversation.getThreadId());
                               // Aurora xuyong 2014-10-23 added for privacy feature end
                                Message msg = mHandler.obtainMessage(START_QUERY_AFTER_CONTACT_CHANGED);
                                msg.sendToTarget();
                                // Aurora yudingmin 2014-10-08 added for contact change start
                                registerContactObserver();
                                // Aurora yudingmin 2014-10-08 added for contact change end
                            }
                      }).start();
                  // Aurora xuyong 2014-06-17 modified for bug #5825 end
                } catch (IllegalArgumentException e) {
                    e.printStackTrace();
                }
                // Aurora xuyong 2014-04-03 modified for auroa's new feature end
                // Aurora xuyong 2014-03-31 added for aurora's new feature end
            }
        });

        mContactContainer.setLinesWatcher(new ContactContainer.LinesWatcher() {
            public void linesChanged(int lines) {
                if (!isRecipientsEditorVisible()) {
                    return;
                }
                // gionee zhouyj 2012-05-15 annotate for CR00600566 start
                //updateTitle(mConversation.getRecipients());
                // gionee zhouyj 2012-05-15 annotate for CR00600566 end
                // If we have gone to zero recipients, disable send
                // button.
                updateSendButtonState();
                // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
                /*if (lines > MIN_LINES) {
                    String label = String.valueOf(mContactContainer
                            .getContactsCount())
                            + getResources().getString(
                                    R.string.gn_contact_unit_name);
                    //mRecipientsCount.setVisibility(View.VISIBLE);
                    mRecipientsCount.setText(label);
                } else {
                    mRecipientsCount.setVisibility(View.GONE);
                }*/
                // Aurora xuyong 2013-09-13 deleted for aurora's new feature end
                LinearLayout.LayoutParams rl = (LinearLayout.LayoutParams) mContactContainerScroll.getLayoutParams();

                // change above code like this
                if (lines > MAX_LINES) {
                    // set the max height of scroll view to the
                    // value of three lines
                    rl.height = mContactContainer
                            .getExternalScrollMaxHeight();
                } else if (lines <= MAX_LINES) {
                    rl.height = LinearLayout.LayoutParams.WRAP_CONTENT;
                }
                mContactContainerScroll.setLayoutParams(rl);
            }
        });
        
        if (isInitRecipientsEditor) {
            // Aurora xuyong 2014-10-23 added for privacy feature start
            mContactContainer.setCurrentThreadId(mConversation.getThreadId());
          // Aurora xuyong 2014-10-23 added for privacy feature end
            mContactContainer.initContainer(recipients);
        }
        mContactContainer.addTextChangedListener(mRecipientsWatcher);

        mContactContainer.setTouchedEventListener(new ContactContainer.TouchedEventListener() {
            @Override
            public void containerTouched() {
                mEditorOnClickListener.onClick(null);
              //Gionee <guoyx> <2013-07-18> modify for CR00780083 begin
                hideAttachmentSlideView();
              //Gionee <guoyx> <2013-07-18> modify for CR00780083 end
            }
        });
        
        //gionee gaoj 2012-5-9 added for CR00588933 start
        mContactContainer.setRequestFocusListener(new ContactContainer.RequestFocusListener() {
            
            @Override
            public void containerRequestFocus(boolean isFocus) {
                // TODO Auto-generated method stub
                // gionee zhouyj 2012-09-10 modify for CR00688861 start 
                // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
                // Aurora xuyong 2014-0815 modified for bug #7305 start
                if(isRecipientsEditorVisible()) {
                    if (isFocus) {
                        if (mScrollView != null) {
                            mScrollView.setEnabled(false);
                        }
                    } else {
                        if (mScrollView != null) {
                            mScrollView.setEnabled(true);
                        }
                    }
                }
                // Aurora xuyong 2014-0815 modified for bug #7305 end
                // Aurora xuyong 2013-09-13 deleted for aurora's new feature end
                // gionee zhouyj 2012-09-10 modify for CR00688861 end
            }
        });
            //gionee gaoj 2012-5-9 added for CR00588933 end
        //gionee gaoj 2012-4-10 added for CR00555790 end
    }
    // Aurora xuyong 2014-10-23 added for privacy feature start
    private void updatePrivacyThreadId(String newValue, String oldValue) {
        ContentValues values = new ContentValues();
        values.put("thread_id", newValue);
        ComposeMessageActivity.this.getContentResolver().update(Uri.parse("content://mms-sms/privacy-account"), values, "status = 1 AND thread_id = ?", new String[] { oldValue });
    }
    // Aurora xuyong 2014-10-23 added for privacy feature end
   // Aurora xuyong 2014-07-14 added for aurora's new feature start 
    private final HashMap<Long, Boolean> operConvMap = new HashMap<Long, Boolean>();
   // Aurora xuyong 2014-09-09 added for 4.4 feature start
    private final Stack<Long> operConvStack = new Stack<Long>();
   // Aurora xuyong 2014-09-09 added for 4.4 feature end 
    private final Uri THREAD_ID_CONTENT_URIS = Uri.parse("content://mms-sms/threadIDs");
    
    private String getNeedDeleteIDs(HashMap<Long, Boolean> idMaps) {
        StringBuilder builder = new StringBuilder();
        builder.append(android.provider.BaseColumns._ID + " IN (");
        Iterator iterator = idMaps.entrySet().iterator();
        while(iterator.hasNext()){
            Map.Entry<Long, Boolean> entry = (Map.Entry<Long, Boolean>)(iterator.next());
          // Aurora xuyong 2014-09-09 modified for 4.4 feature start
            Long key = entry.getKey();
            Boolean value = entry.getValue();
            if (!value && !key.equals(new Long(mConversation.getThreadId()))) {
                if (operConvStack != null && operConvStack.size() > 0 && operConvStack.peek().longValue() != key && mConversation.getThreadId() == 0) {
                    builder.append(entry.getKey() + ",");
                }
          // Aurora xuyong 2014-09-09 modified for 4.4 feature end
            }
        }
        builder.append(")");
        return builder.toString().replaceAll(",\\)", "\\)");
    }
    
    // Aurora yudingmin 2014-10-08 added for contact change start
    private void registerContactObserver(){
        if(!isFinishing()){
            Uri mConUri = mConversation.getUri();
            if (mConvaObserver != null) {
                this.getContentResolver().unregisterContentObserver(mConvaObserver);
            }
            if (mConUri != null) {
                this.getContentResolver().registerContentObserver(mConUri, true, mConvaObserver);
            }
        }
    }
    // Aurora yudingmin 2014-10-08 added for contact change end

    // Aurora yudingmin 2014-10-25 modify for bug #9343 start
    private void deleteConvByIds(HashMap<Long, Boolean> map) {
        Context context = getApplicationContext();
        deleteConvByIds(context, map);
    }
    
    private void deleteConvByIds(Context context, HashMap<Long, Boolean> map) {
        // Aurora yudingmin 2014-10-25 modify for bug #9343 end
        String selectArgs = getNeedDeleteIDs(map);
        Cursor cursor = null;
        try {
            cursor = context.getContentResolver().query(Threads.CONTENT_URI.buildUpon().appendQueryParameter("simple", "true").build(), 
                     Conversation.ALL_THREADS_PROJECTION,
                     selectArgs, null, null);
        } catch (SQLiteException e) {
            
        } finally {
            if (cursor != null) {
                cursor.moveToPosition(-1);
                while (cursor.moveToNext()) {
                    long threadID = cursor.getLong(cursor.getColumnIndex(android.provider.BaseColumns._ID));
                    Uri uri = ContentUris.withAppendedId(Threads.CONTENT_URI, threadID);
                    operConvMap.remove(threadID);
                    SqliteWrapper.delete(context, mContentResolver, uri, null, null);
                }
            }
            if (operConvMap != null) {
                operConvMap.clear();
            }
            // Aurora xuyong 2014-09-09 added for 4.4 feature start
            if (operConvStack != null) {
                operConvStack.clear();
            }
            // Aurora xuyong 2015-07-25 modified for bug #14157 start
            if (cursor != null && !cursor.isClosed()) {
            	cursor.close();
            }
            // Aurora xuyong 2015-07-25 modified for bug #14157 end
            // Aurora xuyong 2014-09-09 added for 4.4 feature end
        }
    }   
    // Aurora xuyong 2014-08-07 added for bug #7304 start
    // Aurora xuyong 2014-10-23 modified for privacy feature start
    private boolean checkConvExsitByRecipient(String semiSepNumbers, long privacy) {
    // Aurora xuyong 2014-10-23 modified for privacy feature start
        Set<String> recipients = new HashSet<String>();
        if (semiSepNumbers != null) {
            for (String number : semiSepNumbers.split(";")) {
                recipients.add(number);
            }
        }
       // Aurora xuyong 2014-10-23 modified for privacy feature start
        return checkConvExsitByRecipient(recipients, privacy);
       // Aurora xuyong 2014-10-23 modified for privacy feature end
    }
    // Aurora xuyong 2014-08-07 added for bug #7304 end
    // Aurora xuyong 2014-10-23 modified for privacy feature start
    private boolean checkConvExsitByRecipient(Set<String> recipients, long privacy) {
    // Aurora xuyong 2014-10-23 modified for privacy feature end
        Uri.Builder uriBuilder = THREAD_ID_CONTENT_URIS.buildUpon();
        for (String recipient : recipients) {
            if (Mms.isEmailAddress(recipient)) {
                recipient = android.provider.Telephony.Mms.extractAddrSpec(recipient);
            }
            uriBuilder.appendQueryParameter("recipient", recipient);
        }
      // Aurora xuyong 2014-10-23 added for privacy feature start
        uriBuilder.appendQueryParameter("is_privacy", String.valueOf(privacy));
      // Aurora xuyong 2014-10-23 added for privacy feature end
        Uri uri = uriBuilder.build();
        Cursor cursor = SqliteWrapper.query(ComposeMessageActivity.this, mContentResolver,
        // Aurora xuyong 2014-08-25 modified for aurora's feature start
                uri, new String[]{ android.provider.BaseColumns._ID, "message_count"}, null, null, null);
        // Aurora xuyong 2014-09-09 modified for uptimize start
        if (cursor == null) {
        // Aurora xuyong 2014-09-09 modified for uptimize end
            return false;
        } else {
            int messagecount = 0;
            if (cursor != null && cursor.moveToFirst()) {
                messagecount = cursor.getInt(cursor.getColumnIndex("message_count"));
                // Aurora xuyong 2014-09-09 added for uptimize start
                cursor.close();
                // Aurora xuyong 2014-09-09 added for uptimize end
            }
            return messagecount > 0 ? true : false;
        }
        // Aurora xuyong 2014-08-25 modified for aurora's feature end
    }
    // Aurora xuyong 2014-07-14 added for aurora's new feature end
    // Aurora xuyong 2014-03-31 added for aurora's new feature start
    // Aurora xuyong 2014-04-04 deleted for aurora's new feature start
    //private boolean mContactContainerNeedFocus;
    // Aurora xuyong 2014-04-04 deleted for aurora's new feature end
    // Aurora xuyong 2014-03-31 added for aurora's new feature end
    // Aurora xuyong 2014-04-04 added for aurora's new feature start
    private long mPreThreadId;
    // Aurora xuyong 2014-04-04 added for aurora's new feature end
    
    private final int URI_INVALID = -1;
    private final int URI_PHONE = 1;
    private final int URI_HTTP = 2;
    private final int URI_MAIL = 3;
    private final int URI_RTSP = 4;
    
    private ClickContent mClickContent;
    // Aurora xuyong 2014-04-21 added for bug #4438 start
    private Contact mCurrentContact;
    // Aurora xuyong 2014-04-21 added for bug #4438 end
    
    private int getFlag(String url) {
        int flag = URI_INVALID;
        if (url.startsWith("tel:")) {
            flag = URI_PHONE;
        } else if (url.startsWith("http:") || url.startsWith("https:")) {
            flag = URI_HTTP;
        } else if (url.startsWith("mailto:")) {
            flag = URI_MAIL;
        } else if (url.startsWith("rtsp:")) {
            flag = URI_RTSP;
        }
        return flag;
    }
    // Aurora xuyong 2013-09-26 added for aurora's new feature start
    // Aurora xuyong 2014-02-18 deleted for aurora's new feature start
    //private final int CANCEL_TO = 0x128;
    // Aurora xuyong 2014-02-18 deleted for aurora's new feature end
    private GroupPop toPuw = null;
    // Aurora xuyong 2013-09-26 added for aurora's new feature end
    // Aurora xuyong 2013-12-11 added for aurora's new feature start
    // Aurora xuyong 2013-12-17 modify for aurora's new feature start
    public static HashMap<Long, Boolean> selectResendMap = new HashMap<Long, Boolean>();
    // Aurora xuyong 2013-12-17 modify for aurora's new feature end
    // Aurora xuyong 2013-12-11 added for aurora's new feature end
    // Aurora xuyong 2013-12-27 added for aurora]s new feature start
    private final int RESEND_MESSAGE = 23;
    // Aurora xuyong 2013-12-27 added for aurora]s new feature end
    // Aurora xuyong 2014-05-30 added for multisim feature start
    private String mSelectedNumberInGroup;
    // Aurora xuyong 2014-05-30 added for multisim feature end
   // Aurora xuyong 2014-09-16 added for aurora's new feature start
    private String mAddOpNumber = null;
   // Aurora xuyong 2014-09-16 added for aurora's new feature end
    
    private int mSelectedImageCount = 0;
    
    private void gnMessageListHandleMessage(Message msg) {
        String type;
        switch (msg.what) {
	        case ATTACH_IMAGE_COUNT_OVER:
	        	Toast.makeText(ComposeMessageActivity.this, R.string.aurora_attach_image_count_over, Toast.LENGTH_SHORT).show();
	        	return;
            case UPDATE_SELECT_IMAGE_COUNT:
            	  mSelectedImageCount = msg.arg1;
            	  SimpleAdapter selectedAdapter = new SimpleAdapter(this, getData(),
                          R.layout.aurora_add_attach_item, new String[] { AURORA_ADD_ITEM_TITLE },
                          new int[] { R.id.aurora_add_title });
              	  mMenus.setAdapter(selectedAdapter);
              	  mMenus.invalidate();
        	      return;
            // Aurora xuyong 2015-04-16 added for yulore feature start
            case UPDATE_NUMBER_AREA:
                mTitleNumberArea.setText((String)msg.obj);
                return;
            // Aurora xuyong 2015-04-16 added for yulore feature end
            // Aurora xuyong 2013-09-26 added for aurora's new feature start
            // Aurora xuyong 2013-10-14 added for aurora's new feature start 
        // Aurora xuyong 2013-11-13 added for aurora's new feature start
        // Aurora xuyong 2013-12-18 added for #bug 480 start
        case EDIT_TEXT_ALL_DELETE:
            if (mWorkingMessage != null) {
                mWorkingMessage.removeAttachment(true);
                mTextEditor.setSelection(0);
                hideAttachmentSlideView();
            }
            return;
        // Aurora xuyong 2013-12-18 added for #bug 480 end
        // Aurora xuyong 2015-03-04 added for bug #11831 start
        case ContactContainer.NOTIFY_FOCUS_CHANGE:
            View clickedView = (View)msg.obj;
            if (clickedView != null) {
                gnOnClick(clickedView);
            } else {
                if (msg.arg2 == BACK_TYPE_BACKCODE) {
                    handleKeyBackDownEvent();
                } else if (msg.arg2 == BACK_TYPE_ACTIONBAR) {
                    handleAuroraActionBarBackItemClick();
                }
            }
            return;
        // Aurora xuyong 2015-03-04 added for bug #11831 end
        case ContactContainer.LISTINVIS:
            mAuroraRecipientsLayout.setVisibility(View.GONE);
            mRecipientsList.setAdapter(null);
            return;
        case ContactContainer.REFRESH:
            mAuroraRecipientsLayout.setVisibility(View.VISIBLE);
            mRecipientsList.setAdapter(mCA);
            mCA.getFilter().filter((CharSequence) msg.obj.toString());
            return;
        // Aurora xuyong 2013-11-13 added for aurora's new feature end
            case AuroraMultiLinkAdapter.LINK_CLICK:
              // Aurora xuyong 2014-09-12 added for bug #8282 start
                 dismissGroupNewMenu(puw);
                 setAuroraMenuAdapter(null);
              // Aurora xuyong 2014-09-15 added for aurora's new feature start
                 if (mMsgListAdapter.mIsDeleteMode) {
                     return;
                 }
              // Aurora xuyong 2014-09-15 added for aurora's new feature end
              // Aurora xuyong 2014-09-12 added for bug #8282 end
                 mClickContent = (ClickContent)msg.obj;
              // Aurora xuyong 2014-08-28 added for NullpointerException start
                 if (mClickContent == null || mClickContent.getValue() == null) {
                     return;
                 }
              // Aurora xuyong 2014-08-28 added for NullpointerException end
              // Aurora xuyong 2014-09-12 deleted for bug #8282 start
                 //dismissGroupMenu(puw);
              // Aurora xuyong 2014-09-12 deleted for bug #8282 end
                   switch (getFlag(mClickContent.getValue())) {
                     case URI_PHONE:
                        // Aurora xuyong 2014-04-21 modified for bug #4438 start
                          String number = mClickContent.getValue().substring(4);
                          mCurrentContact = Contact.get(number, true);
                        // Aurora xuyong 2014-05-30 modified for multisim feature start
                        // Aurora xuyong 2014-06-06 added for bug #5367 start 
                        // Aurora xuyong 2014-06-07 modified for bug #5449 start
                          if (MmsApp.mGnMultiSimMessage && mInsertedSimCount == 2) {
                        // Aurora xuyong 2014-06-07 modified for bug #5449 end
                        // Aurora xuyong 2014-06-06 added for bug #5367 end
                            if (mCurrentContact.existsInDatabase()) {
                                int slotIdEx = getLastCallSlotId(ComposeMessageActivity.this, number);
                                switch(slotIdEx) {
                                    case -1:
                                        setAuroraMenuItems(R.menu.aurora_msg_content_phone_exsit_menu_multisim);
                                        break;
                                    case 0:
                                        setAuroraMenuItems(R.menu.aurora_msg_content_phone_exsit_menu_multisim1f);
                                        break;
                                    case 1:
                                        setAuroraMenuItems(R.menu.aurora_msg_content_phone_exsit_menu_multisim2f);
                                        break;
                                }
                            } else if (!mCurrentContact.existsInDatabase()) {
                                int slotIdNew = getLastCallSlotId(ComposeMessageActivity.this, number);
                                switch(slotIdNew) {
                                    case -1:
                                        setAuroraMenuItems(R.menu.aurora_msg_content_phone_menu_multisim);
                                        break;
                                    case 0:
                                        setAuroraMenuItems(R.menu.aurora_msg_content_phone_menu_multisim1f);
                                        break;
                                    case 1:
                                        setAuroraMenuItems(R.menu.aurora_msg_content_phone_menu_multisim2f);
                                        break;
                                }
                            }
                          } else {
                              if (mCurrentContact.existsInDatabase()) {
                                 setAuroraMenuItems(R.menu.aurora_msg_content_phone_exsit_menu);
                              } else {
                                 setAuroraMenuItems(R.menu.aurora_msg_content_phone_menu);
                              }
                        // Aurora xuyong 2014-05-30 modified for multisim feature end
                          }
                        // Aurora xuyong 2014-04-21 modified for bug #4438 end
                          break;
                     case URI_HTTP:
                          setAuroraMenuItems(R.menu.aurora_msg_content_http_menu);
                          break;
                     case URI_MAIL:
                          setAuroraMenuItems(R.menu.aurora_msg_content_mail_menu);
                          break;
                     case URI_RTSP:
                          setAuroraMenuItems(R.menu.aurora_msg_content_rtsp_menu);
                          break;
                     default:
                          break;
                  }
                 // Aurora xuyong 2013-11-20 modify for monkey-running checked exception start
                  try {
                    showAuroraMenu();
                 } catch (Exception e) {
                    e.printStackTrace();
                 }
                 // Aurora xuyong 2013-11-20 modify for monkey-running checked exception end
                  hideInputMethod();
                 return;
            // Aurora xuyong 2013-10-14 added for aurora's new feature end
            // Aurora xuyong 2014-02-18 deleted for aurora's new feature start
            /*case CANCEL_TO:
                 dismissGroupMenu(toPuw);
                 return;
            case CANCEL_POP:
                 dismissGroupMenu(puw);
                 return;*/
            // Aurora xuyong 2014-02-18 deleted for aurora's new feature end
            case AuroraGroupRecipientsAdapter.E_DIAL:
            case AuroraGroupRecipientsAdapter.N_DIAL:
                 dismissGroupNewMenu(puwGroup);
                 Contact edContact = (Contact)msg.obj;
                 String number = edContact.getNumber();
              // Aurora xuyong 2014-05-30 added for multisim feature start
                 mSelectedNumberInGroup = number;
              // Aurora xuyong 2014-05-30 added for multisim feature end
                 if (Mms.isPhoneNumber(number)) {
                // Aurora xuyong 2014-06-03 added for multisim feature start 
                // Aurora xuyong 2014-06-03 added for multisim feature end
                 // Aurora xuyong 2014-05-30 modified for multisim feature start
                 // Aurora xuyong 2014-06-06 added for bug #5367 start
                 // Aurora xuyong 2014-06-07 modified for bug #5449 start
                     if (MmsApp.mGnMultiSimMessage && mInsertedSimCount == 2) {
                 // Aurora xuyong 2014-06-07 modified for bug #5449 end
                 // Aurora xuyong 2014-06-06 added for bug #5367 end
                   // Aurora xuyong 2014-06-03 deleted for multisim feature start 
                        //if (puw != null) {
                        //    dismissGroupNewMenu(puw);
                        //}
                   // Aurora xuyong 2014-06-03 deleted for multisim feature end
                        setAuroraMenuAdapter(null);
                        int slotId = getLastCallSlotId(ComposeMessageActivity.this, number);
                        switch(slotId) {
                            case -1:
                                setAuroraMenuItems(R.menu.aurora_compose_contact_menu_multisim);
                                break;
                            case 0:
                                setAuroraMenuItems(R.menu.aurora_compose_contact_menu_multisim1f);
                                break;
                            case 1:
                                setAuroraMenuItems(R.menu.aurora_compose_contact_menu_multisim2f);
                                break;
                        }
                        try {
                            showAuroraMenu();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                         
                     } else {
                 // Aurora xuyong 2014-05-30 modified for multisim feature end
                    // Aurora xuyong 2014-06-06 modified for bug #5367 start 
                         if (MmsApp.mGnMultiSimMessage) {
                             Intent dialIntent = AuroraTelephoneManager.getCallNumberIntent(number, mDaultCallSlot);
                             startActivity(dialIntent); 
                         } else {
                             Intent dialIntent = new Intent(Intent.ACTION_CALL, Uri.parse("tel:" + number));
                             startActivity(dialIntent);
                         }
                     // Aurora xuyong 2014-06-06 modified for bug #5367 end
                     }
                 }
                 return;
            case AuroraGroupRecipientsAdapter.E_VIEW:
                 // Aurora xuyong 2014-02-18 modified for aurora's new feature start
                 dismissGroupNewMenu(puwGroup);
                 // Aurora xuyong 2014-02-18 modified for aurora's new feature end
                 Contact evContact = (Contact)msg.obj;
                 Uri evtUri = evContact.getUri();
                 Intent intent = new Intent(Intent.ACTION_VIEW, evtUri);
                 intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);
                 startActivity(intent);
                 return;
            case AuroraGroupRecipientsAdapter.N_CHECK:
                 dismissGroupNewMenu(puwGroup);
                 final Contact nvContact = (Contact)msg.obj;
              // Aurora xuyong 2014-09-16 modified for aurora's new feature start
                 mAddOpNumber = nvContact.getNumber();
                 setAuroraMenuAdapter(null);
                 setAuroraMenuItems(R.menu.aurora_addop_menu);
                 try {
                    showAuroraMenu();
                 } catch (Exception e) {
                    e.printStackTrace();
                 }
              // Aurora xuyong 2014-09-16 modfiied for aurora's new feature end
                 return;
            // Aurora xuyong 2013-09-26 added for aurora's new feature end
            // Aurora xuyong 2013-09-23 added for aurora's new feature start
            // Aurora xuyong 2013-12-11 added for aurora's new feature start
            // Aurora xuyong 2013-12-27 modified for aurora]s new feature start
            case RESEND_MESSAGE:
            // Aurora xuyong 2013-12-27 modified for aurora]s new feature end
                 int rflag = msg.arg1;
                 Long rId = (Long)msg.obj;
                 if (rflag == 1) {
                     selectResendMap.put(rId, true);
                 } else {
                     selectResendMap.put(rId, false);
                 }
                 return;
            case MessageListItem.ITEM_COPY_IDENTIFY_NUM:
                 copyToClipboard((String)msg.obj);
                 return;
            case MessageListItem.MSG_LIST_EDIT_SMS_LIST_DIALOG:
                 // Aurora xuyong 2014-03-17 modified for aurora's new feature start
                 AuroraListView view = new AuroraListView(this);
                 // Aurora xuyong 2014-03-17 modified for aurora's new feature end
                 GroupItemInfoModel model = (GroupItemInfoModel)msg.obj;
                 ArrayList<Integer> statusList = (ArrayList<Integer>)model.getStatus();
                 ArrayList<String> agrList = (ArrayList<String>)model.getAddress();
                 ArrayList<Long> idList = (ArrayList<Long>)model.getIds();
                 ArrayList<String> agrListAgen = new ArrayList<String>();
                 ArrayList<Long> idListAgen = new ArrayList<Long>();
                 for (int i = 0; i < statusList.size(); i++) {
                 // Aurora xuyong 2014-06-09 modified for aurora's new feature start
                 // Aurora xuyong 2014-12-23 modified for bug #10692 start
                     if (statusList.get(i) == Sms.STATUS_FAILED) {
                 // Aurora xuyong 2014-12-23 modified for bug #10692 end
                 // Aurora xuyong 2014-06-09 modified for aurora's new feature end
                         agrListAgen.add(agrList.get(i));
                         idListAgen.add(idList.get(i));
                     }
                 }
                 for (Long integ : idListAgen) {
                     selectResendMap.put(integ, true);
                 }
                 final ArrayList<Long> idListAgenF = idListAgen;
                 // Aurora xuyong 2013-12-27 modified for aurora]s new feature start
                 AuroraGroupReciResendAdapter agrAdapter = new AuroraGroupReciResendAdapter(ComposeMessageActivity.this, idListAgen, agrListAgen, getRecipients());
                 // Aurora xuyong 2013-12-27 modified for aurora]s new feature end
                 view.setAdapter(agrAdapter);
                 view.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                     public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                         if (view != null) {
                             int childCount = ((ViewGroup)view).getChildCount();
                             for (int i = 0; i < childCount; i++) {
                                 View child = ((ViewGroup)view).getChildAt(i);
                                 if (child instanceof CheckBox) {
                                     // Aurora xuyong 2013-12-17 modified for aurora's new feature start
                                     ((AuroraCheckBox)child).auroraSetChecked(!((AuroraCheckBox)child).isChecked(), true);
                                     // Aurora xuyong 2013-12-27 modified for aurora]s new feature start
                                     Message msg = Message.obtain(mMessageListItemHandler, RESEND_MESSAGE);
                                     // Aurora xuyong 2013-12-27 modified for aurora]s new feature end
                                     if (((AuroraCheckBox)child).isChecked()) {
                                     // Aurora xuyong 2013-12-17 modified for aurora's new feature end
                                         msg.arg1 = 1;
                                         msg.obj = idListAgenF.get(position);
                                         msg.sendToTarget();
                                     } else {
                                         msg.arg1 = 0;
                                         msg.obj = idListAgenF.get(position);
                                         msg.sendToTarget();
                                     }
                                 }
                                 break;
                             }
                         }
                   }
                 });
                 DisplayMetrics listDm = new DisplayMetrics();
                 ComposeMessageActivity.this.getWindowManager().getDefaultDisplay().getMetrics(listDm);
                 // Aurora xuyong 2013-12-17 modify for aurora's new feature start
                 // Aurora xuyong 2013-12-17 modified for aurora's new feature start
                 view.setPadding(0, 0, 0, (int)(listDm.density * 10.7));
                 // Aurora xuyong 2013-12-17 modified for aurora's new feature end
                 // Aurora xuyong 2013-12-27 deleted for aurora]s new feature start
                 //int adCount = agrAdapter.getCount();
                 // Aurora xuyong 2013-12-27 deleted for aurora]s new feature end
                 // Aurora xuyong 2013-12-17 modify for aurora's new feature end
                 new AuroraAlertDialog.Builder(this)
                     .setView(view)
                     .setTitle(R.string.aurora_send_fail_title)
                     // Aurora xuyong 2013-12-16 added for aurora's new feature start
                     .setTitleDividerVisible(true)
                     // Aurora xuyong 2013-12-16 added for aurora's new feature end
                     .setPositiveButton(R.string.aurora_msg_resend, new DialogInterface.OnClickListener() {
                            
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                // TODO Auto-generated method stub
                                Iterator iter = selectResendMap.entrySet().iterator();
                                // Aurora xuyong 2013-12-27 modified for aurora]s new feature start
                                ResendMessageTask task = new ResendMessageTask();
                                task.execute(selectResendMap);
                                // Aurora xuyong 2013-12-27 modified for aurora]s new feature end
                            }
                        })
                     .setNegativeButton(R.string.no, new DialogInterface.OnClickListener() {
                         
                         @Override
                         public void onClick(DialogInterface dialog, int which) {
                             selectResendMap.clear();
                             dialog.dismiss();
                         }
                         
                     })
                     .show();
                 return;
            // Aurora xuyong 2013-12-11 added for aurora's new feature end
            case MessageListItem.MSG_LIST_EDIT_SMS_DIALOG:
                 final String smsType = "sms";
                 final Long smsId = (Long) msg.obj;
                 new AuroraAlertDialog.Builder(this)
                    .setMessage(R.string.aurora_msg_resend_indi)
                    .setPositiveButton(R.string.aurora_msg_resend,
                         new DialogInterface.OnClickListener() {
                            
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                // TODO Auto-generated method stub
                                MessageItem msgItem = getMessageItem(smsType, smsId, false);
                                if (msgItem != null) {
                                    if (msgItem.mSimId <= 0) {
                                        reSendSimSelection(msgItem);
                                    } else {
                                        reSendMsg(msgItem);
                                    }
                                }
                            }
                        })
                    .setNegativeButton(R.string.no, new CancelSendingListener())
                    .show();
                 return;
            case MessageListItem.MSG_LIST_EDIT_MMS_DIALOG:
                 // Aurora xuyong 2013-11-19 modified for bug #829 start
                    final String mmsType = "mms";
                 // Aurora xuyong 2013-11-19 modified for bug #829 end
                    final Long mmsId = (Long) msg.obj;
                 new AuroraAlertDialog.Builder(this)
                     .setMessage(R.string.aurora_msg_resend_indi)
                     .setPositiveButton(R.string.aurora_msg_resend,
                             new DialogInterface.OnClickListener() {
                                
                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    // TODO Auto-generated method stub
                                    MessageItem msgItem = getMessageItem(mmsType, mmsId, false);
                                    if (msgItem != null) {
                                        if (msgItem.mSimId <= 0) {
                                            reSendSimSelection(msgItem);
                                        } else {
                                            reSendMsg(msgItem);
                                        }
                                    }
                                }
                            })
                     .setNegativeButton(R.string.no, new CancelSendingListener())
                     .show();
                    return;
                 // Aurora xuyong 2013-09-23 added for aurora's new feature end
            case MessageListItem.MSG_LIST_EDIT_MMS:
                 type = "mms";
                 break;
            case MessageListItem.MSG_LIST_EDIT_SMS:
                 type = "sms";
                 break;
//a0
            case MessageListAdapter.MSG_LIST_NEED_REFRASH: {
                Log.d(MessageListAdapter.CACHE_TAG, "mMessageListItemHandler.handleMessage(): run adapter notify in mMessageListItemHandler.");
                mMsgListAdapter.setClearCacheFlag(false);
                mMsgListAdapter.notifyDataSetChanged();
                return;
            }
            //Aurora xuyong 2013-10-11 added for aurora's new feature start
            case MessageListItem.ITEM_SHOW_DETAIL:
                 Intent detailIntent = new Intent(ComposeMessageActivity.this, AuroraMsgDetailActivity.class);
                 detailIntent.putExtra("msgdetail", (CharSequence)msg.obj);
                 startActivity(detailIntent);
                 return;
            //Aurora xuyong 2013-10-11 added for aurora's new feature end
            // Aurora xuyong 2013-10-14 added for aurora's new feature start 
            case MessageListItem.ITEM_BODY_MULTI_CLICK:
                 // Aurora xuyong 2014-02-18 added for aurora's new feature start
                 if (puw != null) {
                     dismissGroupNewMenu(puw);
                 }
                 // Aurora xuyong 2014-02-18 added for aurora's new feature end
                 hideInputMethod();
                 mClickContent = (ClickContent)msg.obj;
              // Aurora xuyong 2014-08-28 added for NullpointerException start
                 if (mClickContent == null || mClickContent.getValues() == null) {
                     return;
                 }
              // Aurora xuyong 2014-08-28 added for NullpointerException end
                 ArrayList<String> values = mClickContent.getValues();
                 LinearLayout popGroup = (LinearLayout)((LayoutInflater)LayoutInflater.from(ComposeMessageActivity.this)).inflate(R.layout.aurora_group_list_callback, null);
                 popGroup.setFocusable(true);
                 popGroup.setFocusableInTouchMode(true);
                 ListView linkList = (ListView)popGroup.findViewById(R.id.aurora_group_call_list);
                 AuroraMultiLinkAdapter adapter = new AuroraMultiLinkAdapter(ComposeMessageActivity.this, values, mMessageListItemHandler);
                 linkList.setAdapter(adapter);
                 DisplayMetrics dm = new DisplayMetrics();
                 ComposeMessageActivity.this.getWindowManager().getDefaultDisplay().getMetrics(dm);
                 int linkCount = adapter.getCount();
                 linkList.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, (int)((linkCount > 6 ? 6.6 : linkCount) * 47 * dm.density)));
                 puw = new GroupPop(popGroup);
                 popGroup.setOnClickListener(new View.OnClickListener() {
                        
                        @Override
                        public void onClick(View v) {
                            // TODO Auto-generated method stub
                            // Aurora xuyong 2014-02-18 modified for aurora's new feature start
                            dismissGroupNewMenu(puw);
                            // Aurora xuyong 2014-02-18 modified for aurora's new feature end
                        }
                 });
                popGroup.setOnKeyListener(new View.OnKeyListener() {
                    
                    @Override
                    public boolean onKey(View v, int keyCode, KeyEvent event) {
                        // TODO Auto-generated method stub
                        if (event.getAction() == KeyEvent.ACTION_DOWN) {
                            switch(keyCode) {
                                case KeyEvent.KEYCODE_BACK:
                                    // Aurora xuyong 2014-02-18 modified for aurora's new feature start
                                    dismissGroupNewMenu(puw);
                                    // Aurora xuyong 2014-02-18 modified for aurora's new feature end
                                    break;
                                default:
                                    break;
                             }
                         }
                          return false;
                      }
                 });
                 puw.setWindowLayoutMode(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                 puw.setAnimationStyle(R.style.ActionBottomBarPopupAnimation);
                 puw.setFocusable(true);
                 puw.setBackgroundDrawable(new BitmapDrawable());
                 puw.setOutsideTouchable(true);
                 // Aurora xuyong 2014-02-18 modified for aurora's new feature start
                 //isPopRunning = true;
                 //popType = 1;
                 //popImage_alpha = 1.0f;
                 if (puw != null && !puw.isShowing()) {
                     startMenuShowThread();
                     // Aurora xuyong 2014-03-07 modified for aurora's new feature start 
                     puw.showAtLocation(mDecorView,
                            Gravity.BOTTOM, 0, 0);
                     // Aurora xuyong 2014-03-07 modified for aurora's new feature end
                 }
                 // Aurora xuyong 2014-02-18 modified for aurora's new feature end
                 return;
                 // Aurora xuyong 2013-10-14 added for aurora's new feature end
            // Aurora xuyong 2014-02-11 added for bug #1923 start
            case MessageListItem.ITEM_BODY_LONG_CLICK:
                int position = msg.arg1;
                MessageItem mei = ((MessageListItem)mMsgListView.getChildAt(position - mMsgListView.getFirstVisiblePosition())).getMessageItem();
             // Aurora xuyong 2014-08-06 added for nullpointerexception start
                if (mei == null) {
                    return;
                }
             // Aurora xuyong 2014-08-06 added for nullpointerexception end
                GroupItemInfoModel tgm = mei.getGroupItemInfoModel();
                if (mMsgIds == null) {
                    mMsgIds = new ArrayList<Long>();
                }
                if (tgm != null) {
                    for (Long ite : tgm.getIds()) {
                        mMsgIds.add(ite);
                    }
                } else {
                    mMsgIds.add(mei.mMsgId);
                }
                mMsgType = mei.mType;
                mLongClickPos = position;
                // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 start
                mMsgListAdapter.initSelectMap(mLongClickPos);
                // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 end
                //Aurora xuyong 2014-08-16 added for aurora's new feature start
                // Aurora xuyong 2014-08-22 deleted for bug #7739 & #7853 start
                //initMap(mMsgListAdapter.getCursor(), mMsgListAdapter.getInCursorPosition(mLongClickPos));
                // Aurora xuyong 2014-08-22 deleted for bug #7739 & #7853 end
                //Aurora xuyong 2014-08-16 added for aurora's new feature end
                if (!mMsgListAdapter.mIsDeleteMode) {
                    setBatchOperation();
                }
                return;
            // Aurora xuyong 2014-02-11 added for bug #1923 end
            case MessageListItem.ITEM_BODY_CLICK:
                {
                    mClickContent = (ClickContent)msg.obj;
                // Aurora xuyong 2014-08-28 added for NullpointerException start
                    if (mClickContent == null || mClickContent.getValue() == null) {
                        return;
                    }
                // Aurora xuyong 2014-08-28 added for NullpointerException end
                    String value = mClickContent.getValue();
                    // Aurora liugj 2013-09-30 modified for aurora's new feature start
                    setAuroraMenuAdapter(null);
                    // Aurora liugj 2013-09-30 modified for aurora's new feature end
                    switch (getFlag(value)) {
                        case URI_PHONE:
                        // Aurora xuyong 2014-04-21 added for bug #4438 start
                             String phoneNumber = value.substring(4);
                             mCurrentContact = Contact.get(phoneNumber, true);
                        // Aurora xuyong 2014-05-30 modified for multisim feature start
                        // Aurora xuyong 2014-06-06 added for bug #5367 start 
                        // Aurora xuyong 2014-06-07 modified for bug #5449 start
                             if (MmsApp.mGnMultiSimMessage && mInsertedSimCount == 2) {
                        // Aurora xuyong 2014-06-07 modified for bug #5449 end
                        // Aurora xuyong 2014-06-06 added for bug #5367 end
                                 if (mCurrentContact.existsInDatabase()) {
                                     int slotIdEx = getLastCallSlotId(ComposeMessageActivity.this, phoneNumber);
                                     switch(slotIdEx) {
                                         case -1:
                                             setAuroraMenuItems(R.menu.aurora_msg_content_phone_exsit_menu_multisim);
                                             break;
                                         case 0:
                                             setAuroraMenuItems(R.menu.aurora_msg_content_phone_exsit_menu_multisim1f);
                                             break;
                                         case 1:
                                             setAuroraMenuItems(R.menu.aurora_msg_content_phone_exsit_menu_multisim2f);
                                             break;
                                     }
                                 } else if (!mCurrentContact.existsInDatabase()) {
                                     int slotIdNew = getLastCallSlotId(ComposeMessageActivity.this, phoneNumber);
                                     switch(slotIdNew) {
                                         case -1:
                                             setAuroraMenuItems(R.menu.aurora_msg_content_phone_menu_multisim);
                                             break;
                                         case 0:
                                             setAuroraMenuItems(R.menu.aurora_msg_content_phone_menu_multisim1f);
                                             break;
                                         case 1:
                                             setAuroraMenuItems(R.menu.aurora_msg_content_phone_menu_multisim2f);
                                             break;
                                     }
                                 }                             
                               } else {
                                   if (mCurrentContact.existsInDatabase()) {
                                      setAuroraMenuItems(R.menu.aurora_msg_content_phone_exsit_menu);
                                   } else {
                                      setAuroraMenuItems(R.menu.aurora_msg_content_phone_menu);
                                   }
                               }
                        // Aurora xuyong 2014-05-30 modified for multisim feature end
                        // Aurora xuyong 2014-04-21 added for bug #4438 end
                             break;
                        case URI_HTTP:
                             setAuroraMenuItems(R.menu.aurora_msg_content_http_menu);
                             break;
                        case URI_MAIL:
                             setAuroraMenuItems(R.menu.aurora_msg_content_mail_menu);
                             break;
                        case URI_RTSP:
                             setAuroraMenuItems(R.menu.aurora_msg_content_rtsp_menu);
                             break;
                        default:
                             break;
                    }
                    // Aurora xuyong 2013-11-20 modify for monkey-running checked exception start
                    try {
                        showAuroraMenu();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    // Aurora xuyong 2013-11-20 modify for monkey-running checked exception end
                    hideInputMethod();
                }
                return;
            case MessageListItem.ITEM_CLICK: {
                //Aurora xuyong 2014-08-16 deleted for aurora's new feature start
                //if (mFirstLongClick) {
                //    return;
                //}
                //Aurora xuyong 2014-08-16 deleted for aurora's new feature end
                //add for multi-delete
                // Aurora xuyong 2013-12-11 modified for aurora's new feature start
                GroupItemInfoModel sgif = ((MessageItem) msg.obj).mGIIF;
                ArrayList<Long> sglist = new ArrayList<Long>();
                // Aurora xuyong 2013-12-13 modified for aurora's new feature start
                if (sgif != null) {
                    ArrayList<Long> sgifi = sgif.getIds();
                    sglist = sgifi;
                // Aurora xuyong 2013-12-13 modified for aurora's new feature end
                } else {
                    sglist.add(new Long(msg.arg1));
                }
                // Aurora xuyong 2014-02-11 added for bug #1923 start
                mClickPos = msg.arg2;
                // Aurora xuyong 2014-02-11 added for bug #1923 end
                mMsgListAdapter.changeSelectedState(sglist);
                // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 start
                mMsgListAdapter.changeSelectedPosition(mClickPos);
                // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 end
                // Aurora xuyong 2013-12-11 modified for aurora's new feature end
                //gionee gaoj 2012-9-20 added for CR00699291 start
                mMsgListAdapter.changeSelectedStaredState((MessageItem) msg.obj);
                mMsgItem = (MessageItem) msg.obj;
                // gionee zhouyj 2012-07-31 add for CR00662484 start 
                // Aurora xuyong 2014-01-07 modified for aurora's new feature start
                // Aurora xuyong 2014-08-22 deleted for bug #7739 & #7853 start
                //updateSelectMap(mMsgListAdapter.getInCursorPosition(mClickPos));
                // Aurora xuyong 2014-08-22 deleted for bug #7739 & #7853 end
                // Aurora xuyong 2014-01-07 modified for aurora's new feature end
                // gionee zhouyj 2012-07-31 add for CR00662484 end 

                /*mDeleteImageButton.setEnabled(mMsgListAdapter.getSelectedNumber() >= 1 ? true : false);

                mDeleteImageButton.setImageTextEnabled(mMsgListAdapter.getSelectedNumber() >= 1 ? true : false);
                
                if (MmsApp.mLightTheme) {
                    mDeleteImageButton.setImageResource(mMsgListAdapter.getSelectedNumber() >= 1 ? R.drawable.gn_com_delete_bg : R.drawable.gn_com_delete_unuse_bg);
                } else {
                    mDeleteImageButton.setImageResource(mMsgListAdapter.getSelectedNumber() >= 1 ? R.drawable.gn_com_delete_dark_bg : R.drawable.gn_com_delete_unuse_dark_bg);
                }*/

                //setDeleteMenuState(mMsgListAdapter.getSelectedNumber() >= 1);
                // Aurora xuyong 2013-09-13 modified for aurora's new feature start
                //setMulImageButton(mMsgListAdapter.getSelectedNumber() >= 1);
                // Aurora xuyong 2013-09-13 modified for aurora's new feature end
                //onPrepareOptionsMenu(mMenu);
                
                //gionee gaoj 2012-5-24 added for CR00588933 end

                updateSelectionMenu();
                // Aurora xuyong 2013-11-29 modified for bug #978 start
                // Aurora xuyong 2013-12-11 modified for aurora's new feature start
                if (mMsgListAdapter.getSelectedNumber() > 0 && mMsgListAdapter.getSelectedNumber() >= mMsgListAdapter.getChildCount()) {
                // Aurora xuyong 2013-12-11 modified for aurora's new feature end
                // Aurora xuyong 2013-11-29 modified for bug #978 end
                    isSelectedAll = true;
                } else {
                    isSelectedAll = false;
                }
                //gionee gaoj 2012-9-20 added for CR00699291 end
                // gionee zhouyj 2012-08-16 add for CR00678213 start 
                // Aurora xuyong 2013-10-21 added for bug #172 start
                refreshBottomMenu();
                // Aurora xuyong 2013-10-21 added for bug #172 end
                return ;
                // gionee zhouyj 2012-08-16 add for CR00678213 end 
            }
            //Gionee <zhouyj> <2013-05-16> add for CR00810588 begin
            case MessageListItem.MSG_LIST_STOP_SERVICE:
                if (MmsApp.mGnVoiceReadMsgSupport) {
                    stopVoiceHelperService();
                    setStopServiceBtnGone();
                }
                return ;
            //Gionee <zhouyj> <2013-05-16> add for CR00810588 end
// a1
            //gionee gaoj 2012-8-14 added for CR00623375 CR00678407 start
            /*case MessageListItem.REGULAR_RESET_TIME:
                mRegularlyMsgItem = (MessageItem)msg.obj;

                // gionee lanwzh modify for CR00680806 20120824 begin
                if (MmsApp.mLightTheme) {
                    mDateTimeDialog = new DateTimeDialog(ComposeMessageActivity.this, /*AuroraAlertDialog.THEME_AMIGO_FULLSCREEN,*/ //mDateTimeSetListener, null);
                //} else {
                //    mDateTimeDialog = new DateTimeDialog(ComposeMessageActivity.this, /*AuroraAlertDialog.THEME_AMIGO_FULLSCREEN,*/ mDateTimeSetListener, null);
                //}
                // gionee lanwzh modify for CR00680806 20120824 end
                
                /*Calendar calendar = Calendar.getInstance();
                calendar.setTimeInMillis(mRegularlyMsgItem.mSmsDate);
                mDateTimeDialog.updateDate(calendar);
                if (!mDateTimeDialog.isShowing()) {
                    mDateTimeDialog.show();
                    //gionee gaoj 2012-8-21 added for CR00678520 start
                    mIsReSetTime = true;
                    //gionee gaoj 2012-8-21 added for CR00678520 end
                }*/
            //gionee gaoj 2012-8-14 added for CR00623375 CR00678407 end
            default:
                Log.w(TAG, "Unknown message: " + msg.what);
                return;
        }

        MessageItem msgItem = getMessageItem(type, (Long) msg.obj, false);
        if (msgItem != null) {
            //gionee gaoj 2012-4-10 added for CR00555790 start
            Log.e(TAG, "Resend msg simId: " + msgItem.mSimId);
            if (msgItem.mSimId <= 0) {
                reSendSimSelection(msgItem);
            } else {
                reSendMsg(msgItem);
            }
            //gionee gaoj 2012-4-10 added for CR00555790 end
        }
    }
    // Aurora xuyong 2013-12-27 deleted for aurora]s new feature start
    private class ResendMessageTask extends AsyncTask<HashMap<Long, Boolean>, Void, Void> {
        
        @Override
        protected Void doInBackground(HashMap<Long, Boolean>... map) {
            Iterator iter = map[0].entrySet().iterator();
            while (iter.hasNext()) {
                Map.Entry<Long, Boolean> entry = (Entry<Long, Boolean>) iter.next();
                if (entry.getValue()) {
                    final MessageItem msgItem = getMessageItem("sms", entry.getKey(), false);
                    if (msgItem != null) {
                        if (msgItem.mSimId <= 0) {
                               reSendSimSelection(msgItem);
                        } else {
                            reSendMsg(msgItem);
                        }
                    }
                }
            }
            // we should clear the selectMap here!
            map[0].clear();
            return null;
        }
        
    }
    // Aurora xuyong 2013-12-27 deleted for aurora]s new feature end

    private void gnConfirmSendMessageIfNeeded() {
        if (!isRecipientsEditorVisible()) {
//m0
//            sendMessage(true);
            checkConditionsAndSendMessage(true);
//m1
            return;
        }

        boolean isMms = mWorkingMessage.requiresMms();
        if (mContactContainer.hasInvalidRecipient(isMms)) {
            if (mContactContainer.hasValidRecipient(isMms)) {
                // Aurora xuyong 2014-08-28 modified for bug #7800 start
                String title = getString(R.string.has_invalid_recipient);
                // Aurora xuyong 2014-08-28 modified for bug #7800 end
                new AuroraAlertDialog.Builder(this)
//                    .setIcon(android.R.drawable.ic_dialog_alert)
                    .setTitle(title)
                    // Aurora xuyong 2014-08-28 modified for bug #7800 start
                    .setMessage(getResourcesString(R.string.invalid_recipient_message,
                            mContactContainer.formatInvalidNumbers(isMms)))
                    // Aurora xuyong 2014-08-28 modified for bug #7800 end
                    .setPositiveButton(R.string.try_to_send,
                            new SendIgnoreInvalidRecipientListener())
                    .setNegativeButton(R.string.no, new CancelSendingListener())
                    .show();
            } else {
                new AuroraAlertDialog.Builder(this)
//                    .setIcon(android.R.drawable.ic_dialog_alert)
                    .setTitle(R.string.cannot_send_message)
                    .setMessage(R.string.cannot_send_message_reason)
                    .setPositiveButton(R.string.yes, new CancelSendingListener())
                    .show();
            }
        } else {
            checkConditionsAndSendMessage(true);
        }
    }

    /*private boolean gnOnPrepareOptionsMenu(Menu menu) {
//        if (ViewConfiguration.get(this).hasPermanentMenuKey()) {
            menu.clear();

            if (!mMsgListAdapter.mIsDeleteMode) {
                //gionee gaoj added for CR00725602 20121201 start
                if (!isRecipientsEditorVisible() && mMsgListView.getCount() != 0) {
                    //gionee <gaoj> <2013-06-09> add for CR00824605 begin
                    if (mConversation.getRecipients().size() == 1) {
                        Contact contact = mConversation.getRecipients().get(0);
                        if (!contact.existsInDatabase()) {
                            menu.add(0, MENU_NEW_CONTACT, 0, R.string.gn_new_contact).setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);
                            menu.add(0, MENU_ADD_CONTACT, 0, R.string.gn_existing_contact).setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);
                        }
                    }
                    //gionee <gaoj> <2013-06-09> add for CR00824605 end
                    menu.add(0, MENU_BATCH_OPERATION, 0, R.string.gn_action_batch_operation).setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);
                }
                //gionee gaoj added for CR00725602 20121201 end
                if (MmsApp.isOpenApi() && !isRecipientsEditorVisible() && mConversation.getRecipients().size() == 1) {
                    menu.add(0, MENU_BLACKLIST, 0, R.string.gn_menu_blacklist).setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);
                }
                if (MmsApp.mEncryption && !MmsApp.mGnMsgTopOption) {
                    if (mMsgListAdapter.getCount() > 0) {
                        Cursor cursor = mMsgListAdapter.getCursor();
                        if ((null != cursor) && (cursor.getCount() > 0)) {
                            // gionee zhouyj 2012-10-03 add for CR00704461 start 
                            if(Conversation.getFirstEncryption()) {
                                mConversation.setHasEncryption(false);
                            }
                            // gionee zhouyj 2012-10-03 add for CR00704461 end 
                            menu.add(0, MENU_ENCRYPTION, 0, 
                                    mConversation.getEncryption()? R.string.menu_decryption:R.string.menu_encryption)
                            .setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);
                        }
                    }
                }
    
                menu.add(0, MENU_PREFERENCES, 0, R.string.menu_preferences).setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);
                // gionee zhouyj 2013-03-25 add for CR00789172 start
                if (MmsApp.mIsSafeModeSupport) {
                    MenuItem multiItem = menu.findItem(MENU_BATCH_OPERATION);
                    if (multiItem != null) {
                        multiItem.setEnabled(false);
                    }
                }
                // gionee zhouyj 2013-03-25 add for CR00789172 end
            }
//        }
        super.onPrepareOptionsMenu(menu);
        return true;
    }*/

    private void gnHandleAddAttachmentError(final int error, final int mediaTypeStringId) {
        if (error == WorkingMessage.OK) {
            return;
        }

        Resources res = getResources();
        String mediaType = res.getString(mediaTypeStringId);
        final String title, message;
        Runnable threadBody = null;
        switch (error) {
            case WorkingMessage.UNKNOWN_ERROR:
                message = res.getString(R.string.failed_to_add_media, mediaType);
                threadBody = new Runnable() {
                    @Override
                    public void run() {
                        Toast.makeText(ComposeMessageActivity.this, message, Toast.LENGTH_SHORT)
                                .show();
                    }
                };
                runOnUiThread(threadBody);
                return;
            case WorkingMessage.UNSUPPORTED_TYPE:
            case WorkingMessage.RESTRICTED_TYPE:
                title = res.getString(R.string.unsupported_media_format, mediaType);
                message = res.getString(R.string.select_different_media, mediaType);
                break;
            case WorkingMessage.MESSAGE_SIZE_EXCEEDED:
                title = res.getString(R.string.exceed_message_size_limitation, mediaType);
                message = res.getString(R.string.failed_to_add_media, mediaType);
                break;
            case WorkingMessage.IMAGE_TOO_LARGE:
                title = res.getString(R.string.failed_to_resize_image);
                message = res.getString(R.string.resize_image_error_information);
                break;
            case WorkingMessage.RESTRICTED_RESOLUTION:
                title = res.getString(R.string.select_different_media_type);
                message = res.getString(R.string.image_resolution_too_large);
                break;
            default:
                throw new IllegalArgumentException("unknown error " + error);
        }
        // Aurora xuyong 2015-10-12 modified for bug #16730 start
        if (!mDialogIsShowing && (mPreTitle != title && mPreMessage != message)) {
	        threadBody = new Runnable() {
	            @Override
	            public void run() {
	            	mPreTitle = title;
	            	mPreMessage = message;
	                MessageUtils.showErrorDialog(ComposeMessageActivity.this, title, message);
	            }
	        };
	
	        if (threadBody != null) {
	            if (error == WorkingMessage.MESSAGE_SIZE_EXCEEDED) {
	                mShouldMultiAttachThreadStop = true;
	            }
	            runOnUiThread(threadBody);
	        }
         }
         // Aurora xuyong 2015-10-12 modified for bug #16730 end
    }
    // Aurora xuyong 2015-10-12 added for bug #16730 start
    private boolean mDialogIsShowing = false;
    private String mPreTitle, mPreMessage;
    
    public void setDialogShow(boolean show) {
    	mDialogIsShowing = show;
    }
    // Aurora xuyong 2015-10-12 added for bug #16730 end
    // Gionee lanwzh 20110902 add for CR00351980 begin
    public String getContentTypeFileUri(Uri uri) {
        String path = uri.getPath();
        String src = path.substring(path.lastIndexOf('/') + 1);
        Log.i(TAG, "mediaModel src: " + src);
        if(src.startsWith(".") && src.length() > 1) {
            src = src.substring(1);
        }

        String contentType = null;

        // Some MMSCs appear to have problems with filenames
        // containing a space.  So just replace them with
        // underscores in the name, which is typically not
        // visible to the user anyway.
        src = src.replace(' ', '_');
        //mUri = uri;

        MimeTypeMap mimeTypeMap = MimeTypeMap.getSingleton();
        String extension = MimeTypeMap.getFileExtensionFromUrl(path).toLowerCase();
        if (TextUtils.isEmpty(extension)) {
            // getMimeTypeFromExtension() doesn't handle spaces in filenames nor can it handle
            // urlEncoded strings. Let's try one last time at finding the extension.
            int dotPos = path.lastIndexOf('.');
            if (0 <= dotPos) {
                extension = path.substring(dotPos + 1);
                extension = extension.toLowerCase();
            }
        }
        Log.i(TAG, "AudioModel extension: " + extension);
        contentType = mimeTypeMap.getMimeTypeFromExtension(extension);

        // the ALPS.GB.FDD2.MP.V2 support it, but the gingerbread do not support it.
        // so i add it here.
        if (contentType == null) {
            if (extension.equals("amr"))  {
                contentType = "audio/amr";
            }  if (extension.equals("acc"))  {
                contentType = "audio/acc";
            }  if (extension.equals("imy"))  {
                contentType = "audio/imelody";
            }
        }

        Log.i(TAG, "mediaModel mContentType: " + contentType);

        return contentType;
    }
    // Gionee lanwzh 20110902 add for CR00351980 end

    //gionee gaoj 2012-12-18 added for CR00745515 start
    // Aurora xuyong 2014-12-30 deleted for bug #10809 start
    /*private boolean isSelectTwoSim = false;
    private void setCheckTwoSim() {
        if (mSimCount == 2) {
            // Aurora xuyong 2013-11-15 modified for S4 adapt start
            if (Settings.System.getLong(getContentResolver(), GnSettings.System.SMS_SIM_SETTING, GnSettings.System.DEFAULT_SIM_NOT_SET)
                    == GnSettings.System.DEFAULT_SIM_SETTING_ALWAYS_ASK) {
            // Aurora xuyong 2013-11-15 modified for S4 adapt end
                isSelectTwoSim = true;
            } else {
                isSelectTwoSim = false;
            }
        }
    }*/
    // Aurora xuyong 2014-12-30 deleted for bug #10809 end
    //gionee gaoj 2012-12-18 added for CR00745515 end
    // Aurora xuyong 2015-09-14 added for aurora's new feature start
    // Aurora xuyong 2015-09-17 modified for aurora's new feature start
    private FrameLayout mAddAttachmentLayout;
    // Aurora xuyong 2015-09-17 modified for aurora's new feature end
    // Aurora xuyong 2015-10-08 deleted for aurora's new feature start
    //private TextView mPopsBackground;
    //private LinearLayout mAddContentLayout;
    // Aurora xuyong 2015-10-08 deleted for aurora's new feature end
    private AuroraHorizontalListView mImageList;
    // Aurora xuyong 2015-09-17 modified for aurora's new feature start
    private ListView mMenus;
    // Aurora xuyong 2015-09-17 modified for aurora's new feature end
    WindowManager.LayoutParams wmParams;
    WindowManager mAddWindowManager;
    private boolean mPopsIsShowing = false;
    // Aurora xuyong 2015-10-15 added for aurora's new feature start
    private void initAddAttachLayout() {
    	LayoutInflater inflater = LayoutInflater.from(this);
    	mAddAttachmentLayout = (FrameLayout) inflater.inflate(R.layout.aurora_add_attachments_layout, null);
    	mImageList = (AuroraHorizontalListView)mAddAttachmentLayout.findViewById(R.id.aurora_images_lv);
    	mMenus = (ListView)mAddAttachmentLayout.findViewById(R.id.aurora_add_menus);
    }
    // Aurora xuyong 2015-10-15 added for aurora's new feature end
    // Aurora xuyong 2015-10-15 modified for aurora's new feature start
    private void rebuildAddAttachments() {
        // Aurora xuyong 2015-09-17 modified for aurora's new feature start
    	SimpleAdapter adapter = new SimpleAdapter(this, getData(),
                R.layout.aurora_add_attach_item, new String[] { AURORA_ADD_ITEM_TITLE },
                new int[] { R.id.aurora_add_title });
    	mMenus.setAdapter(adapter);
    	mMenus.setOnItemClickListener(new AdapterView.OnItemClickListener() {
    		
    		@Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
    			TextView child = (TextView)view.findViewById(R.id.aurora_add_title);
    			String childText = child.getText().toString();
    		    if (position == GALLARY_POS) {
    		    	// click the first item, go to file manager
    		    	if (null != childText) {
                        // Aurora xuyong 2015-10-08 modified for aurora's new feature start
	    		    	if (childText.equals(ComposeMessageActivity.this.getResourcesString(R.string.aurora_capture_pic))) {
	    		    		fetchFromCamera(view);
                        // Aurora xuyong 2015-10-08 modified for aurora's new feature end
	    		    	} else {
	    		    		createdImageSlides();
	    		    	}
    		    	}
    		    } else if (position == CAMERA_POS) {
    		    	// click the second item, go to camera
                    // Aurora xuyong 2015-10-08 modified for aurora's new feature start
    		    	fetchFromGallery(view);
                    // Aurora xuyong 2015-10-08 modified for aurora's new feature end
    		    }
    		}
    		
		});
        // Aurora xuyong 2015-09-17 modified for aurora's new feature end
    }
    // Aurora xuyong 2015-10-15 modified for aurora's new feature end
    // Aurora xuyong 2015-09-17 modified for aurora's new feature start
    private final String AURORA_ADD_ITEM_TITLE = "item_title";
    // default item seq order
    private final int GALLARY_POS = 0;
    private final int CAMERA_POS = 1;
    
    private List<Map<String, Object>> getData() {
        List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
        Map<String, Object> map = new HashMap<String, Object>();
        if (mSelectedImageCount == 0) {
            // Aurora xuyong 2015-10-08 modified for aurora's new feature start
            map.put(AURORA_ADD_ITEM_TITLE, this.getResourcesString(R.string.aurora_capture_pic));
            // Aurora xuyong 2015-10-08 modified for aurora's new feature end
        } else {
        	map.put(AURORA_ADD_ITEM_TITLE, this.getResources().getString(R.string.aurora_select_image_count, mSelectedImageCount));
        }
        list.add(map);

        map = new HashMap<String, Object>();
        // Aurora xuyong 2015-10-08 modified for aurora's new feature start
        map.put(AURORA_ADD_ITEM_TITLE, this.getResourcesString(R.string.aurora_local_image));
        // Aurora xuyong 2015-10-08 modified for aurora's new feature end
        list.add(map);

        return list;
    }
    // Aurora xuyong 2015-09-17 modified for aurora's new feature end
    // Aurora xuyong 2015-10-08 added for aurora's new feature start
    private GroupPop addAttachGroup = null;
    // Aurora xuyong 2015-10-08 added for aurora's new feature end
    // Aurora xuyong 2010-10-09 added for aurora's new feature start
    private final int LOADER_INDEX = 1;
    // Aurora xuyong 2010-10-09 added for aurora's new feature end
    // Aurora xuyong 2015-10-09 added for aurora's new feature start
    private final class QueryAttachImagesRunnable implements Runnable {
    	
    	@Override
    	public void run() {
                // Aurora xuyong 2015-10-20 modified for aurora's new feature start
                String internalPath = gionee.os.storage.GnStorageManager.getInstance(ComposeMessageActivity.this).getInternalStoragePath();
                ATTACH_IMAGES_SELECTION = "(_size > 20480 or _data LIKE '"+ internalPath +"/QQ_Screenshot%')" +
    		        " and _data NOT LIKE '%/aurora/change/lockscreen%'" +
    		        " and _data NOT LIKE '" + internalPath + "/iuni/wallpaper/save%'" +
    		        " and _data NOT LIKE '%.pcx'" +
    		        " and _data NOT LIKE '%.tif'" +
    		        " and _data NOT LIKE '" + internalPath + "/Android/%'" +
    		        " and _data NOT LIKE ('%/.%')" +
    		        " and ((_data like '" + internalPath + "%'))";
    		    mAttachQueryHandler.startQuery(
           		    LOADER_INDEX, null, MediaStore.Images.Media.EXTERNAL_CONTENT_URI,
           		    ATTACH_IMAGES_PROJECTION, ATTACH_IMAGES_SELECTION, null, " datetaken DESC LIMIT 20");
                // Aurora xuyong 2015-10-20 modified for aurora's new feature end
    	}
    	
    }
    
    private QueryAttachImagesRunnable mQueryAttachImageRunnable = new QueryAttachImagesRunnable();
    
    private void startAttachImagesQuery() {
    	if (null != mAttachQueryHandler) {
    		mAttachQueryHandler.removeCallbacks(mQueryAttachImageRunnable);
    		mAttachQueryHandler.post(mQueryAttachImageRunnable);
    	}
    }
    // Aurora xuyong 2015-10-09 added for aurora's new feature end
    private void showAddAttachmentView() {
        // Aurora xuyong 2015-09-17 modified for bug #16604 start
    	if (mPopsIsShowing) {
    		return;
    	}
        // Aurora xuyong 2015-10-09 modified for aurora's new feature start
    	startAttachImagesQuery();
        // Aurora xuyong 2015-10-09 modified for aurora's new feature end
        // Aurora xuyong 2010-10-09 added for aurora's new feature start
        // Aurora xuyong 2015-10-09 deleted for aurora's new feature start
    	//mAttachImagesManager.restartLoader(LOADER_INDEX, null, this);
        // Aurora xuyong 2015-10-09 deleted for aurora's new feature end
        // Aurora xuyong 2010-10-09 added for aurora's new feature end
        // Aurora xuyong 2015-10-08 added for aurora's new feature start
    	hideInputMethod();
        // Aurora xuyong 2015-10-08 added for aurora's new feature end
        // Aurora xuyong 2015-09-17 modified for bug #16604 end
    	mPopsIsShowing = true;
    	mSelectedImageCount = 0;
    	rebuildAddAttachments();
        // Aurora xuyong 2015-10-08 deleted for aurora's new feature start
    	/*wmParams = new WindowManager.LayoutParams();
    	mAddWindowManager = (WindowManager)getSystemService(Context.WINDOW_SERVICE);
        wmParams.type = WindowManager.LayoutParams.TYPE_SYSTEM_ERROR;
        wmParams.flags = WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL
                | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE
                | WindowManager.LayoutParams.FLAG_FULLSCREEN
                | WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN;
        wmParams.format = PixelFormat.TRANSLUCENT;
        
        wmParams.gravity = Gravity.TOP;
        
        wmParams.x = 0;
        wmParams.y = 0;
        
        wmParams.width = WindowManager.LayoutParams.MATCH_PARENT;
        wmParams.height = WindowManager.LayoutParams.MATCH_PARENT;
        
        mAddWindowManager.addView(mAddAttachmentLayout, wmParams);*/
        // Aurora xuyong 2015-10-08 deleted for aurora's new feature end
        // Aurora xuyong 2015-10-08 added for aurora's new feature start
    	if (puw != null) {
            dismissGroupNewMenu(puw);
        }
    	if(addAttachGroup == null){
    		addAttachGroup = new GroupPop(mAddAttachmentLayout);
        } else {
        	addAttachGroup.setContentView(mAddAttachmentLayout);
        }
    	mAddAttachmentLayout.setFocusable(true);
    	mAddAttachmentLayout.setFocusableInTouchMode(true);
    	mAddAttachmentLayout.setFocusableInTouchMode(true);
    	mAddAttachmentLayout.setOnClickListener(new View.OnClickListener() {
            
            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub
    			AuroraHotizontalListItem.clearSelectedItems();
                dismissGroupNewMenu(addAttachGroup);
                mPopsIsShowing = false;
            }
        });
    	mAddAttachmentLayout.setOnKeyListener(new View.OnKeyListener() {
            
            @Override
            public boolean onKey(View v, int keyCode, KeyEvent event) {
                // TODO Auto-generated method stub
                if (event.getAction() == KeyEvent.ACTION_DOWN) {
                    switch(keyCode) {
                        case KeyEvent.KEYCODE_BACK:
        	    			AuroraHotizontalListItem.clearSelectedItems();
                            dismissGroupNewMenu(addAttachGroup);
                            mPopsIsShowing = false;
                            break;
                        default:
                            break;
                    }
                }
                return false;
            }
        });
    	addAttachGroup.setWindowLayoutMode(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
    	addAttachGroup.setAnimationStyle(R.style.ActionBottomBarPopupAnimation);
    	addAttachGroup.setFocusable(true);
    	addAttachGroup.setOutsideTouchable(true);
    	if (addAttachGroup != null && !addAttachGroup.isShowing()) {
    		startMenuShowThread();
			addAttachGroup.showAtLocation(mDecorView, Gravity.BOTTOM, 0, 0);
    	}
        // Aurora xuyong 2015-10-08 added for aurora's new feature end
    }
    
    private void createdImageSlides() {
        // Aurora xuyong 2015-10-08 added for aurora's new feature start
    	dismissPops();
        final String[] paths = AuroraHotizontalListItem.getSelectedImagesPath().toString().split(AuroraHotizontalListItem.PATH_SET_SEPERATOR);
        if (paths != null) {
            // Aurora xuyong 2010-10-09 added for aurora's new feature start
            // Aurora xuyong 2015-10-12 modified for bug #16732 start
        	if (mWorkingMessage.hasMediaAttachments()) {
        		mWorkingMessage.setNeedProcChangeToast(false);
        		mWorkingMessage.removeAttachment(true);
        	}
            // Aurora xuyong 2015-10-12 modified for bug #16732 end
            // Aurora xuyong 2010-10-09 added for aurora's new feature end
        	if (paths.length == 1) {
        		addImageAsync(Uri.parse(paths[0]), null, false);
        	} else {
        		runAsyncWithDialog(new Runnable() {
                    public void run() {
                        for (int i = 0; i < paths.length; i++) {
                            addFileAttachment("image/*", Uri.parse(paths[i]), true);
                        }
                        SlideshowModel mSlideShowModel = mWorkingMessage.getSlideshow();
                        if (mSlideShowModel != null && mSlideShowModel.size() > 0) {
                            mWorkingMessage.saveAsMms(false);
                        }
                    }
                }, R.string.adding_attachments_title);
        	}
        }
        // Aurora xuyong 2015-10-08 added for aurora's new feature end
    }
    
    private void fetchFromGallery(View v) {
        // Aurora xuyong 2015-10-08 deleted for aurora's new feature start
    	//mPopsIsShowing = false;
        // Aurora xuyong 2015-10-08 deleted for aurora's new feature end
    	AuroraHotizontalListItem.clearSelectedItems();
    	hideInputMethod();
        MessageUtils.selectImage(ComposeMessageActivity.this, REQUEST_CODE_ATTACH_IMAGE);
    }
    // Aurora xuyong 2015-10-08 added for aurora's new feature start
    public void dismissPops() {
    	dismissPops(null);
    }
    // Aurora xuyong 2015-10-08 added for aurora's new feature end
    public void dismissPops(View v) {
    	if (mPopsIsShowing) {
            // Aurora xuyong 2015-10-08 deleted for aurora's new feature start
    		/*if (mAddWindowManager != null && mAddAttachmentLayout != null) {
    			if (null != mPopsBackground) {
    				mPopsBackground.startAnimation(AnimationUtils.loadAnimation(this, com.aurora.R.anim.aurora_menu_cover_exit));
    				mPopsBackground.setVisibility(View.GONE);
    			}
    			if (null != mAddContentLayout) {
    				mAddContentLayout.startAnimation(AnimationUtils.loadAnimation(this, com.aurora.R.anim.aurora_menu_exit));
    				mAddContentLayout.setVisibility(View.GONE);
    			}
    			mRemoveHandler.sendEmptyMessageDelayed(REMOVE_ADD_MENUS, 100);
            }*/
            // Aurora xuyong 2015-10-08 deleted for aurora's new feature end
            // Aurora xuyong 2015-10-08 added for aurora's new feature start
    		mRemoveHandler.sendEmptyMessageDelayed(REMOVE_ADD_MENUS, 100);
            // Aurora xuyong 2015-10-08 added for aurora's new feature end
    	}
    }
    
    private final int REMOVE_ADD_MENUS = 1000;
    Handler mRemoveHandler = new Handler() {
    	
    	@Override
        public void handleMessage(Message msg) {
    		switch (msg.what) {
	    		case REMOVE_ADD_MENUS:
	    			mPopsIsShowing = false;
	    			AuroraHotizontalListItem.clearSelectedItems();
                    // Aurora xuyong 2015-10-08 deleted for aurora's new feature start
	    			/*if (mAddWindowManager != null && mAddAttachmentLayout != null) {
	    				try {
	    					mAddWindowManager.removeView(mAddAttachmentLayout);
	    				} catch (Exception e) {
	    					e.printStackTrace();
	    				}
	    				mAddAttachmentLayout = null;
	    			}*/
                    // Aurora xuyong 2015-10-08 deleted for aurora's new feature end
                    // Aurora xuyong 2015-10-08 added for aurora's new feature start
	    			dismissGroupNewMenu(addAttachGroup);
                    // Aurora xuyong 2015-10-08 added for aurora's new feature end
		            break;
    		}
    	}
    	
    };
    
    private void fetchFromCamera(View v) {
        // Aurora xuyong 2015-10-08 deleted for aurora's new feature start
    	//mPopsIsShowing = false;
        // Aurora xuyong 2015-10-08 deleted for aurora's new feature end
    	AuroraHotizontalListItem.clearSelectedItems();
    	hideInputMethod();
        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        File localfile = new File(Mms.ScrapSpace.SCRAP_FILE_PATH);
        if (!localfile.exists()) {
            localfile.getParentFile().mkdirs();
        }
        Uri localUri = Uri.fromFile(localfile);
        intent.putExtra(MediaStore.EXTRA_OUTPUT, localUri);
        startActivityForResult(intent, REQUEST_CODE_TAKE_PICTURE);
    }
    // Aurora xuyong 2015-09-14 added for aurora's new feature end
    private void gnOnClick(View v) {
        /*if (v == mSelectPanel) {
            boolean newStatus = !mSelectedAll.isChecked();
            mSelectedAll.setChecked(newStatus);
            markCheckedState(newStatus);
        }*/

        if (v == mAddButton) {
            // Aurora xuyong 2015-10-12 added for bug #16732 start
        	if (null != mWorkingMessage) {
        		mWorkingMessage.setNeedProcChangeToast(true);
        	}
            // Aurora xuyong 2015-10-12 added for bug #16732 end
          //Gionee <guoyx> <2013-07-25> delete for CR00780083 begin
//            mcontactView = null;
          //Gionee <guoyx> <2013-07-25> delete for CR00780083 end
            
//            if (mWorkingMessage.hasSlideshow() && isRecipientsEditorVisible()) {
//                mContactContainer.resetMode();
//                mContactContainer.requestFocus();
//            } else {
//                mTextEditor.requestFocus();
//            }
            // Aurora xuyong 2014-04-30 deleted for aurora's new feature start
            /*if (mTextEditor.getVisibility() == View.VISIBLE) {
               // Aurora xuyong 2013-09-24 added for aurora;s new feature start
               mTextEditor.requestFocus();
               // Aurora xuyong 2013-09-24 added for aurora;s new feature end
            } else if (mSubjectTextEditor != null && mSubjectTextEditor.getVisibility() == View.VISIBLE) {
                mSubjectTextEditor.requestFocus();
            } else if (isRecipientsEditorVisible()){
                mContactContainer.resetMode();
                mContactContainer.requestFocus();
            }*/
            // Aurora xuyong 2014-04-30 deleted for aurora's new feature end
            // Aurora xuyong 2015-09-14 deleted for aurora's new feature start
            /*if ((mAttachmentSlideView != null) && (mAttachmentSlideView.getVisibility() == View.VISIBLE)) {
                // Aurora xuyong 2014-03-06 added for aurora's new feature start
                if (mAddButton != null) {
                    mAddButton.setImageResource(R.drawable.aurora_insert_attch_selector);
                }
                // Aurora xuyong 2014-03-06 added for aurora's new feature end
                mAttachmentSlideView.setVisibility(View.GONE);
            // Aurora xuyong 2014-03-07 modified for bug #2855 start
                // Aurora xuyong 2014-06-14 modified for bug #4395 start
                Message msg = Message.obtain(mHandler, SHOW_INPUTMETHOD_DELAY);
                msg.obj = mWindow.getCurrentFocus();
                msg.sendToTarget();
                // Aurora xuyong 2014-06-14 modified for bug #4395 end
            } else {
                InputMethodManager inputMethodManager =
                        (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
                if(mWindow !=null && mWindow.getCurrentFocus()!=null){
                        inputMethodManager.hideSoftInputFromWindow(mWindow.getCurrentFocus().getWindowToken(), 0);
                        Message msg = Message.obtain(mHandler, SHOW_ATTACHMENTS_DELAY);
                        msg.sendToTarget();
                }
                // showAttachmentSlideView();
            // Aurora xuyong 2014-03-07 modified for bug #2855 end
            }*/
            // Aurora xuyong 2015-09-14 deleted for aurora's new feature end
            // Aurora xuyong 2015-09-14 added for aurora's new feature start
        	showAddAttachmentView();
            // Aurora xuyong 2015-09-14 added for aurora's new feature emd
            // gionee lwzh modify for CR00774362 20130227 begin
            // Aurora xuyong 2015-09-14 deleted for aurora's new feature start
            //gnInitAttachmentLayout();
            // Aurora xuyong 2015-09-14 deleted for aurora's new feature end
            //gionee gaoj 2012-7-2 added for CR00632216 start
            // gionee zhouyj 2013-04-08 modify for CR00793169 start
            if (MmsApp.mGnMessageSupport) {
                // Aurora xuyong 2015-07-25 modified for bug #14157 start
            	mHandler.postDelayed(new Runnable() {
                    public void run() {
                        if (!ContactsCacheSingleton.getInstance().isInited()) {
                            ContactsCacheSingleton.getInstance().init(null, ComposeMessageActivity.this.getApplicationContext());
                            ContactsCacheSingleton.getInstance().starQueryNumbers();
                        }
                    }
                }, 100);
                // Aurora xuyong 2015-07-25 modified for bug #14157 end
            }
            // gionee zhouyj 2013-04-08 modify for CR00793169 end
            //gionee gaoj 2012-7-2 added for CR00632216 end
            // gionee lwzh modify for CR00774362 20130227 end
        }
        // Gionee lixiaohu 2012-08-28 modify for CR00681687 start
      // Aurora xuyong 2014-05-23 modified for multisim feature start
        // Aurora xuyong 2014-07-14 modified for aurora's new feature start
        // Aurora xuyong 2014-07-29 modified for aurora's new feature start
        if (v == mSendMsgButton || v == mSendMsgButton1 ||  v == mSendMsgButton2) {
          // Aurora xuyong 2014-09-01 added for bug #7751 start
            if (Utils.hasKitKat() && !Utils.isDefaultSmsApk(this)) {
                Utils.kitKatDefaultMsgCheck(this);
                return;
            }
            // Aurora xuyong 2015-03-04 added for bug #11831 start
            if (isRecipientsEditorVisible()) {
                // Aurora xuyong 2015-03-06 modified for bug #12051 start
                if (mContactContainer.isFocused()) {
                    mContactContainer.setAddingRecipient(true);
                }
                if (mContactContainer != null && mContactContainer.isAddingRecipient()) {
                // Aurora xuyong 2015-03-06 modified for bug #12051 end
                    mContactContainer.setOnClickView(v);
                    return;
                }
            }
            // Aurora xuyong 2015-03-04 added for bug #11831 end
          // Aurora xuyong 2014-09-01 added for bug #7751 end
          // Aurora xuyong 2014-08-15 added for bug #7705 start
            // after we send a message, this conversation has been created, so we need 
            // changed the exist flag to be true
         // Aurora xuyong 2014-09-09 added for 4.4 feature start
            Long threadId = mConversation.getThreadId();
         // Aurora xuyong 2014-09-09 added for 4.4 feature end
            if (operConvMap != null) {
          // Aurora xuyong 2014-09-09 modified for 4.4 feature start
                operConvMap.put(threadId, true);
            }
            if (operConvStack != null) {
                operConvStack.push(threadId);
          // Aurora xuyong 2014-09-09 modified for 4.4 feature end
            }
          // Aurora xuyong 2014-08-15 added for bug #7705 end
        // Aurora xuyong 2014-07-29 modified for aurora's new feature end
        // Aurora xuyong 2014-07-14 modified for aurora's new feature end
        // Gionee lixiaohu 2012-08-28 modify for CR00681687 end
            //gionee gaoj 2012-12-18 added for CR00745515 start
            // Aurora xuyong 2014-12-30 deleted for bug #10809 start
/*            if (isSelectTwoSim) {
                return;
            }*/
            // Aurora xuyong 2014-12-30 deleted for bug #10809 end
            //gionee gaoj 2012-12-18 added for CR00745515 end
            if (isPreparedForSending()) {
                updateSendButtonState(false);
                // Gionee lixiaohu 2012-08-28 added for CR00681687 start
                if (MmsApp.mGnMultiSimMessage) {
                    // Aurora xuyong 2014-07-14 modified for aurora's new feature start
                    // Aurora xuyong 2014-07-29 modified for aurora's new feature start
                    if (v == mSendMsgButton2) {
                    // Aurora xuyong 2014-07-29 modified for aurora's new feature end
                    // Aurora xuyong 2014-07-14 modified for aurora's new feature end
                    // Aurora xuyong 2014-08-05 modified for bug #7249 start
                        if (mSIMInfo2 == null) {
                            // Aurora xuyong 2015-05-26 modified for bug #13707 start
                        	try {
	                            mSIMInfo2 = SIMInfo.getSIMInfoBySlot(ComposeMessageActivity.this
	                                , GnPhone.GEMINI_SIM_2);
                        	} catch (IllegalArgumentException e) {
                                e.printStackTrace();
                            } catch (SQLiteException e) {
                        		e.printStackTrace();
                        	}
                            // Aurora xuyong 2015-05-26 modified for bug #13707 end
                            // Aurora xuyong 2014-11-17 added for bug #9803 start
                            MessageUtils.addSIMInfo(mSIMInfo2);
                            // Aurora xuyong 2014-11-17 added for bug #9803 end
                        }
                        if (Utils.hasLollipop()) {
                            //Aurora xuyong 2015-04-02 modified for android 5.1+ new feature start
                            mSelectedSimId = (int)mSubInfoList.get(1).getSubscriptionId();
                            //Aurora xuyong 2015-04-02 modified for android 5.1+ new feature end
                        } else {
                            mSelectedSimId = (int)mSIMInfo2.mSimId;
                        }
                    // Aurora xuyong 2014-08-05 modified for bug #7249 end
                    // Aurora xuyong 2014-07-14 modified for aurora's new feature start
                    // Aurora xuyong 2014-07-29 modified for aurora's new feature start
                    } else if (v == mSendMsgButton1) {
                    // Aurora xuyong 2014-07-29 modified for aurora's new feature end
                    // Aurora xuyong 2014-07-14 modified for aurora's new feature end
                     // Aurora xuyong 2014-08-05 modified for bug #7249 start
                        if (mSIMInfo1 == null) {
                            // Aurora xuyong 2015-05-26 modified for bug #13707 start
                        	try {
	                            mSIMInfo1 = SIMInfo.getSIMInfoBySlot(ComposeMessageActivity.this
	                                , GnPhone.GEMINI_SIM_1);
                        	} catch (IllegalArgumentException e) {
                                e.printStackTrace();
                            } catch (SQLiteException e) {
                        		e.printStackTrace();
                        	}
                            // Aurora xuyong 2015-05-26 modified for bug #13707 end
                            // Aurora xuyong 2014-11-17 added for bug #9803 start
                            MessageUtils.addSIMInfo(mSIMInfo1);
                            // Aurora xuyong 2014-11-17 added for bug #9803 end
                        }
                        if (Utils.hasLollipop()) {
                            //Aurora xuyong 2015-04-02 modified for android 5.1+ new feature start
                            mSelectedSimId = (int)mSubInfoList.get(0).getSubscriptionId();
                            //Aurora xuyong 2015-04-02 modified for android 5.1+ new feature end
                        } else {
                            mSelectedSimId = (int)mSIMInfo1.mSimId;
                        }
                    } else {
                        if (mSIMInfo1 == null) {
                            // Aurora xuyong 2015-05-26 modified for bug #13707 start
                        	try {
	                            mSIMInfo1 = SIMInfo.getSIMInfoBySlot(ComposeMessageActivity.this
	                                    , GnPhone.GEMINI_SIM_1);
                        	} catch (IllegalArgumentException e) {
                                e.printStackTrace();
                            } catch (SQLiteException e) {
                        		e.printStackTrace();
                        	}
                            // Aurora xuyong 2015-05-26 modified for bug #13707 end
                            // Aurora xuyong 2014-11-17 added for bug #9803 start
                            MessageUtils.addSIMInfo(mSIMInfo1);
                            // Aurora xuyong 2014-11-17 added for bug #9803 end
                        }
                        if (mSIMInfo2 == null) {
                            // Aurora xuyong 2015-05-26 modified for bug #13707 start
                        	try {
	                            mSIMInfo2 = SIMInfo.getSIMInfoBySlot(ComposeMessageActivity.this
	                                    , GnPhone.GEMINI_SIM_2);
                        	} catch (IllegalArgumentException e) {
                                e.printStackTrace();
                            } catch (SQLiteException e) {
                        		e.printStackTrace();
                        	}
                            // Aurora xuyong 2015-05-26 modified for bug #13707 end
                            // Aurora xuyong 2014-11-17 added for bug #9803 start
                            MessageUtils.addSIMInfo(mSIMInfo2);
                            // Aurora xuyong 2014-11-17 added for bug #9803 end
                        }
                    // Aurora xuyong 2014-08-25 modified for bug #7912 start
                        // Aurora xuyong 2015-07-01 modified for bug #13930 start
                        if (mSIMInfo1 != null && getSimStateReady(mSIMInfo1State, 0)) {
                        // Aurora xuyong 2015-07-01 modified for bug #13930 end
                    // Aurora xuyong 2014-08-25 modified for bug #7912 end
                            if (Utils.hasLollipop()) {
                                //Aurora xuyong 2015-04-02 modified for android 5.1+ new feature start
                                mSelectedSimId = (int)mSubInfoList.get(0).getSubscriptionId();
                                //Aurora xuyong 2015-04-02 modified for android 5.1+ new feature end
                            } else {
                                mSelectedSimId = (int)mSIMInfo1.mSimId;
                            }
                   // Aurora xuyong 2014-08-25 modified for bug #7912 start
                        // Aurora xuyong 2015-07-01 modified for bug #13930 start
                        } else if (mSIMInfo2 != null && getSimStateReady(mSIMInfo2State, 1)) {
                        // Aurora xuyong 2015-07-01 modified for bug #13930 end
                   // Aurora xuyong 2014-08-25 modified for bug #7912 end
                            if (Utils.hasLollipop()) {
                                //Aurora xuyong 2015-04-02 modified for android 5.1+ new feature start
                                // Aurora xuyong 2015-06-24 modified for android 5.1+ new feature start
                                if (mSubCount == 1 || mSimCount == 1) {
                                    mSelectedSimId = (int)mSubInfoList.get(0).getSubscriptionId();
                                } else if (mSubCount == 2 || mSimCount == 2) {
                                    mSelectedSimId = (int)mSubInfoList.get(1).getSubscriptionId();
                                }
                                // Aurora xuyong 2015-06-24 modified for android 5.1+ new feature end
                                //Aurora xuyong 2015-04-02 modified for android 5.1+ new feature end
                            } else {
                                mSelectedSimId = (int)mSIMInfo2.mSimId;
                            }
                     // Aurora xuyong 2014-08-05 modified for bug #7249 end
                        }
        // Aurora xuyong 2014-05-23 modified for multisim feature end
                    }
                }
                // Gionee lixiaohu 2012-08-28 added for CR00681687 end
                checkRecipientsCount();
            } else {
                if (!isHasRecipientCount()) {
                    new AuroraAlertDialog.Builder(ComposeMessageActivity.this)/*//, AuroraAlertDialog.THEME_AMIGO_FULLSCREEN).setIcon(
                        android.R.drawable.ic_dialog_alert)*/.setTitle(
                            R.string.cannot_send_message).setMessage(
                                R.string.cannot_send_message_reason)
                                    .setPositiveButton(R.string.yes,
                                        new CancelSendingListener()).show();
                } else {
                    new AuroraAlertDialog.Builder(ComposeMessageActivity.this)/*, AuroraAlertDialog.THEME_AMIGO_FULLSCREEN).setIcon(
                        android.R.drawable.ic_dialog_alert)*/.setTitle(
                            R.string.cannot_send_message).setMessage(
                                R.string.cannot_send_message_reason_no_content)
                                    .setPositiveButton(R.string.yes,
                                        new CancelSendingListener()).show();

                }
            }
        }
        // gionee zhouyj 2012-07-05 modify for CR00637457 start
        /*if (v == mDeleteImageButton) {
            deleteMsg();
        } else if (v == mCopyImageButton) {
            copyMsg();
        } else if (v == mForwardImageButton) {
            forwardMsg();
        } else if (v == mMoreImageButton) {
            popup = constructPopupMenu(v);
            if (popup != null) {
                popup.show();
            }
        }*/
        // gionee zhouyj 2012-07-05 modify for CR00637457 end
        //gionee gaoj 2012-8-14 added for CR00623375 start
        /*if (MmsApp.mGnRegularlyMsgSend) {
            if (v == mRegButton) {
                // gionee zhouyj 2012-08-24 modify for CR00680621 start
                onClickAttachment(mRegButton, RegularlyButtonToolBar.FLAG_SET);
                // gionee zhouyj 2012-08-24 modify for CR00680621 end
            //gionee zhouyj 2012-08-16 add for CR00678252 start 
            } else if(v == mPoiButton) {
                if(null != mLocation) {
                    // gionee zhouyj 2012-08-24 modify for CR00680621 start
                    onClickAttachment(mPoiButton, RegularlyButtonToolBar.FLAG_POI);
                    // gionee zhouyj 2012-08-24 modify for CR00680621 end
                }
            //gionee zhouyj 2012-08-16 add for CR00678252 end 
            }
        }*/
        //gionee gaoj 2012-8-14 added for CR00623375 end
    }
    
    // gionee zhouyj 2012-08-24 add for CR00680621 start
    /*private void onClickAttachment(TextView target, int flag) {
      //gionee gaoj 2012-8-14 added for CR00623375 start
        // gionee lwzh modify for CR00774362 20130227 begin
        if (MmsApp.mGnRegularlyMsgSend){
            if (mRegularlyToolBar == null) {
                mRegularlyToolBar = new RegularlyButtonToolBar(mRegButton);
                mRegularlyToolBar.setOnToolBarItemClickListener(mToolBarItemClickListener);
            }

            //gionee zhouyj 2012-08-16 add for CR00678252 start 

            //gionee zhouyj 2012-08-16 add for CR00678252 end 
            //gionee gaoj 2012-8-22 added for CR00679066 start
//            if (MmsApp.mDarkStyle) {
//                mRegButton.setBackgroundDrawable(getResources().getDrawable(R.drawable.gn_regularly_button));
//                mPoiButton.setBackgroundDrawable(getResources().getDrawable(R.drawable.gn_location_button));
//            } else {
//            }
            //gionee gaoj 2012-8-22 added for CR00679066 end
            if(mRegularlyToolBar.isShowing()) {
                if(flag == mRegularlyToolBar.getOptionItemFlag()) {
                    mRegularlyToolBar.hide();
                } else {
                    mRegularlyToolBar.hide();
                    mRegularlyToolBar.setCurrentTarget(target);
                    mRegularlyToolBar.setOptionItemFlag(flag);
                    mRegularlyToolBar.show();
                    postDelay();
                }
            } else {
                mRegularlyToolBar.setCurrentTarget(target);
                mRegularlyToolBar.setOptionItemFlag(flag);
                mRegularlyToolBar.show();
                postDelay();
            }
        }
        //gionee gaoj 2012-8-14 added for CR00623375 end
        // gionee lwzh modify for CR00774362 20130227 end
    }*/
    // gionee zhouyj 2012-08-24 add for CR00680621 end
    // Aurora xuyong 2013-01-09 added for aurora's new feature start
    //Aurora xuyong 2014-08-16 modified for aurora's new feature start
    private boolean mStayPos = false;
    //Aurora xuyong 2014-08-16 modified for aurora's new feature end
    // Aurora xuyong 2013-01-09 added for aurora's new feature end
    //private TextView mCountTitle;
    // Aurora xuyong 2013-09-13 modified for aurora's new feature start
    private TextView mSelectAll;
    // Aurora xuyong 2013-09-13 modified for aurora's new feature end
    private void gnInitResourceRefs() {
        // Aurora xuyong 2015-10-15 added for aurora's new feature start
    	initAddAttachLayout();
        // Aurora xuyong 2015-10-15 added for aurora's new feature end
        // Aurora xuyong 2013-11-13 added for aurora's new feature start
        mAuroraRecipientsLayout = (FrameLayout) findViewById(R.id.aurora_reci_layout);
        mRecipientsList = (AuroraListView) findViewById(R.id.aurora_recipients);
        // Aurora xuyong 2013-11-13 added for aurora's new feature end
        mMsgListView = (MessageListView) findViewById(R.id.history);
        mMsgListView.setDivider(null);      // no divider so we look like IM conversation.

        // called to enable us to show some padding between the message list and the
        // input field but when the message list is scrolled that padding area is filled
        // in with message content
        mMsgListView.setClipToPadding(false);
        // Aurora xuyong 2014-01-07 added for bug #449 start
        mMsgListView.auroraSetAuroraOnSizeChangedListener(new AuroraOnSizeChangedListener() {
            
            @Override
            public void auroraOnSizeChanged(int newWidth,int newHeight,int oldWidth,int oldHeight) {
                // Aurora xuyong 2013-01-09 modified for aurora's new feature start
                // Aurora xuyong 2014-02-13 added for bug #1928 start
                MessageListItem.setNeedChangeInva(true);
                // Aurora xuyong 2014-02-13 added for bug #1928 end
                if (!mMsgListAdapter.mIsDeleteMode) {
                //Aurora xuyong 2014-08-16 modified for aurora's new feature start
                    if (!mStayPos) {
                //Aurora xuyong 2014-08-16 modified for aurora's new feature end
                        mMsgListView.setStackFromBottom(false);
                        mMsgListView.setStackFromBottom(true);
                        mMsgListView.setScrollY(0);
                     // Aurora xuyong 2014-05-05 added for aurora's new feature start
                    // Aurora xuyong 2014-05-07 modified for bug 4693 start
                        mThumbnailWorker.clearTaskSet();
                    // Aurora xuyong 2014-05-07 modified for bug 4693 end
                     // Aurora xuyong 2014-05-05 added for aurora's new feature end
                    }
                }
                // Aurora xuyong 2013-01-09 modified for aurora's new feature end
            }
            
        });
        // Aurora xuyong 2014-01-07 added for bug #449 end
        // turn off children clipping because we draw the border outside of our own
        // bounds at the bottom.  The background is also drawn in code to avoid drawing
        // the top edge.
        mMsgListView.setClipChildren(false);
        // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
        //addListHeaderView();
        // Aurora xuyong 2013-09-13 deleted for aurora's new feature end
        mBottomPanel = findViewById(R.id.bottom_panel);
        //a0
        /*mDeletePanel = findViewById(R.id.delete_panel);*/
        //gionee gaoj 2012-4-10 added for CR00555790 start

        // gionee zhouyj 2012-07-05 add for CR00637457 start
        
        //mCustomTabLayout = (LinearLayout) findViewById(R.id.gn_custom_tab);
        //Aurora xuyong 2013-09-20 modified for aurora's new feature start
        //mBackButton = (ImageButton) findViewById(R.id.gn_ic_back_button);
        mBackButton = (ImageButton)mAuroraActionBar.getHomeButton();
        //Aurora xuyong 2013-09-20 modified for aurora's new feature end
        // Aurora xuyong 2013-09-23 deleted for aurora's new feature start
        /*mBackButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub

                if( mMsgListAdapter.mIsDeleteMode) {
                    onFinishMultiChoose();
                    return;
                }
                if (mIsLeMei) {
                    if (mWorkingMessage != null) {
                        mWorkingMessage.discard();
                    }
                    finish();
                } else {
                    if (mAttachmentSlideView != null
                            && View.VISIBLE == mAttachmentSlideView.getVisibility()) {
                        if(mAttachmentSlideViewCurrent == mAttachmentSlideViewHome){
                            mAttachmentSlideView.setVisibility(View.GONE);
                        }else{
                            showAnAttachmentSlide(mAttachmentSlideViewHome);
                        }
                    }
                    if (FeatureOption.MTK_SEND_RR_SUPPORT) {
                        checkAndSendReadReport();
                    }
                    exitComposeMessageActivity(new Runnable() {
                        public void run() {
                            finish();
                        }
                    });
                }
            }
        });*/
        // Aurora xuyong 2013-09-23 deleted for aurora's new feature end
        //gionee gaoj 2012-5-24 added for CR00588933 end
        //gionee gaoj 2012-4-10 added for CR00555790 end
        //a1
        mTextEditor = (AuroraEditText) findViewById(R.id.embedded_text_editor);
        //Aurora xuyong 2013-10-11 added for aurora's new feature start
        mTextEditor.setOnKeyListener(new OnKeyListener() {
            public boolean onKey(View v, int keyCode, KeyEvent event) {
                // Aurora xuyong 2015-09-14 added for aurora's new feature start
            	if (keyCode == KeyEvent.KEYCODE_BACK) {
            		if (mPopsIsShowing) {
                        // Aurora xuyong 2015-10-08 deleted for aurora's new feature start
                		/*if (mAddWindowManager != null && mAddAttachmentLayout != null) {
                			if (null != mPopsBackground) {
                				mPopsBackground.startAnimation(AnimationUtils.loadAnimation(ComposeMessageActivity.this, com.aurora.R.anim.aurora_menu_cover_exit));
                				mPopsBackground.setVisibility(View.GONE);
                			}
                			if (null != mAddContentLayout) {
                				mAddContentLayout.startAnimation(AnimationUtils.loadAnimation(ComposeMessageActivity.this, com.aurora.R.anim.aurora_menu_exit));
                				mAddContentLayout.setVisibility(View.GONE);
                			}
                			mRemoveHandler.sendEmptyMessageDelayed(REMOVE_ADD_MENUS, 100);
                        }*/
                        // Aurora xuyong 2015-10-08 deleted for aurora's new feature end
                        // Aurora xuyong 2015-10-08 added for aurora's new feature start
            			mRemoveHandler.sendEmptyMessageDelayed(REMOVE_ADD_MENUS, 100);
                        // Aurora xuyong 2015-10-08 added for aurora's new feature end
                		return false;
                	}
            	}
                // Aurora xuyong 2015-09-14 added for aurora's new feature end
                if (event.getAction() != KeyEvent.ACTION_DOWN) {
                    return false;
                }
                // Aurora xuyong 2013-12-18 modified for #bug 480 start
                // Aurora xuyong 2013-12-25 modified for #bug 480 start
                if ((keyCode == KeyEvent.KEYCODE_DEL) && mTextEditor.getSelectionStart() == 0 && mTextEditor.getSelectionStart() == mTextEditor.getSelectionEnd()) {
                // Aurora xuyong 2013-12-25 modified for #bug 480 end
                    Message msg = Message.obtain(mMessageListItemHandler, EDIT_TEXT_ALL_DELETE);
                    msg.sendToTarget();
                    return false;
                // Aurora xuyong 2013-12-18 modified for #bug 480 end
                }
                return false;
            }
        });
        //Aurora xuyong 2013-10-11 added for aurora's new feature end
//m0
//        mTextEditor.setOnEditorActionListener(this);
//m1
        mTextEditor.addTextChangedListener(mTextEditorWatcher);
        mTextEditor.setFilters(new InputFilter[] {
                new TextLengthFilter(MmsConfig.getMaxTextLimit())});
        mTextCounter = (TextView) findViewById(R.id.text_counter);
        //mTopPanel = findViewById(R.id.recipients_subject_linear);
        //mTopPanel.setFocusable(false);
        
        if (!MmsApp.mGnMessageSupport) {
            mAttachmentEditor = (AttachmentEditor) findViewById(R.id.attachment_editor);
            mAttachmentEditor.setHandler(mAttachmentEditorHandler);
        }
        
        mAttachmentEditorScrollView = findViewById(R.id.attachment_editor_scroll_view);
        //gionee gaoj 2012-4-10 added for CR00555790 start
        mAddButton = (ImageButton) findViewById(R.id.gn_insert_attach_btn);
        mAddButton.setOnClickListener(this);
         // Aurora liugj 2013-11-06 modified for fix bug-426 start 
        mSendMsgButton = (Button) findViewById(R.id.gn_send_msg_button);
        mSendMsgButton.setOnClickListener(this);
        //mSendMsgText = (TextView) findViewById(R.id.gn_send_msg_text);
         // Aurora liugj 2013-11-06 modified for fix bug-426 end
        //gionee gaoj 2012-12-18 added for CR00745515 start
        /*mSendMsgButton.setOnTouchListener(new OnTouchListener() {
            
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                // TODO Auto-generated method stub
                // Aurora xuyong 2014-12-30 deleted for bug #10809 start
                if (!isSelectTwoSim) {
                    return false;
                }
                // Aurora xuyong 2014-12-30 deleted for bug #10809 end
                switch (event.getAction()) {
                case MotionEvent.ACTION_DOWN:
                        if (isPreparedForSending()) {
                            updateSendButtonState(false);
                            checkRecipientsCount();
                        } else {
                            if (!isHasRecipientCount()) {
                                new AuroraAlertDialog.Builder(ComposeMessageActivity.this), AuroraAlertDialog.THEME_AMIGO_FULLSCREEN).setIcon(
                                    android.R.drawable.ic_dialog_alert).setTitle(
                                        R.string.cannot_send_message).setMessage(
                                            R.string.cannot_send_message_reason)
                                                .setPositiveButton(R.string.yes,
                                                    new CancelSendingListener()).show();
                            } else {
                                new AuroraAlertDialog.Builder(ComposeMessageActivity.this), AuroraAlertDialog.THEME_AMIGO_FULLSCREEN).setIcon(
                                    android.R.drawable.ic_dialog_alert).setTitle(
                                        R.string.cannot_send_message).setMessage(
                                            R.string.cannot_send_message_reason_no_content)
                                                .setPositiveButton(R.string.yes,
                                                    new CancelSendingListener()).show();

                            }
                        }
                    
                    break;

                default:
                    break;
                }
                return false;
            }
        });*/
        //gionee gaoj 2012-12-18 added for CR00745515 end
        // Gionee lixiaohu 2012-08-28 added for CR00681687 start
        if (MmsApp.mGnMultiSimMessage) {
          // Aurora xuyong 2014-05-23 modified for multisim feature start
           mMultiSimStub = (ViewStub) findViewById(R.id.aurora_multi_send);
           mMultiSimStub.inflate();
         // Aurora xuyong 2014-08-05 added for aurora multisim feature start
           mMultiTextCounter = (TextView) findViewById(R.id.text_counter_multi);
           mMultiMediaSizeInfo = (TextView) findViewById(R.id.media_size_info_multi);
          // Aurora xuyong 2014-08-05 added for aurora multisim feature end
         // Aurora xuyong 2014-07-29 modified for aurora's new feature start
           mSendMsgButton1 = (AuroraSendMsgImageView) findViewById(R.id.aurora_sim1_send_button);
           mSendMsgButton1.setPosition(AuroraSendMsgImageView.LEFT_POSITION);
           mSendMsgButton1.setOnClickListener(this);
           mSendMsgButton2 = (AuroraSendMsgImageView) findViewById(R.id.aurora_sim2_send_button);
           mSendMsgButton2.setPosition(AuroraSendMsgImageView.RIGHT_POSITION);
           mSendMsgButton2.setOnClickListener(this);
         // Aurora xuyong 2014-07-29 modified for aurora's new feature end
           updateSendButtonState();
          // Aurora xuyong 2014-06-07 modified for bug #5449 start
           if (mInsertedSimCount == 2) {
          // Aurora xuyong 2014-06-07 modified for bug #5449 end
               mSendMsgButton.setVisibility(View.GONE);
             // Aurora xuyong 2014-07-29 added for aurora's new feature start
               changedMsgContentWidth(true);
             // Aurora xuyong 2014-07-29 added for aurora's new feature end
           } else {
               mMultiSimStub.setVisibility(View.GONE);
             // Aurora xuyong 2014-07-29 added for aurora's new feature start
               changedMsgContentWidth(false);
             // Aurora xuyong 2014-07-29 added for aurora's new feature end
           }
          // Aurora xuyong 2014-05-23 modified for multisim feature end
        }
        // Gionee lixiaohu 2012-08-28 added for CR00681687 end        

        mEditorOnClickListener = new View.OnClickListener(){
            @Override
            public void onClick(View arg0) {
                if(mAttachmentSlideView != null){
                    mWaitingShrink = true;
                    if (MmsApp.mGnMessageSupport) {
                        mcontactView = arg0;
                    }
                    hideAttachmentSlideView();
                    //Aurora xuyong 2013-09-20 added for aurora's new feature start
                    // Aurora xuyong 2014-06-14 modified for bug #4395 start
                    Message msg = Message.obtain(mHandler, SHOW_INPUTMETHOD_DELAY);
                    msg.obj = arg0;
                    msg.sendToTarget();
                    // Aurora xuyong 2014-06-14 modified for bug #4395 end
                    //Aurora xuyong 2013-09-20 added for aurora's new feature end
                }
            }
        };
        //gionee gaoj 2012-8-14 added for CR00623375 start
        
        // gionee zhouyj 2012-06-28 add for CR00628332 start 
        mEditorOnFocusChangeListener = new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View v, boolean hasFocus) {
                // TODO Auto-generated method stub
                // Aurora xuyong 2014-03-05 added for bug #11984 start
                mNeedReturn = false;
                // Aurora xuyong 2014-03-05 added for bug #11984 end
                if(hasFocus && v == mSubjectTextEditor && mAttachmentSlideView != null && 
                        mAttachmentSlideView.getVisibility() == View.VISIBLE) {
                    mWaitingShrink = true;
                    mcontactView = v;
                    showInputMethod(mSubjectTextEditor);
                } 
                // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
                /*if (hasFocus) {
                    mLayout.setBackgroundDrawable(getResources().getDrawable(R.drawable.gn_textfield_pressed));
                } else {
                    mLayout.setBackgroundDrawable(getResources().getDrawable(R.drawable.gn_textfield_default));
                }*/
                // Aurora xuyong 2013-09-13 deleted for aurora's new feature end
            }
        };
        // gionee zhouyj 2012-06-28 add for CR00628332 end 
        mTextEditor.setOnClickListener(mEditorOnClickListener);
        // gionee zhouyj 2012-09-10 add for CR00686858 start 
        mTextEditor.setOnLongClickListener(new View.OnLongClickListener() {
            @Override
            public boolean onLongClick(View v) {
                // TODO Auto-generated method stub
                //Gionee <guoyx> <2013-07-18> modify for CR00780083 begin
                hideAttachmentSlideView();
                // Aurora xuyong 2014-06-14 modified for bug #4395 start
                Message msg = Message.obtain(mHandler, SHOW_INPUTMETHOD_DELAY);
                msg.obj = v;
                msg.sendToTarget();
                // Aurora xuyong 2014-06-14 modified for bug #4395 end
                //Gionee <guoyx> <2013-07-18> modify for CR00780083 end
                return false;
            }
        });
        // gionee zhouyj 2012-09-10 add for CR00686858 end 

        mLayout = (LinearLayout) findViewById(R.id.message_content_panel);
        // Aurora xuyong 2014-02-22 modified for aurora's new feature start
        mTextEditor.setFocusChangeListener(new AuroraEditText.OnFocusChangeListener() {
        // Aurora xuyong 2014-02-22 modified for aurora's new feature end
            
            @Override
            public void onFocusChange(View v, boolean hasFocus) {
                // TODO Auto-generated method stub
                // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
                // Aurora  xuyong 2013-10-11 modified for aurora's new feature start
                // Aurora xuyong 2014-03-05 added for bug #11984 start
                mNeedReturn = false;
                // Aurora xuyong 2014-03-05 added for bug #11984 end
                if (hasFocus) {
                    if (mAttachmentSlideView != null && mAttachmentSlideView.getVisibility() == View.VISIBLE) {
                           // Aurora xuyong 2014-03-06 added for aurora's new feature start
                           if (mAddButton != null) {
                                mAddButton.setImageResource(R.drawable.aurora_insert_attch_selector);
                           }
                           // Aurora xuyong 2014-03-06 added for aurora's new feature end
                        mAttachmentSlideView.setVisibility(View.GONE);
                   // Aurora xuyong 2014-06-14 modified for bug #4395 start
                        Message msg = Message.obtain(mHandler, SHOW_INPUTMETHOD_DELAY);
                        msg.obj = v;
                        msg.sendToTarget();
                   // Aurora xuyong 2014-06-14 modified for bug #4395 end
                    }
                }
                // Aurora  xuyong 2013-10-11 modified for aurora's new feature end
                // Aurora xuyong 2013-09-13 deleted for aurora's new feature end
            }
        });
        mScrollView = (ScrollView) findViewById(R.id.gnScroll);
        ((GnLinearLayout) mBottomPanel).setLocationChangedListener(new GnLinearLayout.OnLocationChangedListener() {

            @Override
            public void setOnLocationChanged(int left, int top, int right, int bottom) {
                mBottomPanel.layout(left, 0, right, bottom);
                mLayout.layout(mLayout.getLeft(), 0, mLayout.getRight(), mLayout.getBottom());
                // Gionee <zhouyj> <2013-04-29> modify for CR00800653 begin
                // gionee zhouyj 2012-12-04 modify for CR00738321 start 
                // Aurora xuyong 2013-11-13 modified for bug # 625 start
                mScrollView.layout(mScrollView.getLeft(), mLayout.getTop() + 30, mScrollView.getRight(), mLayout.getBottom() - 10);
                // Aurora xuyong 2013-11-13 modified for bug # 625 end
                if (mTextEditor != null && mTextEditor.isFocused() && (getResources().getConfiguration().orientation 
                        == Configuration.ORIENTATION_LANDSCAPE)) {
                    mScrollView.fullScroll(View.FOCUS_DOWN);
                }
                // gionee zhouyj 2012-12-04 modify for CR00738321 end 
                // Gionee <zhouyj> <2013-04-29> modify for CR00800653 end
            }
        });

        mediaTextView = (TextView) findViewById(R.id.media_size_info);


        //gionee gaoj 2013-3-21 added for CR00787217 start
          // Aurora liugj 2013-11-04 modified for aurora's new feature start
        //mTextEditor.setTextColor(getResources().getColor(R.color.aurora_color_edit_text));
          // Aurora liugj 2013-11-04 modified for aurora's new feature end
        //gionee gaoj 2013-3-21 added for CR00787217 end
        if (MmsApp.mLightTheme) {
             // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
            //mBottomPanel.setBackgroundResource(R.drawable.gn_com_menu_light_bg);
            //mCustomTabLayout.setBackgroundResource(R.drawable.aurora_actionbar_bg);
            // Aurora xuyong 2013-09-13 deleted for aurora's new feature end
            //Gionee <Gaoj> <2013-05-21> modified for CR00811071 begin
            // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
            //mAddButton.setBackgroundResource(R.drawable.gn_ic_insert_attach_light_bg_btn);
            // Aurora xuyong 2013-09-13 deleted for aurora's new feature end
            //Gionee <Gaoj> <2013-05-21> modified for CR00811071 end
            // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
            //mAddButton.setBackgroundResource(R.drawable.aurora_insert_attch_selector);
            // Aurora xuyong 2013-09-13 deleted for aurora's new feature end

            //gionee gaoj 2013-3-21 added for CR00787217 start
            mTextCounter.setTextColor(getResources().getColor(R.color.gn_msg_text_count_color_dark));
            // Aurora xuyong 2014-08-05 added for aurora multisim feature start
            if (mMultiTextCounter != null) {
                mMultiTextCounter.setTextColor(getResources().getColor(R.color.gn_msg_text_count_color_dark));
            }
            // Aurora xuyong 2014-08-05 added for aurora multisim feature end
            mediaTextView.setTextColor(getResources().getColor(R.color.gn_msg_text_count_color_dark));
            // Aurora xuyong 2014-08-05 added for aurora multisim feature start
            if (mMultiMediaSizeInfo != null) {
                mMultiMediaSizeInfo.setTextColor(getResources().getColor(R.color.gn_msg_text_count_color_dark));
            }
            // Aurora xuyong 2014-08-05 added for aurora multisim feature end
            //gionee gaoj 2013-3-21 added for CR00787217 end
        } else if (MmsApp.mDarkStyle) {
                // Aurora liugj 2013-11-06 modified for fix bug-426 start 
            //mSendMsgButton.setBackgroundResource(R.drawable.gn_message_send_dark_btn);
                // Aurora liugj 2013-11-06 modified for fix bug-426 end
            // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
            //mBottomPanel.setBackgroundResource(R.drawable.gn_com_menu_dark_bg);
            //mCustomTabLayout.setBackgroundResource(MmsApp.mTransparent ? R.drawable.gn_tab_self_bg : R.drawable.gn_tab_self_dark_bg);
            //mAddButton.setBackgroundResource(R.drawable.gn_ic_insert_attach_dark_btn);
            //mAddButton.setBackgroundResource(R.drawable.aurora_insert_attch_selector);
            // Aurora xuyong 2013-09-13 deleted for aurora's new feature end

            //gionee gaoj 2013-3-21 added for CR00787217 start
            mTextCounter.setTextColor(getResources().getColor(R.color.gn_msg_text_count_color_white));
            // Aurora xuyong 2014-08-05 added for aurora multisim feature start
            if (mMultiTextCounter != null) {
                mMultiTextCounter.setTextColor(getResources().getColor(R.color.gn_msg_text_count_color_white));
            }
            // Aurora xuyong 2014-08-05 added for aurora multisim feature end
            mediaTextView.setTextColor(getResources().getColor(R.color.gn_msg_text_count_color_white));
            // Aurora xuyong 2014-08-05 added for aurora multisim feature start
            if (mMultiMediaSizeInfo != null) {
                mMultiMediaSizeInfo.setTextColor(getResources().getColor(R.color.gn_msg_text_count_color_white));
            }
            // Aurora xuyong 2014-08-05 added for aurora multisim feature end
            //gionee gaoj 2013-3-21 added for CR00787217 end
        }
        //gionee gaoj 2012-4-10 added for CR00555790 end

        //gionee wangym 2012-11-22 add for CR00735223 start
        if(MmsApp.mIsTouchModeSupport )
        {
            mIsCmcc = true;
            // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
            //mScaleDetector = new ScaleDetector(this, new ScaleListener());
            // Aurora xuyong 2013-09-13 deleted for aurora's new feature end
        }
        //gionee wangym 2012-11-22 add for CR00735223 end
    }
    // gionee lwzh add for CR00633086 20120702 end
    // gionee lwzh modify for CR00774362 20130227 begin
    private ViewStub viewStub = null;
    private void gnInitAttachmentLayout() {
        
        if (mAttachmentLayout != null) {
            return;
        }
        
        if (viewStub == null) {
            viewStub = (ViewStub)findViewById(R.id.gn_compose_attachment_id);
            
            if (viewStub != null) {
                mAttachmentLayout = (LinearLayout) viewStub.inflate();
                //mPoiButton = (TextView) mAttachmentLayout.findViewById(R.id.gn_send_address_button);
                //mPoiButton.setOnClickListener(this);
                //mRegButton = (TextView) mAttachmentLayout.findViewById(R.id.gn_regularly_send_msg_button);
                //mRegButton.setOnClickListener(this);
                if (mSubjectTextEditor == null) {
                    mSubjectTextEditor = (AuroraEditText) mAttachmentLayout.findViewById(R.id.subject);
                    mSubjectTextEditor.setFilters(new InputFilter[] { new MyLengthFilter(DEFAULT_LENGTH) });
                }
                mSubjectDivider = (View) mAttachmentLayout.findViewById(R.id.subject_divider);
                
                //Gionee <guoyx> <2013-06-05> modify for CR00774306 begin
                //MTK_OP01_PROTECT_START
    //            if ("OP01".equals(SystemProperties.get("ro.operator.optr"))) {
                    // cmcc request subject <= 40bytes and need a tips, other op has no constraint.
    //            }
                //MTK_OP01_PROTECT_END
                //Gionee <guoyx> <2013-06-05> modify for CR00774306 end
                if (mAttachmentEditor == null) {
                    mAttachmentEditor = (AttachmentEditor) mAttachmentLayout.findViewById(R.id.attachment_editor);
                    mAttachmentEditor.setHandler(mAttachmentEditorHandler);
                    mAttachmentEditor.setTextChangeForOneSlideListener(new AttachmentEditor.TextChangeForOneSlideListener() {
        
                        @Override
                        public void onTextChangeForOneSlide(String text) {
                            // TODO Auto-generated method stub
                            mediaTextView.setText(text);
                            // Aurora xuyong 2014-08-05 added for aurora multisim feature start
                            if (mMultiMediaSizeInfo != null) {
                                mMultiMediaSizeInfo.setText(text);
                            }
                            // Aurora xuyong 2014-08-05 added for aurora multisim feature end
                        }
                    });
                }
            }
        }
    }
    // gionee lwzh modify for CR00774362 20130227 end
    
    //gionee gaoj 2012-7-17 added for CR00628364 start 
    @Override
    public boolean onLongClick(View v) {
        // TODO Auto-generated method stub
        //Gionee <guoyx> <2013-07-03> modify for CR00829344 begin
        /*if (v == mDeleteImageButton) {
            Toast.makeText(ComposeMessageActivity.this, this.getString(R.string.gn_menu_delete), Toast.LENGTH_SHORT).show();
//        } else if (v == mStarImageButton) {
//            //gionee lixiaohu 20120824 modify for CR00678612 start 
//            if(mAllMms) {
//                Toast.makeText(sCompose, sCompose.getString(R.string.cancel_favorite), Toast.LENGTH_SHORT).show();
//            } else if(!mAllStar) {
//                Toast.makeText(sCompose, sCompose.getString(R.string.gn_menu_star), Toast.LENGTH_SHORT).show();
//            } else {
//                Toast.makeText(sCompose, sCompose.getString(R.string.cancel_favorite), Toast.LENGTH_SHORT).show();
//            }        
            //gionee lixiaohu 20120824 modify for CR00678612 end
        } else if (v == mCopyImageButton) {
            Toast.makeText(ComposeMessageActivity.this, this.getString(R.string.gn_menu_copy), Toast.LENGTH_SHORT).show();
        } else if (v == mForwardImageButton) {
            Toast.makeText(ComposeMessageActivity.this, this.getString(R.string.gn_menu_forward), Toast.LENGTH_SHORT).show();
        }*/
        //Gionee <guoyx> <2013-07-03> modify for CR00829344 end
        return true;
    }
    //gionee gaoj 2012-7-17 added for CR00628364 end

    //gionee gaoj 2012-12-10 added for CR00741704 start
    /*private void gnAddBlackList() {
        final String recipient = mConversation.getRecipients().serialize();
        // Gionee baorui 2012-09-10 modify for CR00687249 begin
        Log.i("TAG", "gnAddBlackList   recipient = " + recipient);
        if (recipient == null || "".equals(recipient)) {
            return;
        }
        // Gionee baorui 2012-09-10 modify for CR00687249 end
        Contact contact = mConversation.getRecipients().get(0);
        final String name = contact.getName();
        try {
            // gionee zhouyj 2013-03-18 modify for CR00785474 start
            if (mGioneeTencentService == null) {
                bindService(qqContent, serviceConnection, Context.BIND_AUTO_CREATE);
                new Handler().postDelayed(new Runnable() {
                    
                    @Override
                    public void run() {
                        // TODO Auto-generated method stub
                        if (mGioneeTencentService != null) {
                            try {
                                mGioneeTencentService.insertToBlacklist(name, recipient);
                                //gionee <gaoj> <2013-06-14> add for CR00818911 begin
                                unbindService(serviceConnection);
                                //gionee <gaoj> <2013-06-14> add for CR00818911 end
                            } catch (RemoteException e) {
                                e.printStackTrace();
                            }
                        } 
                    }
                }, 500);
            } else {
                mGioneeTencentService.insertToBlacklist(name, recipient);
            }
            // gionee zhouyj 2013-03-18 modify for CR00785474 end
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }*/
    //gionee gaoj 2012-12-10 added for CR00741704 end

    //gionee gaoj 2012-8-14 added for CR00623375 start
    /*private DateTimeDialog.OnDateTimeSetListener mDateTimeSetListener = new DateTimeDialog.OnDateTimeSetListener() {

        @Override
        public void onDateTimeSet(Calendar calendar) {
            // TODO Auto-generated method stub
            Log.d("RegSendMsg", "ComposeMessageActivity...mDateTimeSetListener....set calendar "+calendar.getTimeInMillis());
            //gionee gaoj 2012-8-21 added for CR00678520 CR00678407 start
            if (mIsReSetTime) {
                if (mRegularlyMsgItem.isSms()) {
                    mRegularlyMain.updateSmsRegularlyTime(ComposeMessageActivity.this, mRegularlyMsgItem.mMessageUri, calendar.getTimeInMillis());
                } else if (mRegularlyMsgItem.isMms()) {
                    try {
                        mRegularlyMain.updateMmsRegularlyTime(ComposeMessageActivity.this, mRegularlyMsgItem.mMessageUri, calendar.getTimeInMillis());
                    } catch (MmsException e) {
                        // TODO: handle exception
                    }
                    startMsgListQuery(0);
                }
                /if (mRegButton.getVisibility() == View.VISIBLE) {
                    mRegularlyMain.setIsRegularly(true);
                    Calendar calendar2 = Calendar.getInstance();
                    calendar2.setTimeInMillis(mRegularlyTime);
                    mRegularlyMain.setCalendar(calendar2);
                } else {
                    mRegularlyMain.setIsRegularly(false);
                }
            } else {
                mRegularlyMain.setCalendar(calendar);
                mRegularlyMain.setIsRegularly(true);
                mRegButton.setVisibility(View.VISIBLE);
                mRegularlyTime = calendar.getTimeInMillis();
            }
            //gionee gaoj 2012-8-21 added for CR00678520 CR00678407 end
        }
    };*/

    /*private ToolBarItemClickListener mToolBarItemClickListener = new ToolBarItemClickListener() {

        @Override
        public void onAcitonClick(View targetView, int action) {
            // TODO Auto-generated method stub
            switch (action) {
            case RegularlyButtonToolBar.ACTION_SET:
                Calendar calendar = Calendar.getInstance();
                calendar.setTimeInMillis(mRegularlyTime);
                mRegularlyMain.setCalendar(calendar);
                Log.d("RegSendMsg", "ComposeMessageActivity...mToolBarItemClickListener....ACTION_SET"+calendar.getTimeInMillis());

                // gionee lanwzh add for CR00680806 20120824 begin
                if (MmsApp.mLightTheme) {
                //    mDateTimeDialog = new DateTimeDialog(ComposeMessageActivity.this, /*AuroraAlertDialog.THEME_AMIGO_FULLSCREEN,*/ //mDateTimeSetListener, null);
                //} else {
                //    mDateTimeDialog = new DateTimeDialog(ComposeMessageActivity.this, /*AuroraAlertDialog.THEME_AMIGO_FULLSCREEN,*/ //mDateTimeSetListener, null);
                //}
                // gionee lanwzh add for CR00680806 20120824 end

                /*mDateTimeDialog.updateDate(calendar);
                if (!mDateTimeDialog.isShowing()) {
                    mDateTimeDialog.show();
                    //gionee gaoj 2012-8-21 added for CR00678520 start
                    mIsReSetTime = false;
                    //gionee gaoj 2012-8-21 added for CR00678520 end
                }
                break;
            case RegularlyButtonToolBar.ACTION_POI:
                Log.d("RegSendMsg", "ComposeMessageActivity...mToolBarItemClickListener....ACTION_POI");
                mLocation.onGetPoi();
                break;
            case RegularlyButtonToolBar.ACTION_CANCER:
                Log.d("RegSendMsg", "ComposeMessageActivity...mToolBarItemClickListener....ACTION_CANCER");
                if(RegularlyButtonToolBar.FLAG_SET == mRegularlyToolBar.getOptionItemFlag()) {
                    mRegButton.setVisibility(View.GONE);
                    mRegularlyMain.setIsRegularly(false);
                } else if(RegularlyButtonToolBar.FLAG_POI == mRegularlyToolBar.getOptionItemFlag()) {
                    //if(View.GONE != mPoiButton.getVisibility()) {
                    //    mPoiButton.setVisibility(View.GONE);
                    //}
                    mLocation.setLocationListener(null);
                    if(null != mLastAddress && mLastAddress.equals(mTextEditor.getText().toString())) {
                        mWorkingMessage.setText("");
                        mTextEditor.setText("");
                    }
                    mLocation.onDestroy();
                }
                break;

            default:
                break;
            }
        }
        
    };*/

    private MessageInsertListener mMessageInsertListener = new MessageInsertListener() {
        
        @Override
        public void onSmsInsertFinish(boolean isFinish) {
            // TODO Auto-generated method stub
            Log.d("RegSendMsg", "ComposeMessageActivity...mMessageInsertListener....onSmsInsertFinish");
        }

        @Override
        public void onMmsInsertFinish(boolean isFinish) {
            // TODO Auto-generated method stub
            Log.d("RegSendMsg", "ComposeMessageActivity...mMessageInsertListener....onMmsInsertFinish");
        }
    };
    //gionee gaoj 2012-8-14 added for CR00623375 end
    
    //gionee zhouyj 2012-08-16 add for CR00678252 start 
    //Gionee <zhouyj> <2013-06-29> modify for CR00803744 begin
    private static final int CALC_MESSAGE_LAYOUT_HEIGHT = 1;
    //Gionee <zhouyj> <2013-07-15> add for CR00835703 begin
    private static final int SYNC_RECIPIENTS_CONTACTS   = 2;
    //Gionee <zhouyj> <2013-07-15> add for CR00835703 end
    private static final int CALC_MESSAGE_LAYOUT_DALEY_TIME = 300;
    // Aurora xuyong 2013-12-28 added for aurora's new feature start
    private static final int SHOW_NO_SIMCARD_TOAST = 3;
    // Aurora xuyong 2013-12-28 added for aurora's new feature end
    // Aurora xuyong 2014-03-07 added for bug #2855 start
    private static final int SHOW_ATTACHMENTS = 4;
    private static final int SHOW_ATTACHMENTS_DELAY = 5;
    // Aurora xuyong 2014-06-14 added for bug #4395 start
    private static final int SHOW_INPUTMETHOD = 9;
    private static final int SHOW_INPUTMETHOD_DELAY = 10;
    private static final int HIDDEN_ATTACHMENTS = 11;
    private static final int HIDDEN_INPUTMETHOD = 12;
    // Aurora xuyong 2014-06-14 added for bug #4395 end
    // Aurora xuyong 2014-06-17 added for bug #5825 start
    private static final int START_QUERY_AFTER_CONTACT_CHANGED = 13;
    // Aurora xuyong 2014-08-01 added for bug #7079 start
    private static final int SHOW_REJECT_DIALOG = 14;
    private static final int DISMISS_REJECT_DIALOG = 15;
    // Aurora xuyong 2014-08-05 added for bug #7249 start
    private static final int UPDATE_SEND_STATE = 16;
    // Aurora xuyong 2014-08-06 added for aurora's new feature start
    private static final int UPDATE_SEND_STATE_AFTER_SIMINFO_CHANGE = 17;
    // Aurora xuyong 2014-08-06 added for aurora's new feature end
    // Aurora xuyong 2014-08-05 added for bug #7249 end
    // Aurora xuyong 2014-08-01 added for bug #7079 end
    // Aurora xuyong 2014-06-17 added for bug #5825 end
    // Aurora yudingmin 2014-10-15 added for bug #7946 start
    private static final int ATTACHMENT_CHANGED = 18;
    // Aurora yudingmin 2014-10-15 added for bug #7946 end
    private static final int MULTIPLE_FROM_FILE_MANAGER = 6;
    private static final int SINGLE_FROM_FILE_MANAGER = 7;
    
    private static final int DELAY_HANDLE_DURATION = 40;
    // Aurora xuyong 2014-03-07 added for bug #2855 end
    private final Handler mHandler = new Handler() {
        public void handleMessage(Message msg) {
            // Aurora xuyong 2014-03-07 added for bug #2855 start
            switch(msg.what) {
            // Aurora yudingmin 2014-10-15 added for bug #7946 start
            case ATTACHMENT_CHANGED:
            {
                // Aurora xuyong 2015-03-03 modified for bug #11860 start
                drawBottomPanel(false);
                // Aurora xuyong 2015-03-03 modified for bug #11860 end
                updateSendButtonState();
                drawTopPanel(isSubjectEditorVisible());
                //gionee gaoj 2012-4-10 added for CR00555790 start
                if (!MmsApp.mGnMessageSupport) {
                    //gionee gaoj 2012-4-10 added for CR00555790 end
                if (null != mRecipientsEditor) {
                    if (mWorkingMessage.hasSlideshow()) {
                             // Aurora liugj 2013-10-30 modified for delete android.internal start
                        mRecipientsEditor.setImeActionLabel(getString(R.string.ime_action_done), EditorInfo.IME_ACTION_DONE);
                             // Aurora liugj 2013-10-30 modified for delete android.internal end
                        mRecipientsEditor.setImeOptions(EditorInfo.IME_ACTION_DONE);                             
                    } else {
                             // Aurora liugj 2013-10-30 modified for delete android.internal start
                        mRecipientsEditor.setImeActionLabel(getString(R.string.ime_action_next), EditorInfo.IME_ACTION_NEXT);
                             // Aurora liugj 2013-10-30 modified for delete android.internal end
                        mRecipientsEditor.setImeOptions(EditorInfo.IME_ACTION_NEXT);
                    }
                }
                // Aurora xuyong 2014-07-26 deleted for bug #6844 start
                //((InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE)).restartInput(mRecipientsEditor);
                // Aurora xuyong 2014-07-26 deleted for bug #6844 end
                //gionee gaoj 2012-4-10 added for CR00555790 start
                }
                //gionee gaoj 2012-4-10 added for CR00555790 end
                break;
            }
            // Aurora yudingmin 2014-10-15 added for bug #7946 end
          // Aurora xuyong 2014-08-05 added for bug #7249 start
          // Aurora xuyong 2014-08-06 added for aurora's new feature start
            case UPDATE_SEND_STATE_AFTER_SIMINFO_CHANGE:
                mInsertedSimCount = msg.arg1;
                updateSendButtonState();
                // Aurora xuyong 2014-12-23 added for aurora's new feature start
                startMsgListQuery();
                // Aurora xuyong 2014-12-23 added for aurora's new feature end
                break;
          // Aurora xuyong 2014-08-06 added for aurora's new feature end
            case UPDATE_SEND_STATE:
                mLastItemSlotId = msg.arg1;
                updateSendButtonState();
                break;
          // Aurora xuyong 2014-08-05 added for bug #7249 end
          // Aurora xuyong 2014-08-01 added for bug #7079 start
            case SHOW_REJECT_DIALOG:
             // Aurora xuyong 2014-08-13 modified for bug #7596 start
                showDialog(AURORA_REJECT_DIALOG_ID);
             // Aurora xuyong 2014-08-13 modified for bug #7596 end
                break;
            case DISMISS_REJECT_DIALOG:
             // Aurora xuyong 2014-08-13 modified for bug #7596 start
                dismissDialog(AURORA_REJECT_DIALOG_ID);
             // Aurora xuyong 2014-08-13 modified for bug #7596 end
             // Aurora xuyong 2014-08-20 added for bug #7778 start
                Boolean isAllResume = (Boolean)msg.obj;
                if (isAllResume != null && isAllResume.booleanValue()) {
                    ComposeMessageActivity.this.finish();
                }
             // Aurora xuyong 2014-08-20 added for bug #7778 end
                break;
          // Aurora xuyong 2014-08-01 added for bug #7079 end
            //Aurora hu junming 2014-05-05 added for bug #4655 start
            case SINGLE_FROM_FILE_MANAGER:{
                Intent intent = getIntent();
                Bundle extras = intent.getExtras();
                final String mimeType = intent.getType();
                
                
                final Uri uri = (Uri) extras.getParcelable(Intent.EXTRA_STREAM);
                runAsyncWithDialog(new Runnable() {
                    public void run() {
                        addAttachment(mimeType, uri, false);
                        //a0
                        SlideshowModel mSlideShowModel = mWorkingMessage.getSlideshow();
                        if (mSlideShowModel != null && mSlideShowModel.getCurrentSlideshowSize() > 0) {
                            mWorkingMessage.saveAsMms(false);
                        }
                        //a1
                    }
                }, R.string.adding_attachments_title);
//a0
//                SlideshowModel mSlideShowModel = mWorkingMessage.getSlideshow();
//                if (mSlideShowModel != null && mSlideShowModel.getCurrentSlideshowSize() > 0) {
//                    mWorkingMessage.saveAsMms(false);
//                }
                intent.setAction(SIGN_CREATE_AFTER_KILL_BY_SYSTEM);
//                mWorkingMessage.saveDraft(false);
//a1
                
            }
                break;
            case MULTIPLE_FROM_FILE_MANAGER:
            {
                Intent intent = getIntent();
                Bundle extras = intent.getExtras();
                final String mimeType = intent.getType();
                
                
                SlideshowModel slideShow = mWorkingMessage.getSlideshow();
                final ArrayList<Parcelable> uris = extras.getParcelableArrayList(Intent.EXTRA_STREAM);
                int currentSlideCount = slideShow != null ? slideShow.size() : 0;
                int importCount = uris.size();
                if (importCount + currentSlideCount > SlideshowEditor.MAX_SLIDE_NUM) {
                    importCount = Math.min(SlideshowEditor.MAX_SLIDE_NUM - currentSlideCount,
                            importCount);
                    Toast.makeText(ComposeMessageActivity.this,
                            getString(R.string.too_many_attachments,
                                    SlideshowEditor.MAX_SLIDE_NUM, importCount),
                                    Toast.LENGTH_LONG).show();
                }

    //m0
    /*
                // Attach all the pictures/videos off of the UI thread.
                // Show a progress alert if adding all the slides hasn't finished
                // within one second.
                // Stash the runnable for showing it away so we can cancel
                // it later if adding completes ahead of the deadline.
                final AuroraAlertDialog dialog = new AuroraAlertDialog.Builder(ComposeMessageActivity.this)
                    .setIcon(android.R.drawable.ic_dialog_alert)
                    .setTitle(R.string.adding_attachments_title)
                    .setMessage(R.string.adding_attachments)
                    .create();
                final Runnable showProgress = new Runnable() {
                    public void run() {
                        dialog.show();
                    }
                };
                // Schedule it for one second from now.
                mAttachmentEditorHandler.postDelayed(showProgress, 1000);

                final int numberToImport = importCount;
                new Thread(new Runnable() {
                    public void run() {
                        for (int i = 0; i < numberToImport; i++) {
                            Parcelable uri = uris.get(i);
                            addAttachment(mimeType, (Uri) uri, true);
                        }
                        // Cancel pending show of the progress alert if necessary.
                        mAttachmentEditorHandler.removeCallbacks(showProgress);
                        dialog.dismiss();
                    }
                }, "addAttachment").start();
    */
                // Attach all the pictures/videos asynchronously off of the UI thread.
                // Show a progress dialog if adding all the slides hasn't finished
                // within half a second.
                final int numberToImport = importCount;
                Log.i(TAG, "numberToImport: " + numberToImport);
                runAsyncWithDialog(new Runnable() {
                    public void run() {
                        mToastCountForResizeImage = 0;
                        //gionee gaoj 2012-6-18 added for CR00625724 start
                        if (MmsApp.mGnMessageSupport) {
                            mShouldMultiAttachThreadStop = false;
                        }
                        //gionee gaoj 2012-6-18 added for CR00625724 end
                        //ginoee gaoj 2012-6-6 modified for CR00625724 start
                        for (int i = 0; i < numberToImport 
                            && mShouldMultiAttachThreadStop == false; i++) {
                            //ginoee gaoj 2012-6-6 modified for CR00625724 end
                            Parcelable uri = uris.get(i);

                            String scheme = ((Uri)uri).getScheme();
                            if (scheme != null && scheme.equals("file")) {
                                // change "file://..." Uri to "Content://...., and attemp to add this attachment"
                                addFileAttachment(mimeType, (Uri)uri, true);  
                            } else {
                                addAttachment(mimeType, (Uri) uri, true);
                            }
                        }
                        mToastCountForResizeImage = 0;
                        SlideshowModel mSlideShowModel = mWorkingMessage.getSlideshow();
                        if (mSlideShowModel != null && mSlideShowModel.size() > 0) {
                            mWorkingMessage.saveAsMms(false);
                        }
//                        msg.saveDraft(false);
                    }
                }, R.string.adding_attachments_title);
                intent.setAction(SIGN_CREATE_AFTER_KILL_BY_SYSTEM);
            }
                break;
            //Aurora hu junming 2014-05-05 added for bug #4655 end
            case CALC_MESSAGE_LAYOUT_HEIGHT:
                handleAutoRegulationMessageLayoutHeight();
                break;
            case SYNC_RECIPIENTS_CONTACTS:
                mWorkingMessage.syncWorkingRecipients();
             // Aurora xuyong 2014-06-07 added for bug #5071 start
                mConversation.updateReceipients();
             // Aurora xuyong 2014-06-07 added for bug #5071 start
                gnUpdateTitle(mConversation.getRecipients());
                break;
            case SHOW_NO_SIMCARD_TOAST:
                Toast.makeText(ComposeMessageActivity.this, getString(R.string.gn_no_sim_card), Toast.LENGTH_SHORT).show();
                break;
          // Aurora xuyong 2014-06-17 added for bug #5825 start
            case START_QUERY_AFTER_CONTACT_CHANGED:
                startMsgListQuery(0);
                updateSendButtonState();
                // Aurora xuyong 2015-11-05 added for bug #17082 start
                drawBottomPanel(true);
                // Aurora xuyong 2015-11-05 added for bug #17082 end 
                break;
          // Aurora xuyong 2014-06-17 added for bug #5825 end
          // Aurora xuyong 2014-06-14 added for bug #4395 start
            case SHOW_INPUTMETHOD_DELAY:
                final Object obj = msg.obj;
                new Thread(new Runnable() {
                    
                    @Override
                    public void run() {
                        try
                        {
                            Thread.currentThread().sleep(DELAY_HANDLE_DURATION);
                        } catch(InterruptedException e) {
                            
                        }
                        Message newMsg = Message.obtain(mHandler, SHOW_INPUTMETHOD);
                        newMsg.obj = obj;
                        newMsg.sendToTarget();
                    }
                    
                }).start();
                break;
            case SHOW_INPUTMETHOD:
                showInputMethod((View)(msg.obj));
                Message hamsg = Message.obtain(mHandler, HIDDEN_ATTACHMENTS);
                hamsg.sendToTarget();
                break;
            case HIDDEN_ATTACHMENTS:
                hideAttachmentSlideView();
                break;
          // Aurora xuyong 2014-06-14 added for bug #4395 end
            case SHOW_ATTACHMENTS_DELAY:
                new Thread(new Runnable() {
                    
                    @Override
                    public void run() {
                        try
                        {
                            Thread.currentThread().sleep(DELAY_HANDLE_DURATION);
                        } catch(InterruptedException e) {
                            
                        }
                        Message msg = Message.obtain(mHandler, SHOW_ATTACHMENTS);
                        msg.sendToTarget();
                    }
                    
                }).start();
                break;
            case SHOW_ATTACHMENTS:
                showAttachmentSlideView();
             // Aurora xuyong 2014-06-14 added for bug #4395 start
                Message hiMsg = Message.obtain(mHandler, HIDDEN_INPUTMETHOD);
                hiMsg.sendToTarget();
             // Aurora xuyong 2014-06-14 added for bug #4395 end
                break;
          // Aurora xuyong 2014-06-14 added for bug #4395 start
            case HIDDEN_INPUTMETHOD:
                hideInputMethod();
                break;
          // Aurora xuyong 2014-06-14 added for bug #4395 end
            }
            /*if (msg.what == CALC_MESSAGE_LAYOUT_HEIGHT) {
                handleAutoRegulationMessageLayoutHeight();
            //Gionee <zhouyj> <2013-07-15> add for CR00835703 begin
            } else if (msg.what == SYNC_RECIPIENTS_CONTACTS) {
                mWorkingMessage.syncWorkingRecipients();
                gnUpdateTitle(mConversation.getRecipients());
            //Gionee <zhouyj> <2013-07-15> add for CR00835703 end
            // Aurora xuyong 2013-12-28 modified for aurora's new feature start
            } else if (msg.what == SHOW_NO_SIMCARD_TOAST) {
                Toast.makeText(ComposeMessageActivity.this, getString(R.string.gn_no_sim_card), Toast.LENGTH_SHORT).show();
            } else if (msg.what == SHOW_ATTACHMENTS) {
                Thread thread = new Thread(new Runnable() {
                    
                    @Override
                    public void run() {
                        try
                        {
                            Thread.currentThread().sleep(DELAY_HANDLE_DURATION);
                        } catch(InterruptedException e) {
                            
                        }
                        Message msg = Message.obtain(mHandler, SHOW_ATTACHMENTS_DELAY);
                        msg.sendToTarget();
                    }
                    
                });
                thread.start();
                //showAttachmentSlideView();
            } else if (msg.what == SHOW_ATTACHMENTS_DELAY) {
                showAttachmentSlideView();
            }
            // Aurora xuyong 2013-12-28 modified for aurora's new feature end*/
            // Aurora xuyong 2014-03-07 added for bug #2855 end
        };
    };
    //Gionee <zhouyj> <2013-06-29> modify for CR00803744 end
    //Gionee <guoyx> <2013-05-15> modified for CR00796160 begin
    private final Runnable hideToolBar = new Runnable() {
        public void run() {
            if (mRegularlyToolBar != null) {
                mRegularlyToolBar.hide();
            }
        }
    };
    //Gionee <guoyx> <2013-05-15> modified for CR00796160 end

    private void postDelay() {
        mHandler.removeCallbacks(hideToolBar);
        mHandler.postDelayed(hideToolBar, 3000);
    }
    //gionee zhouyj 2012-08-16 add for CR00678252 end 

    //gionee gaoj 2012-9-11 added for CR00687379 start
    private boolean mIsShowSIMIndicator = true;
    public void OnSimInforChanged() {
        Log.i(MmsApp.LOG_TAG, "OnSimInforChanged(): Composer");
        // show SMS indicator
        if (!isFinishing() && mIsShowSIMIndicator) {
            Log.i(MmsApp.LOG_TAG, "Hide current indicator and show new one.");
            GnStatusBarManager.hideSIMIndicator(mStatusBarManager, mComponentName); 
            GnStatusBarManager.showSIMIndicator(mStatusBarManager, mComponentName, GnSettings.System.SMS_SIM_SETTING);
        }
    }
    //gionee gaoj 2012-9-11 added for CR00687379 end
    // gionee lwzh modify for CR00774362 20130227 begin
    /*private void initMultiSelect() {
        if (mGnmultiSelectStub != null) {
            return;
        }
        
        mGnmultiSelectStub = (ViewStub) findViewById(R.id.gn_multi_select_stub);

        if (mGnmultiSelectStub != null) {
            View parent = mGnmultiSelectStub.inflate();

            LinearLayout mbottomLayout = (LinearLayout)parent.findViewById(R.id.gn_multi_menu);
            if (MmsApp.mTransparent) {
                mbottomLayout.setBackgroundDrawable(getResources().getDrawable(R.drawable.gn_menu_bg));
            } else if (MmsApp.mDarkTheme) {
                mbottomLayout.setBackgroundDrawable(getResources().getDrawable(R.drawable.gn_menu_dark_bg));
            } else if (MmsApp.mLightTheme) {
                mbottomLayout.setBackgroundDrawable(getResources().getDrawable(R.drawable.gn_menu_light_bg));
            }
            mDeleteImageButton = (GnImageTextButton)parent.findViewById(R.id.gn_com_delete);
            mDeleteImageButton.setOnClickListener(this);
            mDeleteImageButton.setEnabled(false);
            mDeleteImageButton.setImageTextEnabled(false);

//            mStarImageButton = (ImageButton)parent.findViewById(R.id.gn_com_star);
//            mStarImageButton.setOnClickListener(this);
//            mStarImageButton.setEnabled(false);

            mCopyImageButton = (GnImageTextButton)parent.findViewById(R.id.gn_com_copy);
            mCopyImageButton.setOnClickListener(this);
            mCopyImageButton.setEnabled(false);
            mCopyImageButton.setImageTextEnabled(false);

            mForwardImageButton = (GnImageTextButton)parent.findViewById(R.id.gn_com_forward);
            mForwardImageButton.setOnClickListener(this);
            mForwardImageButton.setEnabled(false);
            mForwardImageButton.setImageTextEnabled(false);

            mMoreImageButton = (GnImageTextButton)parent.findViewById(R.id.gn_com_more);
            mMoreImageButton.setOnClickListener(this);
            mMoreImageButton.setEnabled(false);
            mMoreImageButton.setImageTextEnabled(false);

            mDeleteImageButton.setOnLongClickListener(this);
//            mStarImageButton.setOnLongClickListener(this);
            mCopyImageButton.setOnLongClickListener(this);
            mForwardImageButton.setOnLongClickListener(this);
        }
        
        if (MmsApp.mLightTheme) {
            mDeleteImageButton.setImageResource(R.drawable.gn_com_delete_unuse_bg);
            mCopyImageButton.setImageResource(R.drawable.gn_com_copy_unuse_bg);
            mForwardImageButton.setImageResource(R.drawable.gn_com_forward_unuse_bg);
            mMoreImageButton.setImageResource(R.drawable.gn_com_more_unuse_bg);
        } else if (MmsApp.mDarkStyle) {
            mDeleteImageButton.setImageResource(R.drawable.gn_com_delete_unuse_dark_bg);
            mCopyImageButton.setImageResource(R.drawable.gn_com_copy_unuse_dark_bg);
            mForwardImageButton.setImageResource(R.drawable.gn_com_forward_unuse_dark_bg);
            mMoreImageButton.setImageResource(R.drawable.gn_com_more_unuse_dark_bg);
        }
    }*/
    
    private void initMultiTabLayout() {
        //ViewStub stub = (ViewStub)findViewById(R.id.gn_custom_choose_tab);
        //if (stub != null) {
            //View stubView = stub.inflate();
            //mMultiTablLayout = (LinearLayout) stubView.findViewById(R.id.gn_custom_title_root);

//            ImageButton icbackButton = (ImageButton) mMultiTablLayout.findViewById(R.id.gn_ic_ab_back);
//            icbackButton.setOnClickListener(new View.OnClickListener() {
//                @Override
//                public void onClick(View v) {
//                    // TODO Auto-generated method stub
//                    onFinishMultiChoose();
//                }
//            });
            // Aurora xuyong 2013-09-13 modified for aurora's new feature start
            /*mCountTitle = (TextView) findViewById(R.id.aurora_select_back);
            mCountTitle.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    if( mMsgListAdapter.mIsDeleteMode) {
                        onFinishMultiChoose();
                        return;
                    }
                }
            });*/
            // Aurora xuyong 2014-03-21 modified for aurora's new feature start
            TextView cancelBatchMode = (TextView)mAuroraActionBar.getSelectLeftButton();
            // Aurora xuyong 2014-03-21 modified for aurora's new feature end
            cancelBatchMode.setOnClickListener(new View.OnClickListener() {
                 @Override
                 public void onClick(View v) {
                     onFinishMultiChoose ();
                 }
            }); 
            // Aurora xuyong 2014-03-21 modified for aurora's new feature start
            mSelectAll = (TextView)mAuroraActionBar.getSelectRightButton();
            // Aurora xuyong 2014-03-21 modified for aurora's new feature end
            // Aurora xuyong 2013-09-13 modified for aurora's new feature end
            mSelectAll.setOnClickListener(new View.OnClickListener() {
                
                @Override
                public void onClick(View v) {
                    // TODO Auto-generated method stub
                    // Aurora xuyong 2013-11-29 modified for bug #978 start
                    // Aurora xuyong 2013-12-11 modified for aurora's new feature start
                    if (mMsgListAdapter.getSelectedNumber() > 0 && mMsgListAdapter.getSelectedNumber() >= mMsgListAdapter.getChildCount()) {
                    // Aurora xuyong 2013-12-11 modified for aurora's new feature end
                    // Aurora xuyong 2013-11-29 modified for bug #978 end
                        isSelectedAll = false;
                    } else {
                        isSelectedAll = true;
                    }
                    // Aurora xuyong 2013-09-13 modified for aurora's new feature start
                    if (isSelectedAll) {
                        // Aurora xuyong 2013-09-18 modified for aurora's new feature start
                        mSelectAll.setText(ComposeMessageActivity.this.getResourcesString(R.string.no_select_all));
                       // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 start
                        mMsgListAdapter.initListMaps(isSelectedAll);
                       // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 end
                        // Aurora xuyong 2013-09-18 modified for aurora's new feature end
                    } else {
                        mSelectAll.setText(ComposeMessageActivity.this.getResourcesString(R.string.select_all));
                       // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 start
                        mMsgListAdapter.initListMaps(!isSelectedAll);
                       // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 end
                    }
                    // Aurora xuyong 2013-09-13 modified for aurora's new feature end
                    markCheckedState(isSelectedAll);
                    // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 start
                    mSelectMap = mMsgListAdapter.getSelectedMap();
                    // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 end
                    if (isSelectedAll) {
                        for(int i = 0; i < mSelectMap.size(); i++) {
                            mSelectMap.put(i, true);
                        }
                    }else {
                        for(int i = 0; i < mSelectMap.size(); i++) {
                            mSelectMap.put(i, false);
                        }
                    }
                    // Aurora xuyong 2014-08-22 deleted for bug #7739 & #7853 start
                    //mMsgListAdapter.initStaredMaps(mMsgListAdapter.getCursor());
                    // Aurora xuyong 2014-08-22 deleted for bug #7739 & #7853 end
                    /*mDeleteImageButton.setEnabled(mMsgListAdapter.getSelectedNumber() >= 1 ? true : false);
                    mDeleteImageButton.setImageTextEnabled(mMsgListAdapter.getSelectedNumber() >= 1 ? true : false);

                    if (MmsApp.mLightTheme) {
                        mDeleteImageButton.setImageResource(mMsgListAdapter.getSelectedNumber() >= 1 ? R.drawable.gn_com_delete_bg : R.drawable.gn_com_delete_unuse_bg);
                    } else {
                        mDeleteImageButton.setImageResource(mMsgListAdapter.getSelectedNumber() >= 1 ? R.drawable.gn_com_delete_dark_bg : R.drawable.gn_com_delete_unuse_dark_bg);
                    }
                    setMulImageButton(mMsgListAdapter.getSelectedNumber() >= 1 ? true : false);*/
                    // Aurora xuyong 2014-08-22 deleted for bug #7739 & #7853 start
                    //updateSelectionMenu();
                    // Aurora xuyong 2014-08-22 deleted for bug #7739 & #7853 end
                    // Aurora xuyong 2013-10-23 added for aurora;s nea feature start
                    refreshBottomMenu();
                    // Aurora xuyong 2013-10-23 added for aurora;s nea feature end
                    //setDeleteMenuState(mMsgListAdapter.getSelectedNumber() >= 1);
                    //setMulImageButton(mMsgListAdapter.getSelectedNumber() >= 1 ? true : false);
                    //onPrepareOptionsMenu(mMenu);
                }
            });
       // }
//        if (MmsApp.mLightTheme) {
//            mMultiTablLayout.setBackgroundResource(R.drawable.gn_tab_self_light_bg);
//        } else if (MmsApp.mDarkStyle) {
//            mMultiTablLayout.setBackgroundResource(MmsApp.mTransparent ? R.drawable.gn_tab_self_bg : R.drawable.gn_tab_self_dark_bg);
//        }
    }
    // gionee lwzh modify for CR00774362 20130227 end
    
   //gionee gaoj 2012-9-20 added for CR00699291 start
    private void gndrawTopPanel() {
        if (mMsgListAdapter.mIsDeleteMode) {
            //Aurora xuyong 2013-09-20 deleted for aurora's new feature start
            //mTitleLayout.setVisibility(View.GONE);
            //Aurora xuyong 2013-09-20 deleted for aurora's new feature end
            
            //if (mMultiTablLayout == null) {
                initMultiTabLayout();
            //}
            //mMultiTablLayout.setVisibility(View.VISIBLE);
        } else {
            //if (mMultiTablLayout != null) {
            //    mMultiTablLayout.setVisibility(View.GONE);
            //}
            
            //gionee gaoj 2013-1-4 added for CR00756848 start
            if (isRecipientsEditorVisible()) {
                if (mTitleLayout != null) {
                    //Aurora xuyong 2013-09-20 deleted for aurora's new feature start
                    //mTitleLayout.setVisibility(View.GONE);
                    //Aurora xuyong 2013-09-20 deleted for aurora's new feature end
                }
                
//                mMenuMoreButton.setVisibility(View.GONE);
            } else {
                if (mTitleLayout == null) {
                    gnInitMessageTitle();
                }
                // Aurora xuyong 2014-06-19 modified for aurora's new feature start
                if (null != mTitleLayout) {
                    mTitleLayout.setVisibility(View.VISIBLE);
                }
                // Aurora xuyong 2014-06-19 modified for aurora's new feature end
//                mMenuMoreButton.setVisibility(View.VISIBLE);
            }
            //gionee gaoj 2013-1-4 added for CR00756848 end
//            boolean showingAttachment = mAttachmentEditor
//                    .update(mWorkingMessage);
        } 
    }
    // Aurora xuyong 2014-07-29 added for aurora's new feature start
    private void changedMsgContentWidth(boolean isMultiSimStubVisible) {
        if (mLayout == null) {
            return;
        }
        int topMargin = (int)(this.getResources().getDimension(R.dimen.aurora_message_content_margin_top));
        int bottomMargin = (int)(this.getResources().getDimension(R.dimen.aurora_message_content_margin_bottom));
        DisplayMetrics dm = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(dm);
        if (isMultiSimStubVisible) {
            LinearLayout.LayoutParams lp1 = new LinearLayout.LayoutParams((int)(dm.density * 206), LayoutParams.WRAP_CONTENT);
            lp1.setMargins(0, topMargin, 0, bottomMargin);
            mLayout.setLayoutParams(lp1);
            // Aurora xuyong 2014-08-05 added for aurora multisim feature start
            resetTextCounterState();
            // Aurora xuyong 2014-08-05 added for aurora multisim feature end
        } else {
            LinearLayout.LayoutParams lp2 = new LinearLayout.LayoutParams((int)(dm.density * 226), LayoutParams.WRAP_CONTENT);
            lp2.setMargins(0, topMargin, 0, bottomMargin);
            mLayout.setLayoutParams(lp2);
          // Aurora xuyong 2014-08-05 added for aurora multisim feature start
            resetTextCounterState();
          // Aurora xuyong 2014-08-05 added for aurora multisim feature end
        }
    }
    // Aurora xuyong 2014-07-29 added for aurora's new feature end
    // Aurora xuyong 2015-03-03 modified for bug #11860 start
    private void gndrawBottomPanel(boolean needResetTextSelection) {
    // Aurora xuyong 2015-03-03 modified for bug #11860 end
        resetCounter();

        if (mWorkingMessage != null) {
            if (mWorkingMessage.hasSubject() || mWorkingMessage.hasAttachment()
                    || mWorkingMessage.hasSlideshow()) {
                gnInitAttachmentLayout();
            }
        }
        
        showSubjectEditor((mWorkingMessage.hasSubject() || mSubjectEditorNull)
                && !mMsgListAdapter.mIsDeleteMode);
        
        if (mWorkingMessage.hasSlideshow() && !mMsgListAdapter.mIsDeleteMode) {
            // Aurora xuyong 2013-11-16 modified for aurora's new feature start
            mTextEditor.setVisibility(View.VISIBLE);
            // Aurora xuyong 2013-11-16 modified for aurora's new feature end
            mBottomPanel.setVisibility(View.VISIBLE);
            // Aurora xuyong 2014-05-23 added for multisim feature start
            if (MmsApp.mGnMultiSimMessage) {
                // Aurora xuyong 2014-06-07 modified for bug #5449 start
                   if (mInsertedSimCount == 2) {
                // Aurora xuyong 2014-06-07 modified for bug #5449 end
                       mMultiSimStub.setVisibility(View.VISIBLE);
                   // Aurora xuyong 2014-07-29 modified for aurora's new feature start
                       changedMsgContentWidth(true);
                   // Aurora xuyong 2014-07-29 modified for aurora's new feature end
                   }
            }
            // Aurora xuyong 2014-05-23 added for multisim feature end
            /*if (mGnmultiSelectStub != null) {
                mGnmultiSelectStub.setVisibility(View.GONE);
            }*/
            
            if (mAttachmentEditor != null) {
                mAttachmentEditor.update(mWorkingMessage);
                mAttachmentEditor.requestFocus();
            }
            // Aurora xuyong 2014-07-02 added for reject feature start
            if (mIsFromReject) {
                mBottomPanel.setVisibility(View.GONE);
            }
            // Aurora xuyong 2014-07-02 added for reject feature end
            return;
        }
        //add for multi-delete
        if (mMsgListAdapter.mIsDeleteMode) {
            //Aurora xuyong 2013-09-20 deleted for aurora's new feature start
            // Aurora xuyong 2013-09-24 modified for aurora;s new feature start
            mBottomPanel.setVisibility(View.GONE);
            // Aurora xuyong 2014-05-23 added for multisim feature start
            if (MmsApp.mGnMultiSimMessage) {
             // Aurora xuyong 2014-06-07 modified for bug #5449 start
                if (mInsertedSimCount == 2) {
             // Aurora xuyong 2014-06-07 modified for bug #5449 end
                    mMultiSimStub.setVisibility(View.GONE);
                // Aurora xuyong 2014-07-29 added for aurora's new feature start
                    changedMsgContentWidth(false);
                // Aurora xuyong 2014-07-29 added for aurora's new feature end
                }
            }
            // Aurora xuyong 2014-05-23 added for multisim feature end
            // Aurora xuyong 2013-09-24 modified for aurora;s new feature end
            //Aurora xuyong 2013-09-20 deleted for aurora's new feature end
            
            if (mAttachmentEditor != null) {
                mAttachmentEditor.hideView();
            }
            /*if (mMsgListLongClick) {
                
                if (mGnmultiSelectStub == null) {
                    initMultiSelect();
                }
                
                mGnmultiSelectStub.setVisibility(View.VISIBLE);
            } else {
                mDeletePanel.setVisibility(View.VISIBLE);
                LinearLayout.LayoutParams mParams = new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);
                mParams.height = getAuroraActionBar().getHeight();
                mDeletePanel.setLayoutParams(mParams);
            }*/
            return;
        }

        mTextEditor.setVisibility(View.VISIBLE);
        /*if (mGnmultiSelectStub != null) {
            mGnmultiSelectStub.setVisibility(View.GONE);
        }*/
        if (mAttachmentEditor != null) {
            mAttachmentEditor.update(mWorkingMessage);
        }
        mBottomPanel.setVisibility(View.VISIBLE);
        // Aurora xuyong 2014-05-23 added for multisim feature start
        if (MmsApp.mGnMultiSimMessage) {
          // Aurora xuyong 2014-06-07 modified for bug #5449 start
            if (mInsertedSimCount == 2) {
          // Aurora xuyong 2014-06-07 modified for bug #5449 end
                mMultiSimStub.setVisibility(View.VISIBLE);
             // Aurora xuyong 2014-07-29 added for aurora's new feature start
                changedMsgContentWidth(true);
             // Aurora xuyong 2014-07-29 added for aurora's new feature end
            }
        }
        // Aurora xuyong 2014-05-23 added for multisim feature end
        CharSequence text = mWorkingMessage.getText();
        if (text != null && !TextUtils.isEmpty(text)) {
            mTextEditor.setTextKeepState(text);
            // Aurora xuyong 2015-03-03 modified for bug #11860 start
            if (needResetTextSelection) {
                mTextEditor.setSelection(text.length());
            }
            // Aurora xuyong 2015-03-03 modified for bug #11860 end
        } else {
//            mTextEditor.setText("");
        }
        if (mWorkingMessage.requiresMms() 
                //Gionee <guoyx> <2013-08-05> modify for CR00845227 begin
                && mWorkingMessage.hasText() //!TextUtils.isEmpty(mWorkingMessage.getText())
                //Gionee <guoyx> <2013-08-05> modify for CR00845227 end
                && mTextEditor.getLineCount() > 1
                || mWorkingMessage.hasAttachment() 
                || mWorkingMessage.hasSubject()) {
            mediaTextView.setVisibility(View.VISIBLE);
            // Aurora xuyong 2014-08-05 added for aurora multisim feature start
            if (mMultiMediaSizeInfo != null) {
                mMultiMediaSizeInfo.setVisibility(View.VISIBLE);
            }
            // Aurora xuyong 2014-08-05 added for aurora multisim feature end
        } else {
            mediaTextView.setVisibility(View.GONE);
            // Aurora xuyong 2014-08-05 added for aurora multisim feature start
            if (mMultiMediaSizeInfo != null) {
                mMultiMediaSizeInfo.setVisibility(View.GONE);
            }
            // Aurora xuyong 2014-08-05 added for aurora multisim feature end
            resetTextCounterState();
        }
        if(mSignatureEnable) {
            Editable edit = mTextEditor.getText();
            int index = mTextEditor.getText().toString().length() - mSignatureContent.length();
            if(mTextEditor.getText().toString().endsWith(mSignatureContent)) {
                Selection.setSelection(edit, index);
            }
        }
        // Aurora xuyong 2014-07-02 added for reject feature start
        if (mIsFromReject) {
            mBottomPanel.setVisibility(View.GONE);
        }
        // Aurora xuyong 2014-07-02 added for reject feature end
    }
    // Aurora xuyong 2014-02-24 added for bug #2580 start
    private boolean mNeedShowDialog = true;
    // Aurora xuyong 2014-02-24 added for bug #2580 end
    //gionee gaoj 2012-12-12 added for CR00739084 start
    private boolean isOneDeleteStar = false;
    //gionee gaoj 2012-12-12 added for CR00739084 end
    //Gionee <guoyx> <2013-06-09> modify for CR00824219 begin
    private AuroraAlertDialog gnDeleteOneMsg(Uri uri, long id) {
        String where = Mms._ID + "=" + id;
        String[] projection = new String[] { Sms.Inbox.THREAD_ID };
        Cursor queryCursor = null;
        try {
            queryCursor = Sms.query(getContentResolver(),
                        projection, where, null);
            if (queryCursor != null && queryCursor.getCount() > 0) {
                if (queryCursor.moveToFirst()) {
                    mThreadId = queryCursor.getLong(0);
                }
            }
        } finally {
            if(queryCursor != null) {
                queryCursor.close();
            }
        }

        DeleteOneMessageListener listener = new DeleteOneMessageListener(uri);

        AuroraAlertDialog.Builder builder = new AuroraAlertDialog.Builder(this);//, AuroraAlertDialog.THEME_AMIGO_FULLSCREEN);
        // Aurora xuyong 2014-07-02 added for reject feature start
        if (!mIsFromReject) {
            builder.setTitle(R.string.confirm_dialog_title);
        } else {
            builder.setTitle(R.string.aurora_delete_record_title);
        }
        // Aurora xuyong 2014-07-02 added for reject feature end
        // Aurora xuyong 2014-02-24 added for bug #2580 start
        builder.setOnDismissListener(new DialogInterface.OnDismissListener() {
            
            @Override
            public void onDismiss(DialogInterface dialog) {
                // TODO Auto-generated method stub
                mNeedShowDialog = true;
            }
        });
        // Aurora xuyong 2014-02-24 added for bug #2580 end
        builder.setCancelable(true);
        //gionee gaoj 2012-12-12 added for CR00739084 start
        // Aurora xuyong 2014-07-02 added for reject feature start
        if (!mIsFromReject) {
            if (isOneDeleteStar) {
                builder.setMessage(R.string.gn_confirm_delete_star);
            } else {
                builder.setMessage(R.string.confirm_delete_selected_messages);
            }
        } else {
            builder.setMessage(R.string.aurora_delete_record_message);
        }
        // Aurora xuyong 2014-07-02 added for reject feature end
        //gionee gaoj 2012-12-12 added for CR00739084 end
        builder.setPositiveButton(R.string.delete, listener);
        builder.setNegativeButton(R.string.no, null);
        return builder.show();
    }
    //Gionee <guoyx> <2013-06-09> modify for CR00824219 end

    private class DeleteOneMessageListener implements OnClickListener {
        private final Uri mDeleteUri;

        public DeleteOneMessageListener(Uri uri) {
            mDeleteUri = uri;
        }

        public DeleteOneMessageListener(long msgId, String type) {
            if ("mms".equals(type)) {
                mDeleteUri = ContentUris.withAppendedId(Mms.CONTENT_URI, msgId);
            } else {
                mDeleteUri = ContentUris.withAppendedId(Sms.CONTENT_URI, msgId);
            }
        }

        public void onClick(DialogInterface dialog, int whichButton) {
            // Aurora xuyong 2015-02-12 added for repoter feature start
            new TotalCount(ComposeMessageActivity.this, TotalCount.MMS_MODULE_kEY, TotalCount.MSG_DEL_RP, 1).countData();
            // Aurora xuyong 2015-02-12 added for repoter feature end
            // Aurora xuyong deleted 2013-11-29 deleted for aurora's new feature start
            onFinishMultiChoose();
            // Aurora xuyong deleted 2013-11-29 deleted for aurora's new feature end
            // Aurora yudingmin 2014-08-30 modified for bug 8029 start
            AuroraProgressDialog progressDialog = DeleteProgressDialogUtil.getProgressDialog(ComposeMessageActivity.this);
            progressDialog.setCancelable(false);
            mBackgroundQueryHandler.setProgressDialog(progressDialog);
         // Aurora yudingmin 2014-08-30 modified for bug 8029 end
            mBackgroundQueryHandler.showProgressDialog();
            mBackgroundQueryHandler.startDelete(DELETE_MESSAGE_TOKEN,
                    null, mDeleteUri, null, null);
            dialog.dismiss();
        }
    }
    //gionee gaoj 2012-9-20 added for CR00699291 end

    //gionee gaoj 2012-9-21 added for CR00687379 start
 // New feature for SimIndicator begin
    private StatusBarManager mStatusBarMgr = null;
    private boolean mShowSimIndicator = false;
    private SimIndicatorBroadcastReceiver mSinIndicatorReceiver = null;
    // Aurora xuyong 2013-12-06 added for bug #1117 start
    private HomeButtonWatcher mHomeButtonWatcher = null;
    // Aurora xuyong 2013-12-06 added for bug #1117 end

    private class SimIndicatorBroadcastReceiver extends BroadcastReceiver {
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();
            if (MmsApp.mGnMtkGeminiSupport) {
                Log.d("Test", "SimIndicatorBroadcastReceiver, onReceive ");
                if (action.equals(GnIntent.ACTION_SMS_DEFAULT_SIM_CHANGED)) {
                    Log.d("Test", "SimIndicatorBroadcastReceiver, onReceive, mShowSimIndicator= "
                            + mShowSimIndicator);
                    if (true == mShowSimIndicator) {
                        setSimIndicatorVisibility(true);
                    }
                }
            }
        }
    }
    // Aurora xuyong 2013-12-06 added for bug #1117 start
    final String SYSTEM_DIALOG_REASON_KEY = "reason";  
    final String SYSTEM_DIALOG_REASON_HOME_KEY = "homekey";
    // Aurora xuyong 2015-10-08 added for aurora's new feature start
    final String SYSTEM_DIALOG_REASON_RECENT_APPS = "recentapps";
    // Aurora xuyong 2015-10-08 added for aurora's new feature end
    
    private class HomeButtonWatcher extends BroadcastReceiver {
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();
            // Aurora xuyong 2015-10-21 modified for bug #16836 start
            if (action != null && action.equals(Intent.ACTION_CLOSE_SYSTEM_DIALOGS)) {
            // Aurora xuyong 2015-10-21 modified for bug #16836 end 
                String reason = intent.getStringExtra(SYSTEM_DIALOG_REASON_KEY);  
                if (reason != null) {   
                    if (reason.equals(SYSTEM_DIALOG_REASON_HOME_KEY)) {
                        // Aurora xuyong 2014-01-08 modified for aurora's new feature start
                        if (mContactContainer != null && mContactContainer.getVisibility() == View.VISIBLE) {
                            // Aurora xuyong 2014-03-06 modified for bug #2819 start
                            // Aurora xuyong 2014-03-11 modified for aurora's new feature start
                            if ((mContactContainer != null && mContactContainer.getRecipientCount() > 0) || (mWorkingMessage != null && (mWorkingMessage.hasAttachment()
                                    || mWorkingMessage.hasText() || mWorkingMessage.hasSubject()))) {
                            // Aurora xuyong 2014-03-11 modified for aurora's new feature end
                            // Aurora xuyong 2014-03-06 modified for bug #2819 end
                                return;
                            }
                        }
                        // Aurora xuyong 2014-01-08 modified for aurora's new feature end
                        if( mMsgListAdapter.mIsDeleteMode) {
                            //onFinishMultiChoose();
                            return;
                        }
                        if (mIsLeMei) {
                            if (mWorkingMessage != null) {
                                mWorkingMessage.discard();
                            }
                           // Aurora xuyong 2014-07-14 added for aurora's new feature start
                            if (operConvMap != null && operConvMap.size() > 0) {
                                deleteConvByIds(operConvMap);
                            }
                           // Aurora xuyong 2014-07-14 added for aurora's new feature end
                            finish();
                        } else {
                            // Aurora xuyong 2014-03-11 deleted for aurora's new feature start
                            /*if (mAttachmentSlideView != null
                                    && View.VISIBLE == mAttachmentSlideView.getVisibility()) {
                                if(mAttachmentSlideViewCurrent == mAttachmentSlideViewHome){
                                    // Aurora xuyong 2014-03-06 added for aurora's new feature start
                                    if (mAddButton != null) {
                                        mAddButton.setImageResource(R.drawable.aurora_insert_attch_selector);
                                    }
                                    // Aurora xuyong 2014-03-06 added for aurora's new feature end
                                    mAttachmentSlideView.setVisibility(View.GONE);
                                }else{
                                    showAnAttachmentSlide(mAttachmentSlideViewHome);
                                }
                                return;
                            }*/
                            // Aurora xuyong 2014-03-11 deleted for aurora's new feature end
                            if (FeatureOption.MTK_SEND_RR_SUPPORT) {
                                checkAndSendReadReport();
                            }
                            // Aurora yudingmin 2014-10-25 modify for bug #9343 start
                            final Context appContext = getApplicationContext();
                            exitComposeMessageActivity(new Runnable() {
                                public void run() {
                                 // Aurora xuyong 2014-07-14 added for aurora's new feature start
                                    if (operConvMap != null && operConvMap.size() > 0) {
                                        deleteConvByIds(appContext, operConvMap);
                                    }
                                 // Aurora xuyong 2014-07-14 added for aurora's new feature end
                                }
                            // Aurora xuyong 2014-03-06 modified for bug #2819 start
                            }, false);
                            // Aurora xuyong 2014-03-06 modified for bug #2819 end
                            // Aurora yudingmin 2014-10-25 modify for bug #9343 end
                        }
                    }
                // Aurora xuyong 2015-10-08 added for aurora's new feature start
                // Aurora xuyong 2015-10-22 modified for bug #16847 start
                } else if (reason != null && reason.equals(SYSTEM_DIALOG_REASON_RECENT_APPS)) {
                // Aurora xuyong 2015-10-22 modified for bug #16847 end
                	dismissPops();
                }
                // Aurora xuyong 2015-10-08 added for aurora's new feature end
           }
       }
    }
    // Aurora xuyong 2013-12-06 added for bug #1117 end

    void setSimIndicatorVisibility(boolean visible) {
        if(mStatusBarMgr == null)
            mStatusBarMgr = (StatusBarManager) getSystemService(Context.STATUS_BAR_SERVICE);
                // lwzh OMIGO_TODO
        if (visible)
            GnStatusBarManager.showSIMIndicator(mStatusBarMgr, getComponentName(), GnSettings.System.SMS_SIM_SETTING);
        else
            GnStatusBarManager.hideSIMIndicator(mStatusBarMgr, getComponentName());
    }
    // New feature for SimIndicator end
    //gionee gaoj 2012-9-21 added for CR00687379 end

    //gionee gaoj 2012-9-25 added for CR00693772 start
    private AuroraProgressDialog getSendProgressDialog() {
        //Gionee <guoyx> <2013-07-03> modify for CR00829344 begin
        AuroraProgressDialog dialog = new AuroraProgressDialog(this);
        dialog.setProgressStyle(AuroraProgressDialog.STYLE_SPINNER);
        dialog.setMessage(this.getResources().getString(R.string.gn_sending));
        dialog.setMax(1); /* default is one complete */
        //Gionee <guoyx> <2013-07-03> modify for CR00829344 end
        return dialog;
    }
    //gionee gaoj 2012-9-25 added for CR00693772 end

    //gionee wangym 2012-11-22 add for CR00735223 start
    @Override
    public boolean  dispatchTouchEvent(MotionEvent event){

        boolean ret = false;
        // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
        /*if(mIsCmcc && mScaleDetector != null){
                //ret = mScaleDetector.onTouchEvent(event);
        }*/
        // Aurora xuyong 2013-09-13 deleted for aurora's new feature end


        if(!ret){
            ret = super.dispatchTouchEvent(event); 
        }
        return ret;
    }
    private void changeTextSize(float size){
        if(mTextEditor != null){
            mTextEditor.setTextSize(size);
        }
        //gionee gaoj 2013-1-14 added for CR00762701 start
        if (null != mSubjectTextEditor && 0 != mSubjectTextEditor.length()) {
            mSubjectTextEditor.setTextSize(size);
        }
        //gionee gaoj 2013-1-14 added for CR00762701 end
        if(mMsgListAdapter != null){
            mMsgListAdapter.setTextSize(size);
        }
         if(mMsgListView != null && mMsgListView.getVisibility() == View.VISIBLE){
            int count = mMsgListView.getChildCount();
            for(int i = 1; i < count; i++){
                MessageListItem item =  (MessageListItem)mMsgListView.getChildAt(i);
                if(item != null){
                    item.setBodyTextSize(size);
                }
            }
        }
        autoRegulationMessageLayoutHeight();
    }

    /*public class ScaleListener implements OnScaleListener{

        public boolean onScaleStart(ScaleDetector detector) {
            Log.i(TAG, "onScaleStart -> mTextSize = " + mTextSize);
            return true;
        }

        public void onScaleEnd(ScaleDetector detector) {
            Log.i(TAG, "onScaleEnd -> mTextSize = " + mTextSize);

            //save current value to preference
            MessageUtils.setTextSize(ComposeMessageActivity.this, mTextSize);
        }

        public boolean onScale(ScaleDetector detector) {

            float size = mTextSize * detector.getScaleFactor();

            if(Math.abs(size - mTextSize) < MIN_ADJUST_TEXT_SIZE){
                return false;
            }
            if(size < MIN_TEXT_SIZE){
                size = MIN_TEXT_SIZE;
            }
            if(size > MAX_TEXT_SIZE){
                size = MAX_TEXT_SIZE;
            }
            if(size != mTextSize){
                changeTextSize(size);
                mTextSize = size;
            }
            return true;
        }
    };*/
    //gionee wangym 2012-11-22 add for CR00735223 end

    //gionee gaoj 2013-3-26 added for CR00789078 start
/*    final SensorEventListener myListener = new SensorEventListener() {

        public void onSensorChanged(SensorEvent sensorEvent) {
            //Gionee <zhouyj> <2013-04-20> add for CR00798593 start
            Log.i(TAG, "onSensorChanged   mSsOpen=" + mSsOpen + ",mSensorDailFeature=" + mSensorDailFeature);
            //Gionee <zhouyj> <2013-04-20> add for CR00798593 end
            if (!mSsOpen || !mSensorDailFeature) {
                return;
            }
            
            if (null != mMsgListAdapter && mMsgListAdapter.mIsDeleteMode) {
                //Gionee <zhouyj> <2013-04-20> add for CR00798593 start
                Log.i(TAG, "onSensorChanged   is delete mode,return");
                //Gionee <zhouyj> <2013-04-20> add for CR00798593 end
                return;
            }
            if (sensorEvent != null && 1 == sensorEvent.values[0]) {
                String number = null;
                if (isRecipientsEditorVisible() && mContactContainer != null && mContactContainer.getContactsCount() == 1 && isRecipientCallable()) {
                    number = mContactContainer.getNumbers().get(0);
                } else if (!isRecipientsEditorVisible() && mConversation != null && mConversation.getRecipients().size() == 1 && isRecipientCallable()){
                    number = mConversation.getRecipients().serialize();
                }
                //Gionee <zhouyj> <2013-04-20> add for CR00798593 start
                Log.i(TAG, "onSensorChanged   number=" + number);
                //Gionee <zhouyj> <2013-04-20> add for CR00798593 end
                if (number != null && !number.equals("")) {
                    Intent intent = new Intent(Intent.ACTION_CALL_PRIVILEGED, Uri.fromParts("tel", number, null));
                    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                    
                    //gionee gaoj 2013-4-2 added for CR00792780 start
                    intent.setComponent(new ComponentName("com.android.contacts",
                    "com.android.contacts.activities.DialtactsActivity"));
                    //gionee gaoj 2013-4-2 added for CR00792780 end
                    
                    intent.putExtra("autoIpDial", true);
                    intent.putExtra("sensoryDial", true);
                    intent.setClassName("com.android.phone", "com.android.phone.OutgoingCallBroadcaster");
                    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
                    startActivity(intent);
                }
            }

        }

        @Override
        public void onAccuracyChanged(Sensor sensor, int accuracy) {
            // TODO Auto-generated method stub

        };
    };*/
    //gionee gaoj 2013-3-26 added for CR00789078 end
    
    //Gionee <zhouyj> <2013-05-15> add for CR00810588 begin
    private void stopVoiceHelperService() {
        Log.i("MmsVoiceHelper", "stopVoiceHelperService");
        stopService(new Intent("gn.voice.service.TTSService"));
    }
    
    private void setStopServiceBtnGone() {
        //Gionee <zhouyj> <2013-08-07> modify for CR00850690 begin
        MessageListItem item = null;
        int count = mMsgListView.getChildCount();
        for (int i = 0; i < count; i++) {
            if (mMsgListView.getChildAt(i) instanceof MessageListItem) {
                item = (MessageListItem) mMsgListView.getChildAt(i);
                item.setCurrPlaying(false);
            }
        }
          // Aurora liugj 2013-10-30 modified for fix bug-338 start 
        //mMsgListAdapter.notifyDataSetChanged();
          // Aurora liugj 2013-10-30 modified for fix bug-338 end
        //Gionee <zhouyj> <2013-08-07> modify for CR00850690 end
    }
    
    private final BroadcastReceiver mVoiceHelpServiceStopReceiver = new BroadcastReceiver() {
        public void onReceive(Context context, Intent intent) {
            Log.i(TAG, "mVoiceHelpServiceStopReceiver   onReceive");
            if (!isFinishing()) {
                setStopServiceBtnGone();
            }
        }
    };
    
    //Gionee <zhouyj> <2013-07-05> add for CR00827955 begin
    private boolean isResume() {
        try {
            Field field = getClass().getSuperclass().getSuperclass().getDeclaredField("mResumed");
            if (field != null) {
                field.setAccessible(true);
                return field.getBoolean(ComposeMessageActivity.this);
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
        return false;
    }
    //Gionee <zhouyj> <2013-07-05> add for CR00827955 end
    //Gionee <zhouyj> <2013-05-15> add for CR00810588 end
    
    //Gionee <Gaoj> <2013-05-20> add for CR00809727 begin
    // Aurora xuyong 2014-07-26 modified for bug #6844 start
    private synchronized void addAudioAsync(final Uri uri, final boolean append) {
    // Aurora xuyong 2014-07-26 modified for bug #6844 end
        runAsyncWithDialog(new Runnable() {
            public void run() {
                if (uri != null) {
                    addAudio(uri, append);
                    mWorkingMessage.saveDraft(false);
                }
           }
        }, R.string.adding_attachments_title);
    }
    //Gionee <Gaoj> <2013-05-20> add for CR00809727 end
    //Gionee <guoyx> <2013-07-09> add for CR00829847 begin
    private void hideAttachmentSlideView() {
        if (mAttachmentSlideView != null 
                && mAttachmentSlideView.getVisibility() == View.VISIBLE) {
            // Aurora xuyong 2014-03-06 added for aurora's new feature start
            if (mAddButton != null) {
                mAddButton.setImageResource(R.drawable.aurora_insert_attch_selector);
            }
            // Aurora xuyong 2014-03-06 added for aurora's new feature end
            mAttachmentSlideView.setVisibility(View.GONE);
        }
    }
    //Gionee <guoyx> <2013-07-09> add for CR00829847 end
    
    //Gionee <guoyx> <2013-08-02> add for CR00845227 begin
    private void setMediaTextSizeInfo(CharSequence sub, CharSequence text) {
        int totalSize = 0;

        if (sub != null) {
            totalSize += sub.toString().getBytes().length;
        }

        if (text != null) {
            totalSize += text.toString().getBytes().length;
        }

        if (totalSize == 0) {
            mediaTextView.setText("");
            // Aurora xuyong 2014-08-05 added for aurora multisim feature start
            if (mMultiMediaSizeInfo != null) {
                mMultiMediaSizeInfo.setText("");
            }
            // Aurora xuyong 2014-08-05 added for aurora multisim feature end
        } else {
            int sizeShow = (totalSize - 1)/1024 + 1;
            String info = sizeShow + "K/" + MmsConfig.getUserSetMmsSizeLimit(false) + "K";
            mediaTextView.setText(info);
            // Aurora xuyong 2014-08-05 added for aurora multisim feature start
            if (mMultiMediaSizeInfo != null) {
                mMultiMediaSizeInfo.setText(info);
            }
            // Aurora xuyong 2014-08-05 added for aurora multisim feature end
        }
    }
    //Gionee <guoyx> <2013-08-02> add for CR00845227 end

  // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
    /* private View mMsgListViewHeader;
    private AuroraButton mNewRecipientsButton;
    private AuroraButton mAddRecipientsButton;
    private void addListHeaderView() {
        mMsgListViewHeader = View.inflate(ComposeMessageActivity.this,
                R.layout.gn_compose_list_header, null);
        if (mMsgListViewHeader != null) {
            mMsgListView.addHeaderView(mMsgListViewHeader);
        }
        mNewRecipientsButton = (AuroraButton) findViewById(R.id.gn_new_recipients);
        mNewRecipientsButton.setOnClickListener(new View.OnClickListener() {
            
            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub

                Contact contact = mConversation.getRecipients().get(0);
                Intent intent = new Intent(Intent.ACTION_INSERT,Contacts.CONTENT_URI);
                intent.setComponent(new ComponentName("com.android.contacts",
                    "com.android.contacts.activities.ContactEditorActivity"));
                if (Mms.isEmailAddress(contact.getNumber())) {
                    intent.putExtra(Insert.EMAIL, contact.getNumber());
                } else {
                    intent.putExtra(Insert.PHONE, contact.getNumber());
                }
                startActivity(intent);
            }
        });
        mAddRecipientsButton = (AuroraButton) findViewById(R.id.gn_add_recipients);
        mAddRecipientsButton.setOnClickListener(new View.OnClickListener() {
            
            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub

                Contact contact = mConversation.getRecipients().get(0);
                Intent newintent = new Intent(Intent.ACTION_INSERT_OR_EDIT);
                newintent.setComponent(new ComponentName("com.android.contacts",
                    "com.android.contacts.activities.ContactSelectionActivity"));
                if (Mms.isEmailAddress(contact.getNumber())) {
                    newintent.putExtra(Insert.EMAIL, contact.getNumber());
                } else {
                    newintent.putExtra(Insert.PHONE, contact.getNumber());
                }
                newintent.setType(People.CONTENT_ITEM_TYPE);
                startActivity(newintent);
            }
        });
    } */
    // Aurora xuyong 2013-09-13 deleted for aurora's new feature end
    
    private void setBatchOperation() {
       // Aurora xuyong 2015-05-08 added for aurora's new feature start
        // Aurora xuyong 2015-05-19 modified for aurora's new feature start
    	if (!mIsFromReject) {
    		mMsgListView.setPadding(0, mMsgListView.getPaddingTop(), 0, (int)getResources().getDimension(R.dimen.aurora_cl_batch_bottom_padding));
    	}
        // Aurora xuyong 2015-05-19 modified for aurora's new feature end
       // Aurora xuyong 2015-05-08 added for aurora's new feature end
       //Aurora xuyong 2014-08-16 added for aurora's new feature start
        mMsgListAdapter.mIsDeleteMode = true;
       //Aurora xuyong 2014-08-16 added for aurora's new feature end
        // Aurora xuyong 2013-01-09 added for aurora's new feature start
        mStayPos = true;
        // Aurora xuyong 2013-01-09 added for aurora's new feature end
        // Aurora xuyong 2013-09-17 deleted for aurora's new feature start
        // Aurora xuyong 2013-09-23 added for aurora's new feature start
        mAuroraActionBar.setShowBottomBarMenu(true);
        // Aurora xuyong 2013-09-23 added for aurora's new feature end
        // Aurora xuyong 2014-03-21 modified for aurora's new feature start
        mAuroraActionBar.showActionBarDashBoard();
        // Aurora xuyong 2014-03-21 modified for aurora's new feature end
        // Aurora xuyong 2013-09-17 deleted for aurora's new feature end
        // Aurora xuyong 2013-09-13 added for aurora's new feature start
        // Aurora xuyong 2013-09-17 deleted for aurora's new feature start
        //mBackButton.setVisibility(View.GONE);
        // Aurora xuyong 2013-09-17 deleted for aurora's new feature end
        // Aurora xuyong 2013-09-13 added for aurora's new feature end
      //Gionee <zhouyj> <2013-05-15> add for CR00810588 begin
        if (MmsApp.mGnVoiceReadMsgSupport) {
            stopVoiceHelperService();
            setStopServiceBtnGone();
        }
        //Gionee <zhouyj> <2013-05-15> add for CR00810588 end
        /*if (!mMsgListLongClick) {*/
            // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
            //Contact contact = mConversation.getRecipients().get(0);
            /*if (!contact.existsInDatabase()) {
                mMsgListView.removeHeaderView(mMsgListViewHeader);
            }*/
           // Aurora xuyong 2013-09-13 deleted for aurora's new feature end
          //Gionee <guoyx> <2013-07-18> modify for CR00780083 begin
            hideAttachmentSlideView();
          //Gionee <guoyx> <2013-07-18> modify for CR00780083 end
            /*mMsgListLongClick = true;*/
            // Aurora xuyong 2014-08-16 deleted for aurora's new feature start
            //mMsgListAdapter.mIsDeleteMode = true;
            // Aurora xuyong 2014-08-16 deleted for aurora's new feature end
            hideInputMethod();
            drawTopPanel(false);
            // gionee zhouyj 2013-04-04 add for CR00793342 start 
            // Aurora xuyong 2013-09-13 deleted for aurora's new feature start
            /*if (mSelectAll != null) {
              
            }*/
            // Aurora xuyong 2013-09-13 deleted for aurora's new feature end
            // gionee zhouyj 2013-04-04 add for CR00793342 end
            // Aurora xuyong 2015-03-03 modified for bug #11860 start
            drawBottomPanel(true);
            // Aurora xuyong 2015-03-03 modified for bug #11860 end
            // Aurora xuyong 2014-08-16 deleted for aurora's new feature start
            //startMsgListQuery();
            // Aurora xuyong 2014-08-16 deleted for aurora's new feature end
            /*// gionee lwzh modify for CR00774362 20130227 begin
            if (mGnmultiSelectStub == null) {
                initMultiSelect();
            }
            // gionee lwzh modify for CR00774362 20130227 end
            mGnmultiSelectStub.setVisibility(View.VISIBLE);*/
            
            //???
            // Aurora xuyong 2013-09-17 deleted for aurora's new feature start
            /*mMenuBatchDeleteItem.setVisible(true);
            mMenuBatchCopyItem.setVisible(true);
            mMenuBatchForwardItem.setVisible(true);
            setDeleteMenuState(false);
            setCopyMenuState(false);
            setForwardMenuState(false);
            onPrepareOptionsMenu(mMenu);*/
            // Aurora xuyong 2013-09-17 deleted for aurora's new feature end
            //????
            // Aurora xuyong 2014-08-16 deleted for aurora's new feature start
            // Aurora xuyong 2014-08-21 deleted for code optimizing start
            /*if(!mFirstLongClick) {
                mFirstLongClick = true;
            // Aurora xuyong 2014-08-21 deleted for code optimizing end
                Cursor cursor = mMsgListAdapter.getCursor();
//                mCurrentPos = position;
                //Gionee <zhouyj> <2013-08-09> modify for CR00851909 begin
                if (cursor != null && cursor.moveToFirst()) {
                    String type = cursor.getString(COLUMN_MSG_TYPE);
                    long msgId = cursor.getLong(COLUMN_ID);
                    mMsgItem = mMsgListAdapter.getCachedMessageItem(type, msgId, cursor);
                }
                //Gionee <zhouyj> <2013-08-09> modify for CR00851909 end
            // Aurora xuyong 2014-08-21 deleted for code optimizing start
            }*/
            // Aurora xuyong 2014-08-21 deleted for code optimizing end
        // Aurora xuyong 2014-08-16 added for aurora's new feature start
        // Aurora xuyong 2014-08-21 deleted for code optimizing start
        //mMsgListAdapter.initListMap(mMsgListAdapter.getCursor());
        // Aurora xuyong 2014-08-21 deleted for code optimizing end
        mMsgListAdapter.initListMap(mMsgListAdapter.getCursor(), mMsgIds, mMsgType);
        mMsgIds.clear();
        // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 start
        updateSelectionMenu();
        // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 end
        refreshBottomMenu();
        // Aurora xuyong 2014-08-16 added for aurora's new feature end
    }
    
    // Aurora xuyong 2013-09-17 deleted for aurora's new feature start
    /*private void batchMoreMenu(Menu menu) {
        if (mMsgListAdapter.getSelectedNumber() != 1 || !mMsgListAdapter.mIsDeleteMode) {
            setMoreMenuState(false);
            return;
        }
        
        mMsgItem = getOnlyItem();
        if (mMsgItem == null) {
            setMoreMenuState(false);
            return;
        }
        
        // star menu
        if (mMsgItem.isSms()) {
            if (mMsgItem.mStar) {
                mMenuBatchStarItem.setTitle(R.string.cancel_favorite);
            } else {
                mMenuBatchStarItem.setTitle(R.string.add_to_favorite);
            }
            mMenuBatchStarItem.setVisible(true);
        }
        
        // edit menu
        if (getRecipients().size() == 1 &&
                (mMsgItem.mBoxId == Sms.MESSAGE_TYPE_OUTBOX || mMsgItem.mBoxId == Sms.MESSAGE_TYPE_FAILED) && !mMsgItem.mIsRegularlyMms) {
            mMenuBatchEditItem.setVisible(true);
        }
        
        // slidshow menu
        if (mMsgItem.isMms() && mMsgItem.mAttachmentType == WorkingMessage.SLIDESHOW) {
            mMenuBatchSlidshowItem.setVisible(true);
        }
        
        // copy sim menu
        if (mMsgItem.isSms() && mSimCount > 0 && !mMsgItem.isSending() && !mMsgItem.isRegularlyMms()) {
            mMenuBatchCopySimItem.setVisible(true);
        }
        
        // copy sd menu
        if (mMsgItem.isMms() && haveSomethingToCopyToSDCard(mMsgItem.mMsgId)) {
            mMenuBatchCopySdcardItem.setVisible(true);
        }
        
        // details menu
        mMenuBatchDetailsItem.setVisible(true);
    }*/
    
    // Aurora xuyong 2013-09-17 deleted for aurora's new feature start
    /*private void setDeleteMenuState(boolean enable) {
        mMenuBatchDeleteItem.setEnabled(enable ? true : false);
        mMenuBatchDeleteItem.setIcon(enable ? R.drawable.gn_com_delete_bg : R.drawable.gn_com_delete_unuse_bg);
    }
    
    private void setCopyMenuState(boolean enable) {
        mMenuBatchCopyItem.setEnabled(enable ? true : false);
        mMenuBatchCopyItem.setIcon(enable ? R.drawable.gn_com_copy_bg : R.drawable.gn_com_copy_unuse_bg);
    }
    
    private void setForwardMenuState(boolean enable) {
        mMenuBatchForwardItem.setEnabled(enable ? true : false);
        mMenuBatchForwardItem.setIcon(enable ? R.drawable.gn_com_forward_bg : R.drawable.gn_com_forward_unuse_bg);
    }
    
    private void setMoreMenuState(boolean visible) {
        mMenuBatchStarItem.setVisible(false);
        mMenuBatchEditItem.setVisible(false);
        mMenuBatchSlidshowItem.setVisible(false);
        mMenuBatchCopySimItem.setVisible(false);
        mMenuBatchCopySdcardItem.setVisible(false);
        mMenuBatchDetailsItem.setVisible(false);
    }*/
    // Aurora xuyong 2013-09-17 deleted for aurora's new feature end
    
     // Aurora liugj 2013-10-30 modified for fix bug-310 start
    private void deleteMsg() {
        // Aurora xuyong 2014-02-24 added for bug #2580 start
        if (!mNeedShowDialog) {
            return;
        }
        mNeedShowDialog = false;
        // Aurora xuyong 2014-02-24 added for bug #2580 end
      //gionee gaoj 2012-9-20 added for CR00699291 start
        boolean stared = getSelectMsgStaredState();
        //boolean isOneSelected = false;
        int selectedNumber = mMsgListAdapter.getSelectedNumber();
        // Aurora xuyong 2013-09-25 added for aurora's new feature start
        if (selectedNumber <= 0) {
            return;
        }else if (selectedNumber == 1) {
            gnDeleteOneMsg(mMsgListAdapter.getMessageUri(mMsgListAdapter.mDeleteMsgid), mMsgListAdapter.mDeleteMsgid);
        }else {
            // Aurora xuyong 2013-12-11 modified for aurora's new feature start
            if (selectedNumber == mMsgListAdapter.getChildCount()) {
            // Aurora xuyong 2013-12-11 modified for aurora's new feature end
                mDeleteAllMessages = true;
            } else {
                mDeleteAllMessages = false;
            }
            if (mDeleteAllMessages) {
                long threadId = mConversation.getThreadId();
             // Aurora xuyong 2014-05-08 modified for bug #4695 start
                if (mConversation.hasDraft()) {
                    mDeleteConfirmDialog = confirmMultiDelete();
                } else {
                    // Aurora liugj 2014-01-22 modified for listview delete animation start
                // Aurora xuyong 2014-07-08 added for bug #6430 start
                    Conversation.setIsFromReject(mIsFromReject);
                // Aurora xuyong 2014-07-08 added for bug #6430 end
                    ConvFragment.GnDeleteThreadListener dt = new ConvFragment.GnDeleteThreadListener(null, threadId,
                            mBackgroundQueryHandler, sCompose.get());
                    // Aurora liugj 2014-01-22 modified for listview delete animation end
                    mDeleteConfirmDialog = confirmDeleteGnDialog(dt, mDeleteAllMessages, stared);
                }
             // Aurora xuyong 2014-05-08 modified for bug #4695 end
            }else {
                mDeleteConfirmDialog = confirmMultiDelete();
            }
        }
        // Aurora xuyong 2013-09-25 added for aurora's new feature end

        //Gione <guoyx> <2013-06-09> modify for CR00824219 begin
        /*if(!stared){
            if (isOneSelected) {
                gnDeleteOneMsg(mMsgListAdapter.getMessageUri(mMsgListAdapter.mDeleteMsgid), mMsgListAdapter.mDeleteMsgid);
            } else if (mDeleteAllMessages) {
                long threadId = mConversation.getThreadId();
                ConvFragment.GnDeleteThreadListener dt = new ConvFragment.GnDeleteThreadListener(threadId,
                        mBackgroundQueryHandler, sCompose.get());
                mDeleteConfirmDialog = ConvFragment.confirmDeleteGnThreadDialog(dt, true, false, getComposeContext());
            } else {
                mDeleteConfirmDialog = confirmMultiDelete();
            }
        } else {
            if (mDeleteAllMessages) {
                long threadId = mConversation.getThreadId();
                ConvFragment.GnDeleteThreadListener dt = new ConvFragment.GnDeleteThreadListener(threadId,
                        mBackgroundQueryHandler, getComposeContext());
                mDeleteConfirmDialog = ConvFragment.confirmDeleteGnThreadDialog(dt, true, false, getComposeContext());
            } else {
                mDeleteConfirmDialog = confirmDeleteGnDialog(new DeleteGnMessageListener(stared), mDeleteAllMessages, stared);
            }
        }*/
        //Gione <guoyx> <2013-06-09> modify for CR00824219 end
        //gionee gaoj 2012-9-20 added for CR00699291 end
    }
     // Aurora liugj 2013-10-30 modified for fix bug-310 end
    // Aurora xuyong 2014-03-04 modified for aurora's new feature start
    private void pickMms() {
        int selectedNumber = mMsgListAdapter.getSelectedNumber();
        if (selectedNumber <= 0) {
            return;
        }
        if (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
            Toast.makeText(this, R.string.aurora_storage_unavailable, Toast.LENGTH_LONG).show();
            return;
        }
        if(mMsgListAdapter.getSelectedNumber() == 1) {
            final MessageItem mRestrictedItem = getOnlyItem();
            if(mRestrictedItem == null) {
                return ;
            }
            if (selectedItemhasAttachment(mRestrictedItem)) {
                new PickAttachmentAsyncTask().execute(mRestrictedItem.getMessageUri());
            } else {
                Toast.makeText(this, R.string.aurora_has_no_attachment, Toast.LENGTH_SHORT).show();
            }
        }
    }
    
    public final int IMAGE_PICK_INDEX = 0;
    public final int VIDEO_PICK_INDEX = 1;
    public final int OTHER_PICK_INDEX = 2;
    
    Handler mToastHandler  = new Handler() {
        
        @Override
        public void handleMessage(Message msg) {
            String fileName = (String)(msg.obj);
            switch(msg.what) {
                case IMAGE_PICK_INDEX:
                       Toast.makeText(ComposeMessageActivity.this, R.string.aurora_image_saved, Toast.LENGTH_SHORT).show();
                    break;
                case VIDEO_PICK_INDEX:
                       Toast.makeText(ComposeMessageActivity.this, R.string.aurora_video_saved, Toast.LENGTH_SHORT).show();
                    break;
                case OTHER_PICK_INDEX:
                       Toast.makeText(ComposeMessageActivity.this, R.string.aurora_other_saved, Toast.LENGTH_SHORT).show();
                    break;
            }
        }
        
    };
    
    private class PickAttachmentAsyncTask extends AsyncTask<Uri, Void, Boolean> {
        
        private final String sFileSavedPath1 = Environment.getExternalStorageDirectory() + File.separator + "DCIM"
                                               + File.separator + "mms";
        private final String sFileSavedPath2 = Environment.getExternalStorageDirectory() + File.separator + "Download";
        
        public PickAttachmentAsyncTask() {
        }
        
        @Override 
        protected void onPreExecute() {
            if (mPickDialog == null) {
                mPickDialog = new AuroraProgressDialog(ComposeMessageActivity.this);
                mPickDialog.setIndeterminate(true);
                mPickDialog.setProgressStyle(AuroraProgressDialog.STYLE_SPINNER);
                mPickDialog.setCanceledOnTouchOutside(false);
                mPickDialog.setCancelable(false);
                mPickDialog.setMessage(ComposeMessageActivity.this.
                        getText(R.string.aurora_saving_attachments));
            }
            mPickDialog.show();
        }
        
        @Override
        protected Boolean doInBackground(Uri... params) {
            try {
                return new Boolean(pickAttachments(params[0]));
            } catch(MmsException e) {
                return new Boolean(false);
            }
        }
        
        @Override 
        protected void onPostExecute(Boolean result) {
            // Aurora xuyong 2014-03-07 deleted for aurora's new feature start
            //mPickDialog.dismiss();
            // Aurora xuyong 2014-03-07 deleted for aurora's new feature end
            if (result) {
                Toast.makeText(ComposeMessageActivity.this, R.string.aurora_saving_finished, Toast.LENGTH_SHORT).show();
            } else {
                Toast.makeText(ComposeMessageActivity.this, R.string.aurora_saving_error, Toast.LENGTH_SHORT).show();
            }
            // Aurora xuyong 2014-03-07 added for aurora's new feature start
            if (mPickDialog != null && mPickDialog.isShowing()) {
                mPickDialog.dismiss();
            }
            onFinishMultiChoose();
            // Aurora xuyong 2014-03-07 added for aurora's new feature end
        }
        // Aurora xuyong 2014-03-08 added for aurora's new feature start
        private class TypeNumbers {
            
            int imageNum;
            int videoNum;
            int otherNum;
            
            public TypeNumbers(int num1, int num2, int num3) {
                imageNum = num1;
                videoNum = num2;
                otherNum = num3;
            }
            
            public int getImageNum() {
                return imageNum;
            }
            
            public int getVideoNum() {
                return videoNum;
            }
            
            public int getOtherNum() {
                return otherNum;
            }
            
            public void setImageNum(int num) {
                imageNum = num;
            }
            
            public void setVideoNum(int num) {
                videoNum = num;
            }
            
            public void setOtherNum(int num) {
                otherNum = num;
            }
            
        }
        
        private TypeNumbers getTypeNumber(PduBody pduBody) {
            int imageNum = 0;
            int videoNum = 0;
            int otherNum = 0;
            int partNum = pduBody.getPartsNum();
            int i = 0; 
            while (i < partNum) {
                PduPart pduPart = pduBody.getPart(i);
                String type = new String(pduPart.getContentType());
                if (type.contains("image")) {
                    imageNum++;
                } else if (type.contains("video")) {
                    videoNum++;
                } else if (!(type.contains("application/smil") || type.contains("text/plain"))) {
                    otherNum++;
                }
                i++;
            }
            return new TypeNumbers(imageNum, videoNum, otherNum);
        }
        // Aurora xuyong 2014-03-08 added for aurora's new feature end
        private boolean pickAttachments(Uri msgUri) throws MmsException {
            PduPersister p = PduPersister.getPduPersister(ComposeMessageActivity.this);
            GenericPdu pdu = p.load(msgUri);
            PduBody pduBody = null;
            boolean hasNoException = true;
            int msgType = pdu.getMessageType();
            if ((msgType == PduHeaders.MESSAGE_TYPE_SEND_REQ)
                    || (msgType == PduHeaders.MESSAGE_TYPE_RETRIEVE_CONF)) {
                pduBody = ((MultimediaMessagePdu) pdu).getBody();
            }
            
             if (pduBody == null) {
                 throw new MmsException();
             }
             // Aurora xuyong 2014-03-08 added for aurora's new feature start
             TypeNumbers typeNumbers = getTypeNumber(pduBody);
             int imageNum = typeNumbers.getImageNum();
             int videoNum = typeNumbers.getVideoNum();
             int otherNum = typeNumbers.getOtherNum();
             // Aurora xuyong 2014-03-08 added for aurora's new feature end
             int partNum = pduBody.getPartsNum();
             int i = 0;
             while (i < partNum) {
                 if (!hasNoException) {
                     break;
                 }
                 PduPart pduPart = pduBody.getPart(i);
                 String type = new String(pduPart.getContentType());
                 if (type.contains("image")) {
                     hasNoException = pickContents(pduPart, sFileSavedPath1);
                     // Aurora xuyong 2014-03-08 modified for aurora's new feature start
                     imageNum--;
                     if (hasNoException && imageNum == 0 || !hasNoException) {
                         Message msg = Message.obtain(mToastHandler, IMAGE_PICK_INDEX);
                         msg.sendToTarget();
                     }
                     // Aurora xuyong 2014-03-08 modified for aurora's new feature end
                 } else if (type.contains("video")) {
                     hasNoException = pickContents(pduPart, sFileSavedPath1);
                     // Aurora xuyong 2014-03-08 modified for aurora's new feature start
                     videoNum--;
                     if (hasNoException && videoNum == 0 || !hasNoException) {
                         Message msg = Message.obtain(mToastHandler, VIDEO_PICK_INDEX);
                         msg.sendToTarget();
                     }
                     // Aurora xuyong 2014-03-08 modified for aurora's new feature end
                 } else if (!(type.contains("application/smil") || type.contains("text/plain"))) {
                     hasNoException = pickContents(pduPart, sFileSavedPath2);
                     // Aurora xuyong 2014-03-08 modified for aurora's new feature start
                     otherNum--;
                     if (hasNoException && otherNum == 0 || !hasNoException) {
                         Message msg = Message.obtain(mToastHandler, OTHER_PICK_INDEX);
                         msg.sendToTarget();
                     }
                     // Aurora xuyong 2014-03-08 modified for aurora's new feature end
                 }
                 i++;
             }
             return hasNoException;
        }
        
         private File getAUniqueDestination(String base, String extension) {
            File file = new File(base + "." + extension);

            for (int i = 2; file.exists(); i++) {
                file = new File(base + "_" + i + "." + extension);
            }
            return file;
         }
         
         private boolean pickContents(PduPart part, String destinatePath) {
             InputStream input = null;
             FileOutputStream fout = null;
             String newFileName = null;
             String extension = null;
             // Aurora xuyong 2014-07-16 modified for bug #6595 start
             File outputFille = null;
             // Aurora xuyong 2014-07-16 modified for bug #6595 end
             try {
                 input = mContentResolver.openInputStream(part.getDataUri());
                 if (input instanceof FileInputStream) {
                     FileInputStream fin = (FileInputStream) input;
                     byte[] location = part.getContentLocation();
                     if (location == null) {
                         location = part.getFilename();
                     }
                     if (location == null) {
                         location = part.getName();
                     }
                     String fileName;
                     if (location == null) {
                         // Use " " as fallback name.
                         fileName = " ";
                     } else {
                         fileName = new String(location);
                     }
                     
                     int index;
    
                     fileName = fileName.replace(' ', '_');
                     fileName = fileName.replace(':', '-');
    
                     if ((index = fileName.lastIndexOf(".")) == -1) {
                         String type = new String(part.getContentType());
                         extension = MimeTypeMap.getSingleton().getExtensionFromMimeType(type);
                     } else {
                         extension = fileName.substring(index + 1, fileName.length());
                         fileName = fileName.substring(0, index);
                     }
                     newFileName = fileName.replace('.', '_');
                     File file = getAUniqueDestination(destinatePath + File.separator + newFileName, extension);
                     File parentFile = file.getParentFile();
                     if (!parentFile.exists() && !parentFile.mkdirs()) {
                         // can't save this attachment, so we return false
                         return false;
                     }
                     
                     fout = new FileOutputStream(file);
                    // Aurora xuyong 2014-07-16 modified for bug #6595 start
                     outputFille = file;
                    // Aurora xuyong 2014-07-16 modified for bug #6595 end
    
                     byte[] buffer = new byte[8000];
                     int size = 0;
                     while ((size = fin.read(buffer)) != -1) {
                         fout.write(buffer, 0, size);
                     }
                 }
             } catch (IOException e) {
                 return false;
             } finally {
                 if (null != input) {
                     try {
                         input.close();
                     } catch (IOException e) {
                         // Ignore
                         return false;
                     }
                 }
                 if (null != fout) {
                     try {
                         fout.close();
                     } catch (IOException e) {
                         // Ignore
                         return false;
                     }
                 }
                 // Aurora xuyong 2014-07-16 modified for bug #6595 start
                 Intent intent = new Intent("android.intent.action.AURORA_FILE_SCAN");
                 intent.setData(Uri.fromFile(outputFille));
                 ComposeMessageActivity.this.sendBroadcast(intent);
                 // Aurora xuyong 2014-07-16 modified for bug #6595 end
             }
             return true;
        }
    }
    // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 start
    public final static int MAX_SELECTED_MESSAGE_COUNT = 100;
    // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 end
    // Aurora xuyong 2014-03-04 modified for aurora's new feature end
    // Aurora xuyong 2014-08-19 modified for bug #7739 start
    private boolean copyMsg() {
    // Aurora xuyong 2014-08-19 modified for bug #7739 end
        // Aurora xuyong 2013-09-25 added for aurora's new feature start
        int selectedNumber = mMsgListAdapter.getSelectedNumber();
        if (selectedNumber <= 0) {
        // Aurora xuyong 2014-08-19 modified for bug #7739 start
            return true;
        }
        // Aurora xuyong 2014-08-22 modified for bug #7739 & #7853 start
        if (selectedNumber > MAX_SELECTED_MESSAGE_COUNT) {
        // Aurora xuyong 2014-08-22 modified for bug #7739 & #7853 end
            Toast.makeText(this, R.string.aurora_msg_ops_tip, Toast.LENGTH_SHORT).show();
            return false;
        // Aurora xuyong 2014-08-19 modified for bug #7739 end
        }
        // Aurora xuyong 2013-09-25 added for aurora's new feature end
        Cursor cursor = mMsgListAdapter.getCursor();
        cursor.moveToPosition(-1);
        String copyBody = "";
        // Aurora xuyong 2014-08-21 deleted for code optimizing start
        /*int i = 0;
        // Aurora xuyong 2014-08-21 deleted for code optimizing end
        while(cursor.moveToNext()) {
            // Aurora xuyong 2014-08-16 modified for aurora's new feature start
            if(mSelectMap.get(i) != null && mSelectMap.get(i)) {
            // Aurora xuyong 2014-08-16 modified for aurora's new feature end
                if(cursor.getString(COLUMN_MSG_TYPE).equals("sms")) 
                    copyBody += cursor.getString(COLUMN_SMS_BODY) + STR_CN;
            }
            i++;
        // Aurora xuyong 2014-08-21 deleted for code optimizing start
        }*/
        // Aurora xuyong 2014-08-21 added for code optimizing end
        Map<Integer, Boolean> sortMap = new TreeMap<Integer, Boolean>(new MapKeyComparator());
        // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 start
        mSelectMap = mMsgListAdapter.getSelectedMap();
        // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 end
        sortMap.putAll(mSelectMap);
        Iterator iter = sortMap.entrySet().iterator();
        while (iter.hasNext()) {
            @SuppressWarnings("unchecked")
            Map.Entry<Integer, Boolean> entry = (Entry<Integer, Boolean>) iter.next();
            if (entry.getValue().booleanValue()) {
                cursor.moveToPosition(entry.getKey().intValue());
                // Aurora xuyong 2015-03-10 modified for bug #12099 start
                if(cursor.getString(COLUMN_MSG_TYPE).equals("sms")) {
                    if (!cursor.isLast()) {
                        copyBody += cursor.getString(COLUMN_SMS_BODY) + STR_CN;
                    } else {
                        copyBody += cursor.getString(COLUMN_SMS_BODY);
                    }
                }
                // Aurora xuyong 2015-03-10 modified for bug #12099 end
            }
        }
        // Aurora xuyong 2014-08-21 added for code optimizing end
        copyToClipboard(copyBody);
        // Aurora xuyong 2014-08-19 added for bug #7739 start
        return true;
        // Aurora xuyong 2014-08-19 added for bug #7739 end
    }
    // Aurora xuyong 2014-07-02 added for reject feature start
    // Aurora xuyong 2014-08-05 added for bug #7079 start
    private Map<Long, String> mResumeMap = new HashMap<Long, String>();
    
    private void initResumeMap(Map<Integer, Boolean> map, Cursor cursor) {
        Iterator iter = map.entrySet().iterator();
        int position = 0;
        while (iter.hasNext()) {
            @SuppressWarnings("unchecked")
            Map.Entry<Integer, Boolean> entry = (Entry<Integer, Boolean>) iter.next();
            if (entry.getValue()) {
                position = entry.getKey();
                if(cursor.moveToPosition(position) && !cursor.isAfterLast() && !cursor.isBeforeFirst()) {
                    if (mResumeMap.get(cursor.getLong(COLUMN_ID)) == null) {
                        mResumeMap.put(cursor.getLong(COLUMN_ID), cursor.getString(COLUMN_MSG_TYPE));
                    }
                }
            }
        }
    }
    // Aurora xuyong 2014-08-05 added for bug #7079 end
    private void resumeMsg() {
        AuroraAlertDialog dialog = new AuroraAlertDialog.Builder(ComposeMessageActivity.this)
        .setTitle(ComposeMessageActivity.this.getResources().getString(R.string.aurora_resume_title))
        .setMessage(ComposeMessageActivity.this.getResources().getString(R.string.aurora_resume_message))
        .setPositiveButton(android.R.string.ok,
            new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int whichButton) {
                    dialog.dismiss();
                    // Aurora xuyong 2014-03-05 added for aurora's new feature start
                    new TotalCount(ComposeMessageActivity.this, TotalCount.REJECT_MODULE_kEY, TotalCount.ACTION_RESUME, 1).countData();
                    // Aurora xuyong 2014-03-05 added for aurora's new feature end
                // Aurora xuyong 2014-08-05 added for bug #7079 start
                    Message msg = mHandler.obtainMessage(SHOW_REJECT_DIALOG);
                    msg.sendToTarget();
                // Aurora xuyong 2014-08-05 added for bug #7079 end
                    final Cursor cursor = mMsgListAdapter.getCursor();
                // Aurora xuyong 2014-08-01 addede for bug #7092 start
                    if (cursor == null || cursor.isClosed()) {
                        return;
                    }
                 // Aurora xuyong 2014-08-05 added for bug #7079 start
                // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 start
                    mSelectMap = mMsgListAdapter.getSelectedMap();
                // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 end
                    initResumeMap(mSelectMap, cursor);
                    if (mResumeMap == null || mResumeMap.size() <= 0) {
                        return;
                    }
                 // Aurora xuyong 2014-08-05 added for bug #7079 end
                // Aurora xuyong 2014-08-01 addede for bug #7092 end
                    new Thread(new Runnable() {
                        
                        @Override
                        public void run() {
                              // Aurora xuyong 2014-08-05 modified for bug #7079 start
                                Iterator iter = mResumeMap.entrySet().iterator();
                                int position = 0;
                                while (iter.hasNext()) {
                                    @SuppressWarnings("unchecked")
                                    Map.Entry<Long, String> entry = (Entry<Long, String>) iter.next();
                                    long msgId = entry.getKey();
                                    String msgType = entry.getValue();
                                    ContentResolver resolver = ComposeMessageActivity.this.getContentResolver();
                                    Uri uri = null;
                                    if (msgType.equals("mms")) {
                                        uri = ContentUris.withAppendedId(Mms.CONTENT_URI, msgId);
                                    } else {
                                        uri = ContentUris.withAppendedId(Sms.CONTENT_URI, msgId);
                                    }
                                    if (uri != null) {
                                        ContentValues values = new ContentValues();
                                        values.put("update_threads", 0);
                                        values.put("reject", 0);
                                        resolver.update(uri, values, null, null);
                                    }
                                }
                                Message msg = mHandler.obtainMessage(DISMISS_REJECT_DIALOG);
                               msg.sendToTarget();
                               // Aurora xuyong 2014-08-05 modified for bug #7079 end
                        }
                        
                    }).start();
                    onFinishMultiChoose();
                }
            }
        )
        .setNegativeButton(android.R.string.cancel,   
            new DialogInterface.OnClickListener() {
             
                @Override
                public void onClick(DialogInterface dialog, int whichButton) {
                dialog.dismiss();
           }
        }).show();

    }
    // Aurora xuyong 2014-07-02 added for reject feature end
    // Aurora xuyong 2014-07-26 added for aurora's new feature start
    private void resumeAllMsg() {
      // Aurora xuyong 2014-08-05 modified for bug #7079 start
        Message msg = mHandler.obtainMessage(SHOW_REJECT_DIALOG);
        msg.sendToTarget();
        if (mConversation != null) {
            long threadId = mConversation.getThreadId();
            Uri threadUriInsert = Uri.parse(
                            "content://mms-sms/conversations_resume_all/" + threadId);
            ContentValues threadValuesInsert = new ContentValues();
            threadValuesInsert.put("reject", 0);
            ComposeMessageActivity.this.getContentResolver().update(threadUriInsert, threadValuesInsert, null, null);
        }
        msg = mHandler.obtainMessage(DISMISS_REJECT_DIALOG);
        // Aurora xuyong 2014-08-20 added for bug #7778 start
        msg.obj = new Boolean(true);
        // Aurora xuyong 2014-08-20 added for bug #7778 end
        msg.sendToTarget();
      // Aurora xuyong 2014-08-05 modified for bug #7079 end
    }    
    // Aurora xuyong 2014-08-19 modified for bug #7739 start
    private boolean forwardMsg() {
    // Aurora xuyong 2014-08-19 modified for bug #7739 end
        // Aurora xuyong 2013-09-25 added for aurora's new feature start
        int selectedNumber = mMsgListAdapter.getSelectedNumber();
        if (selectedNumber <= 0) {
        // Aurora xuyong 2014-08-19 modified for bug #7739 start
            return true;
        }
        // Aurora xuyong 2014-08-22 modified for bug #7739 & #7853 start
        if (selectedNumber > MAX_SELECTED_MESSAGE_COUNT) {
        // Aurora xuyong 2014-08-22 modified for bug #7739 & #7853 end
            Toast.makeText(this, R.string.aurora_msg_ops_tip, Toast.LENGTH_SHORT).show();
            return false;
        // Aurora xuyong 2014-08-19 modified for bug #7739 end
        }
        // Aurora xuyong 2013-09-25 added for aurora's new feature end
        if(mMsgListAdapter.getSelectedNumber() == 1) {
            final MessageItem mRestrictedItem = getOnlyItem();
            if(mRestrictedItem == null) {
                // Aurora xuyong 2014-08-19 modified for bug #7739 start
                return true;
                // Aurora xuyong 2014-08-19 modified for bug #7739 end
            }
            if (WorkingMessage.sCreationMode == 0 || !isRestrictedType(mRestrictedItem.mMsgId)) {
            //gionee gaoj 2012-6-14 modified for CR00614265 start
            if (mRestrictedItem.mType.equals("mms") && mRestrictedItem.mSlideshow == null) {
                Toast.makeText(this, R.string.gn_unload_mms, Toast.LENGTH_SHORT).show();
            } else {
                new Thread(new Runnable() {
                    public void run() {
                        forwardMessage(mRestrictedItem);
                    }
                }, "ForwardMessage").start();
            }
          //gionee gaoj 2012-6-14 modified for CR00614265 end
            } else if(WorkingMessage.sCreationMode == WorkingMessage.WARNING_TYPE) {
                new AuroraAlertDialog.Builder(ComposeMessageActivity.this)
                .setTitle(R.string.restricted_forward_title)
                .setIconAttribute(android.R.attr.alertDialogIcon)
                .setMessage(R.string.restricted_forward_message)
                .setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
                    public final void onClick(DialogInterface dialog, int which) {
                        int createMode = WorkingMessage.sCreationMode;
                        WorkingMessage.sCreationMode = 0;
                        new Thread(new Runnable() {
                            public void run() {
                                forwardMessage(mRestrictedItem);
                            }
                        }, "ForwardMessage").start();
                        WorkingMessage.sCreationMode = createMode;
                    }
                })
                .setNegativeButton(android.R.string.cancel, null)
                .show();
            }
        } else {
            Cursor cursor = mMsgListAdapter.getCursor();
            // Aurora xuyong 2014-08-01 addede for bug #7092 start
            if (cursor == null || cursor.isClosed()) {
                // Aurora xuyong 2014-08-19 modified for bug #7739 start
                   return true;
                // Aurora xuyong 2014-08-19 modified for bug #7739 end
            }
            // Aurora xuyong 2014-08-01 addede for bug #7092 end
            cursor.moveToPosition(-1);
            // Aurora xuyong 2014-08-21 deleted for code optimizing start
            //int i = 0;
            // Aurora xuyong 2014-08-21 deleted for code optimizing end
            String smsBody = "";
            // Aurora xuyong 2014-08-21 deleted for code optimizing start
            /*while(cursor.moveToNext()) {
            // Aurora xuyong 2014-08-21 deleted for code optimizing start
                // Aurora xuyong 2014-08-16 modified for aurora's new feature start
                if(mSelectMap.get(i) != null && mSelectMap.get(i)) {
                // Aurora xuyong 2014-08-16 modified for aurora's new feature end
                    if(cursor.getString(COLUMN_MSG_TYPE).equals("sms")) 
                        smsBody += cursor.getString(COLUMN_SMS_BODY) + STR_CN;
                }
                i++;
            // Aurora xuyong 2014-08-21 deleted for code optimizing start
            }*/
            // Aurora xuyong 2014-08-21 deleted for code optimizing end
            // Aurora xuyong 2014-08-21 added for code optimizing start
            Map<Integer, Boolean> sortMap = new TreeMap<Integer, Boolean>(new MapKeyComparator());
            // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 start
            mSelectMap = mMsgListAdapter.getSelectedMap();
            // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 end
            sortMap.putAll(mSelectMap);
            Iterator iter = sortMap.entrySet().iterator();
            while (iter.hasNext()) {
                @SuppressWarnings("unchecked")
                Map.Entry<Integer, Boolean> entry = (Entry<Integer, Boolean>) iter.next();
                if (entry.getValue().booleanValue()) {
                    cursor.moveToPosition(entry.getKey().intValue());
                    // Aurora xuyong 2015-03-10 modified for bug #12099 start
                    if(cursor.getString(COLUMN_MSG_TYPE).equals("sms")) {
                        if (!cursor.isLast()) {
                            smsBody += cursor.getString(COLUMN_SMS_BODY) + STR_CN;
                        } else {
                            smsBody += cursor.getString(COLUMN_SMS_BODY);
                        }
                    }
                    // Aurora xuyong 2015-03-10 modified for bug #12099 end
                }
            }
            // Aurora xuyong 2014-08-21 added for code optimizing end
            Intent intent = createIntent(this, 0);
            intent.putExtra(FORWARD_MESSAGE, true);
            intent.putExtra(SMS_BODY, smsBody);
            intent.setClassName(this, "com.android.mms.ui.ForwardMessageActivity");
            startActivity(intent);
        }
        // Aurora xuyong 2014-08-19 added for bug #7739 start
        return true;
        // Aurora xuyong 2014-08-19 added for bug #7739 end
    }
    // Aurora xuyong 2014-08-21 added for code optimizing start
    public class MapKeyComparator implements Comparator<Integer>{  
        public int compare(Integer id1, Integer id2) {  
            return id1.compareTo(id2);  
        }  
    }  
    // Aurora xuyong 2014-08-21 added for code optimizing end
    private void starMsg() {
        Cursor cursor = mMsgListAdapter.getCursor();
        // Aurora xuyong 2014-08-01 addede for bug #7092 start
        if (cursor == null || cursor.isClosed()) {
            return;
        }
        // Aurora xuyong 2014-08-01 addede for bug #7092 end
        cursor.moveToPosition(-1);
        int j = 0, count = 0;
        String ids = "";
        // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 start
        mSelectMap = mMsgListAdapter.getSelectedMap();
        // Aurora xuyong 2014-08-22 added for bug #7739 & #7853 end
        while(cursor.moveToNext()) {
            // Aurora xuyong 2014-08-16 modified for aurora's new feature start
            if(mSelectMap.get(j) != null && mSelectMap.get(j)) {
            // Aurora xuyong 2014-08-16 modified for aurora's new feature end
                if(cursor.getString(COLUMN_MSG_TYPE).equals("sms")) {
                    if(count > 0) 
                        ids += " OR _id = ";
                    ids += cursor.getString(COLUMN_ID);
                    count++;
                }
            }
            j++;
        }
        starMessage(ids, !mAllStar);
    }
    
    private void copysdcardMsg(MessageItem msgItem) {
          // Aurora liugj 2013-11-12 modified for bug-554 start
        //StorageManager mSM = (StorageManager) getApplicationContext().getSystemService(STORAGE_SERVICE);
        // Aurora xuyong 2014-04-18 modified for bug #4361 start
        if (hasNoStorage()) {
        // Aurora xuyong 2014-04-18 modified for bug #4361 end
          // Aurora liugj 2013-11-12 modified for bug-554 end
            Toast.makeText(ComposeMessageActivity.this, getString(R.string.Insert_sdcard), Toast.LENGTH_LONG).show();
            onFinishMultiChoose();
            return;
        }
        if(MmsApp.mStorageMountedCount == 2) {
            Intent i = new Intent("android.intent.action.choosesdcard");
            i.putExtra("tips", getString(R.string.copy_attachment_to));
            i.putExtra("uri", mMsgItem.mMessageUri.toString());
            startActivityForResult(i, REQUEST_CODE_CHOOSE_SDCARD);
        } else if(MmsApp.mStorageMountedCount == 1) {
            Intent i = new Intent(ComposeMessageActivity.this, AttachmentPickerActivity.class);
            i.setData(msgItem.mMessageUri);
            startActivityForResult(i, REQUEST_CODE_MULTI_SAVE);
        } else {
            Toast.makeText(this, getString(R.string.gn_no_sdcard), Toast.LENGTH_SHORT).show();
        }
    }
    
    private void detailsMsg(MessageItem msgItem) {
        String messageDetails = MessageUtils.getMessageDetails(
                ComposeMessageActivity.this, msgItem);
        mDetailDialog = new AuroraAlertDialog.Builder(ComposeMessageActivity.this)
                .setTitle(R.string.message_details_title)
                .setMessage(messageDetails)
                .setCancelable(true)
                .show();
    }
}
//gionee gaoj 2012-4-10 added for CR00555790 start
class GnLinearLayout extends LinearLayout {
    private OnLocationChangedListener mListener;

    public GnLinearLayout(Context arg0) {
        super(arg0);
    }

    public GnLinearLayout(Context arg0, AttributeSet arg1) {
        super(arg0, arg1);
    }

    @Override
    protected void onLayout(boolean arg0, int arg1, int arg2, int arg3, int arg4) {
        if (arg2 < 0 && null != mListener) {
            mListener.setOnLocationChanged(arg1, arg2, arg3, arg4);
            return;
        }
        super.onLayout(arg0, arg1, arg2, arg3, arg4);
    }

    @Override
    protected void onSizeChanged(int arg0, int arg1, int arg2, int arg3) {
        super.onSizeChanged(arg0, arg1, arg2, arg3);
    }

    public interface OnLocationChangedListener {
        public void setOnLocationChanged(int left, int top, int right, int bottom);
    }

    public void setLocationChangedListener(OnLocationChangedListener listener) {
        mListener = listener;
    }
}
//gionee gaoj 2012-4-10 added for CR00555790 end
