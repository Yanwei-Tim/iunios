/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package com.android.contacts.activities;

import com.android.contacts.ContactsApplication;
import com.android.contacts.R;

import android.app.ProgressDialog;
import android.content.AsyncQueryHandler;
import android.os.Looper;
import android.os.Message;
import android.database.sqlite.SQLiteDiskIOException;
import android.database.sqlite.SQLiteFullException;
import android.database.sqlite.SQLiteDatabaseCorruptException;
import android.util.Log;
import java.lang.ref.WeakReference;

import android.content.ContentValues;
import android.content.Context;
import android.content.ContentResolver;
import android.content.DialogInterface;
import android.content.SharedPreferences;
import android.os.Handler;
import android.database.Cursor;

import com.android.contacts.list.AuroraPrivacyContactListAdapter;
import com.android.contacts.list.AuroraPrivateCallContactListAdapter;
import android.widget.TextView;
import aurora.app.AuroraActivity;
import aurora.app.AuroraAlertDialog;
import aurora.app.AuroraProgressDialog;
import android.widget.AdapterView;
import aurora.preference.AuroraPreferenceManager;
import aurora.widget.AuroraActionBar;
import aurora.widget.AuroraCheckBox;
import aurora.widget.AuroraListView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.Window;
import android.widget.ProgressBar;
import com.android.contacts.ContactsUtils;
import android.widget.ListAdapter;
import gionee.provider.GnContactsContract;
import gionee.provider.GnContactsContract.Contacts;
import gionee.provider.GnContactsContract.Data;
import gionee.provider.GnContactsContract.RawContacts;
import android.net.Uri;
import android.os.Bundle;
import com.privacymanage.service.AuroraPrivacyUtils;
import android.content.ActivityNotFoundException;
import android.content.Intent;
import android.os.Parcelable;
import android.view.KeyEvent;

public class AuroraPrivateSettingListActivity extends AuroraActivity implements AdapterView.OnItemClickListener {
    private static final int AURORA_EDIT_PRIVACY_CONTACT = 1;
    private static final int END = 1;
    private static final int ERROR = 2;
    private static final int REFRESH = 3;
    private static final int START = 0;
    
    private SharedPreferences mPrefs;
    
    private static final String TAG = "AuroraPrivacyListActivity";
    private static final int WAIT_CURSOR_START = 1230;
    private static final long WAIT_CURSOR_DELAY_TIME = 500;
    private static int QUERY_TIMEOUT = 120;
    private boolean isFinished;
    private static AuroraActionBar mActionBar;
    private AuroraPrivateCallContactListAdapter mAdapter;
    private Context mContext;
    private long mCurrentPrivacyAccountId;
    private boolean mDeleteContactsFromDB;

    private AuroraListView mListView;
    private TextView mLoadingContact;
    private View mLoadingContainer;
    private TextView mNoContactsEmptyView;
    private ProgressBar mProgress;
    private QueryHandler mQueryHandler;
    private ContactsUtils.AuroraContactsProgressDialog mSaveProgressDialog;
    
    private final Handler mHandler = new Handler() {
            
            public void handleMessage(Message msg) {
                    
                    switch(msg.what) {
                    case WAIT_CURSOR_START: {
                    	Log.i(TAG, "start WAIT_CURSOR_START !isFinished : "
                                + !isFinished);
                        if (!isFinished) {
                            mLoadingContainer.setVisibility(View.VISIBLE);
                            mLoadingContact.setVisibility(View.VISIBLE);
                            mProgress.setVisibility(View.VISIBLE);
                        } else {
                            mLoadingContainer.setVisibility(View.GONE);
                            mLoadingContact.setVisibility(View.GONE);
                            mProgress.setVisibility(View.GONE);
                        }
                        
                    	break;
                    }
                    
                    case START: {
                        if (!isFinishing()) {
                            if (null == mSaveProgressDialog) {
                                mSaveProgressDialog = new ContactsUtils.AuroraContactsProgressDialog(mContext, AuroraProgressDialog.THEME_AMIGO_FULLSCREEN);
                            }
                            mSaveProgressDialog.setTitle(R.string.aurora_save_group_dialog_title);
                            mSaveProgressDialog.setIndeterminate(false);
                            mSaveProgressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
                            try {
                                mSaveProgressDialog.show();
                            } catch (Exception e) {
                                
                            }
                        }
                        break;
                    }
                    
                    case END: {
                        if (!isFinishing() 
                                && null != mSaveProgressDialog && mSaveProgressDialog.isShowing()) {
                            try {
                                mSaveProgressDialog.dismiss();
                                mSaveProgressDialog = null;
                                finish();
                            } catch (Exception e) {
                                
                            }
                        }
                        break;
                    }
                    
                    case ERROR: {
                    	ContactsUtils.toastManager(mContext, R.string.aurora_sim_not_ready);
                    	finish();
                    	break;
                    }
                    
                    case REFRESH: {
                    	isFinished = true;
        				
        				if (mAdapter.getCount() <= 0) {
        					mNoContactsEmptyView.setVisibility(View.VISIBLE);
        				} else {
        					mNoContactsEmptyView.setVisibility(View.GONE);
        				}
        				
                        break;
                    }
                    
                    }
                    
                    super.handleMessage(msg);
                }
            
        };
    
    
    protected void onCreate(Bundle savedState) {
    	this.requestWindowFeature(Window.FEATURE_NO_TITLE);
        super.onCreate(savedState);
        
        mCurrentPrivacyAccountId = AuroraPrivacyUtils.mCurrentAccountId;
        if(mCurrentPrivacyAccountId <= 0) {
            finish();
            return;
        }
        mContext = this;
        setAuroraContentView(R.layout.aurora_sim_contact_list_content_3rd, AuroraActionBar.Type.Normal);
        initActionBar();
        mAdapter = new AuroraPrivateCallContactListAdapter(mContext);
    	mQueryHandler = new QueryHandler(this);
        initView();
        ContactsApplication.mPrivacyActivityList.add(this);
        
    }
    
    public void onStart() {
        super.onStart();
        startQuery();
        Log.e("wangth", "current privacy account id = " + mCurrentPrivacyAccountId);
    }
    
    private void initView() {
    	mNoContactsEmptyView = (TextView)findViewById(
                R.id.no_contacts);
    	mNoContactsEmptyView.setText(mContext.getString(R.string.aurora_no_privacy_contacts));
    	
    	mLoadingContainer = findViewById(R.id.loading_container);
        mLoadingContainer.setVisibility(View.GONE);
        mLoadingContact = (TextView)findViewById(
                R.id.loading_contact);
        mLoadingContact.setVisibility(View.GONE);
        mProgress = (ProgressBar)findViewById(
                R.id.progress_loading_contact);
        mProgress.setVisibility(View.GONE);
        
        isFinished = false;
        mHandler.sendMessageDelayed(mHandler.obtainMessage(WAIT_CURSOR_START),
                WAIT_CURSOR_DELAY_TIME);
        
        mListView = (AuroraListView)findViewById(android.R.id.list);
        mListView.setFastScrollEnabled(false);
        mListView.setFastScrollAlwaysVisible(false);
	    mListView.auroraSetNeedSlideDelete(false);
	    mListView.setOnItemClickListener(this);
        mListView.setAdapter(mAdapter);
    }
    
    private void startQuery() {
    	new Thread(new Runnable() {
			
			@Override
			public void run() {
				int i = 0;
				while(true) {
					if (AuroraPrivacyUtils.mIsServiceConnected) {
						break;
					}
					
					try {
						Thread.sleep(10);
						i++;
					} catch (Exception e) {
						e.printStackTrace();
					}
					
					if (i > 15) {
						break;
					}
				}
				
				Uri uri = Contacts.CONTENT_URI;
		    	Log.i(TAG, "current privacy account id = " + AuroraPrivacyUtils.mCurrentAccountId 
		    			+ "  AuroraPrivacyUtils.mIsServiceConnected = " + AuroraPrivacyUtils.mIsServiceConnected);
		    	
		    	String selection = "is_privacy=" + AuroraPrivacyUtils.mCurrentAccountId;
		    	mQueryHandler.startQuery(1, null, uri, AuroraPrivacyContactListAdapter.CONTACT_PROJECTION_PRIMARY, selection, null, Contacts.SORT_KEY_PRIMARY);
			}
		}).start();
    }
    
    private final class QueryHandler extends AsyncQueryHandler {
		private final WeakReference<AuroraPrivateSettingListActivity> mActivity;

		/**
		 * Simple handler that wraps background calls to catch
		 * {@link SQLiteException}, such as when the disk is full.
		 */
		protected class CatchingWorkerHandler extends
				AsyncQueryHandler.WorkerHandler {
			public CatchingWorkerHandler(Looper looper) {
				super(looper);
			}

			@Override
			public void handleMessage(Message msg) {
				try {
					// Perform same query while catching any exceptions
					super.handleMessage(msg);
				} catch (SQLiteDiskIOException e) {
					Log.w(TAG, "Exception on background worker thread", e);
				} catch (SQLiteFullException e) {
					Log.w(TAG, "Exception on background worker thread", e);
				} catch (SQLiteDatabaseCorruptException e) {
					Log.w(TAG, "Exception on background worker thread", e);
				}
			}
		}

		@Override
		protected Handler createHandler(Looper looper) {
			// Provide our special handler that catches exceptions
			return new CatchingWorkerHandler(looper);
		}

		public QueryHandler(Context context) {
			super(context.getContentResolver());
			mActivity = new WeakReference<AuroraPrivateSettingListActivity>(
					(AuroraPrivateSettingListActivity) context);
		}

		@Override
		protected void onQueryComplete(int token, Object cookie, Cursor cursor) {
			final AuroraPrivateSettingListActivity activity = mActivity.get();
			if (activity != null && !activity.isFinishing()) {
				final AuroraPrivateCallContactListAdapter adapter = mAdapter;
				adapter.changeCursor(cursor);
				
				isFinished = true;
				mHandler.sendEmptyMessage(WAIT_CURSOR_START);
				
				if (cursor == null) {
					Log.e(TAG, "onQueryCompleted - cursor is null");
					mNoContactsEmptyView.setVisibility(View.VISIBLE);
					return;
				}
                
				if (cursor.getCount() == 0) {
					mNoContactsEmptyView.setVisibility(View.VISIBLE);
				} else {
					mNoContactsEmptyView.setVisibility(View.GONE);
				}
				
//				if (AuroraPrivacyUtils.mPrivacyContactsNum != cursor.getCount()) {
//					AuroraPrivacyUtils.mPrivacyContactsNum = cursor.getCount();
//					AuroraPrivacyUtils.setPrivacyNum(mContext,
//							"com.android.contacts.activities.AuroraPrivateSettingListActivity", 
//							AuroraPrivacyUtils.mPrivacyContactsNum, 
//							AuroraPrivacyUtils.mCurrentAccountId);
//				}
				
                Log.i(TAG, "onQueryCompleted - Count:" + cursor.getCount());
//                if (cursor.getCount() > 0) {
//                	mPrefs = AuroraPreferenceManager.getDefaultSharedPreferences(mContext);
//                	boolean hasGotoSetting = mPrefs.getBoolean(GOTO_PRIVACY_MANAGER_SETTING, false);
//                	if (!hasGotoSetting) {
//                		mPrefs.edit().putBoolean(GOTO_PRIVACY_MANAGER_SETTING, true).apply();
//                    	checkSetting();
//                	}
//                }
			} else {
				cursor.close();
			}
		}
	}
    
    protected void onDestroy() {
        super.onDestroy();
        mAdapter.changeCursor(null);
        if (ContactsApplication.sIsAuroraPrivacySupport) {
        	ContactsApplication.mPrivacyActivityList.remove(this);
        }
    }
    
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        switch(keyCode) {
            case KeyEvent.KEYCODE_BACK:
            {
                finish();
                break;
            }
        }
        return super.onKeyDown(keyCode, event);
    }
    
    public void onItemClick(AdapterView<?> arg0, View arg1, int arg2, long arg3) {
        Uri uri = mAdapter.getContactUri(arg2);
        Intent intent = new Intent();
        intent.putExtra("name", mAdapter.getName(arg2));
        intent.setClassName("com.android.contacts", "com.android.contacts.auroraprivate.PrivateNotificationSettings");
        intent.putExtra("contactUri", uri);
        try {
            startActivity(intent);
            return;
        } catch(ActivityNotFoundException e) {
            e.printStackTrace();
        }
    }
    
    private void initActionBar() {
        mActionBar = getAuroraActionBar();
        mActionBar.setTitle(R.string.private_incoming_call);
    }
    

	@Override
	public void onResume() {
		super.onResume();
		mListView.auroraOnResume(); 
	}
	
	@Override
	public void onPause() {
		super.onPause();
		mListView.auroraOnPause(); 
	}
	
}
