package com.gionee.horoscope;//Gionee <jiating><2013-05-29> modify for CR00000000 begin /** * @author jiating * Horoscope class */import static com.gionee.astro.GNAstroUtils.INDEX_ARIES;import static com.gionee.astro.GNAstroUtils.KEY_ASTRO_INDEX;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.List;import aurora.widget.AuroraActionBar;import aurora.app.AuroraActivity;import android.app.Fragment;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.graphics.BitmapFactory;import android.graphics.Matrix;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.speech.RecognizerIntent;import android.support.v13.app.FragmentPagerAdapter;import android.support.v4.view.ViewPager;import android.support.v4.view.ViewPager.OnPageChangeListener;import android.text.format.Time;import android.util.DisplayMetrics;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.View.OnClickListener;import android.view.ViewGroup.LayoutParams;import android.view.animation.Animation;import android.view.animation.TranslateAnimation;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.RelativeLayout;import android.widget.TextView;import com.android.calendar.R;import com.android.calendar.event.EditEventFragment;import com.gionee.astro.GNAstroPickerActivity;import com.gionee.astro.GNAstroUtils;//Gionee <jiangxiao> <2013-07-01> add for CR00832082 beginimport android.animation.Animator;import android.animation.ObjectAnimator;import android.animation.AnimatorListenerAdapter;import android.view.animation.DecelerateInterpolator;//Gionee <jiangxiao> <2013-07-01> add for CR00832082 endpublic class GNHoroscopeActivity extends AuroraActivity {	private ViewPager mPager;// PagerContent	private ImageView cursor;	private RelativeLayout textViewToday, textViewTomorow, textViewWeek;// PagerTitle	private int offset = 0;// Animation move distance	private int currIndex = 0;// PagerCurrentNumber	private int bmpW;// AnimationImageWeight	private TabsAdapter mTabsAdapter;	private RelativeLayout backButton;	private TextView actionTitle;	private ImageView  mChangeHoroscopeButton;	private long selectTime;	private final int TODAY_FRAGMENT=0;	private final int TOMOROW_FRAGMENT=1;	private final int WEEK_FRAGMENT=2;	private int astroType;	private String astroName;	private final int CHANGE_REQUEST_CODE=1;	private int horoscopeIndex=0;	private final int CLICK_TODAY=0;	private final int CLICK_TOMOTOW=1;	private final int CLICK_WEEK=2;	 //Gionee <jiating><2013-06-13> modify for CR00825640 delete Vibrate Item begin	private static boolean isChangeHoroscope=false; //mark wheather change horoscope	 //Gionee <jiating><2013-06-13> modify for CR00825640 delete Vibrate Item end		// Gionee <jiangxiao> <2013-07-01> add for CR00832082  begin	private GNHoroscopePickerView mAstroPickerMenu = null;	// Gionee <jiangxiao> <2013-07-01> add for CR00832082  end		private int []horoscopeIcons={R.drawable.gn_hocospose_baiyang_image_on_off,R.drawable.gn_hocospose_jinniu_image_on_off,R.drawable.gn_hocospose_shuangzi_image_on_off			,R.drawable.gn_hocospose_juxie_image_on_off,R.drawable.gn_hocospose_shizi_image_on_off,R.drawable.gn_hocospose_chunv_image_on_off,			R.drawable.gn_hocospose_tiancheng_image_on_off,R.drawable.gn_hocospose_tianxie_image_on_off,R.drawable.gn_hocospose_sheshou_image_on_off			,R.drawable.gn_hocospose_mojie_image_on_off,R.drawable.gn_hocospose_shuiping_image_on_off,R.drawable.gn_hocospose_shuangyu_image_on_off};				public static final String HOROSCOPE_ACTIVITY_EXTRANAME = "horoscopeTime";			//Gionee <pengwei><2013-06-03> modify for CR00821993 begin	//Gionee <pengwei><2013-06-07> modify for CR00000000 begin	private Handler mAstroHandler = new Handler() {		@Override		public void handleMessage(Message msg) {			Log.i("jiating","GNHoroscopeActivity....mAstroHandler....handleMessage...msg.what"+msg.what);			switch(msg.what) {				case GNAstroUtils.ASTRO_INFO_TYPE_DAY:					// update UI					if(currIndex==TODAY_FRAGMENT){						Log.i("jiating","mAstroHandler....handleMessage....currIndex==TODAY_FRAGMENT");					GNHoroscopeTodayFragment todayFragment=	(GNHoroscopeTodayFragment) getFragment(currIndex);					todayFragment.setViewData(msg);					}else if(currIndex == TOMOROW_FRAGMENT){						GNHoroscopeTomorowFragment todayFragment=	(GNHoroscopeTomorowFragment) getFragment(currIndex);						todayFragment.setViewData(msg);					}										break;				case GNAstroUtils.ASTRO_INFO_TYPE_WEEK:					if(currIndex == WEEK_FRAGMENT){						GNHoroscopeWeekFragment weekFragment=	(GNHoroscopeWeekFragment) getFragment(currIndex);						weekFragment.setViewData(msg);					}					break;				default:					break;			}		}	};	//Gionee <pengwei><2013-06-03> modify for CR00821993 end	public void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		setTheme(R.style.CalendarTheme_WithNoActionBar);		setContentView(R.layout.gn_horoscope_activity_main);				initData(getIntent());		getAstrouInfo();		InitImageView();		InitTextView();		InitViewPager();		initActionBar();		isChangeHoroscope=false;//		Intent intent = new Intent("gn.android.intent.action.APP_START");//		intent.putExtra("appname", "com.android.calendar"); // com.android.browser 为app名称//		sendBroadcast(intent);		// Gionee <jiangxiao> <2013-07-01> add for CR00832082  begin		mAstroPickerMenu = (GNHoroscopePickerView) this.findViewById(R.id.horoscope_picker_view);		// Gionee <jiangxiao> <2013-07-01> add for CR00832082  end	}		private void initData(Intent intent){		horoscopeIndex =GNAstroUtils.getAstroIndexFromPref(GNHoroscopeActivity.this);		astroName=GNAstroUtils.getAstroNameById(horoscopeIndex);		selectTime=intent.getLongExtra(HOROSCOPE_ACTIVITY_EXTRANAME, System.currentTimeMillis());	}	 //Gionee <jiating><2013-06-13> modify for CR00825640 delete Vibrate Item begin	public static boolean isChangeHoroscope() {		return isChangeHoroscope;	}			 //Gionee <jiating><2013-06-13> modify for CR00825640 delete Vibrate Item end		public static void setChangeHoroscope(boolean isChangeHoroscope) {		GNHoroscopeActivity.isChangeHoroscope = isChangeHoroscope;	}	@Override	protected void onResume() {		// TODO Auto-generated method stub		super.onResume();		Log.i("jiating","GNHoroscopeActivity....onResume");		// Gionee <jiangxiao> <2013-07-01> delete for CR00832082 begin	    //Gionee <jiating><2013-06-13> modify for CR00825640 delete Vibrate Item begin			// int tempHoroscopeIndex=GNAstroUtils.getAstroIndexFromPref(GNHoroscopeActivity.this);		// if( horoscopeIndex!=tempHoroscopeIndex){		// isChangeHoroscope=true;		// Log.i("jiating","GNHoroscopeActivity....onResume..clickButton...changeHoroscope");		// horoscopeIndex=tempHoroscopeIndex;		// mChangeHoroscopeButton.setBackgroundResource(horoscopeIcons[horoscopeIndex]);		// astroName=GNAstroUtils.getAstroNameById(horoscopeIndex);		// getAstrouInfo();		// }else if(		// horoscopeIndex==GNAstroUtils.getAstroIndexFromPref(GNHoroscopeActivity.this)){		// Log.i("jiating","GNHoroscopeActivity....onResume..clickButton...noChangeHoroscope");		// isChangeHoroscope=false;		// }	    //Gionee <jiating><2013-06-13> modify for CR00825640 delete Vibrate Item end		// Gionee <jiangxiao> <2013-07-01> delete for CR00832082 end	}		// Gionee <jiangxiao> <2013-07-01> add for CR00832082 begin	public void updateHoroscopeIcon() {		int tempHoroscopeIndex=GNAstroUtils.getAstroIndexFromPref(GNHoroscopeActivity.this);		if(horoscopeIndex!=tempHoroscopeIndex) {			isChangeHoroscope=true;			Log.i("jiating","GNHoroscopeActivity....onResume..clickButton...changeHoroscope");			horoscopeIndex=tempHoroscopeIndex;			mChangeHoroscopeButton.setBackgroundResource(horoscopeIcons[horoscopeIndex]);			astroName=GNAstroUtils.getAstroNameById(horoscopeIndex);			getAstrouInfo();		} else if(horoscopeIndex==GNAstroUtils.getAstroIndexFromPref(GNHoroscopeActivity.this)) {			Log.i("jiating","GNHoroscopeActivity....onResume..clickButton...noChangeHoroscope");			isChangeHoroscope=false;		}				flipOutHoroscopeIcon();	}		private static final long DURATION_ROTATE = 400;		private void flipOutHoroscopeIcon() {		final ObjectAnimator inAnim = ObjectAnimator.ofFloat(mChangeHoroscopeButton, "RotationY", -90.0f, 0);		inAnim.setInterpolator(new DecelerateInterpolator());		inAnim.setDuration(DURATION_ROTATE);		inAnim.addListener(new AnimatorListenerAdapter() {			@Override            public void onAnimationStart(Animator anim) {				mChangeHoroscopeButton.setVisibility(View.VISIBLE);			}		});		inAnim.start();	}	// Gionee <jiangxiao> <2013-07-01> add for CR00832082 end		@Override	protected void onPause() {		// TODO Auto-generated method stub		super.onPause();		Log.i("jiating","GNHoroscopeActivity..onPause..");			}		public long getSelectTime(){		return selectTime;	}	private void initActionBar() {		// TODO Auto-generated method stub		actionTitle = (TextView) findViewById(R.id.actionbar_title);		mChangeHoroscopeButton=(ImageView)findViewById(R.id.change_horoscope_button);		mChangeHoroscopeButton.setBackgroundResource(horoscopeIcons[horoscopeIndex]);		backButton = (RelativeLayout) findViewById(R.id.gn_horoscope_actionbar_back);		backButton.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View v) {				// TODO Auto-generated method stub				finish();			}		});				mChangeHoroscopeButton.setOnClickListener(new OnClickListener() {						@Override			public void onClick(View v) {				// TODO Auto-generated method stub				Log.i("jiating","GNHoroscopeActivity..mChangeHoroscopeButton..Click");							// Gionee <jiangxiao> <2013-07-01> add for CR00832082  begin                // Intent intent=new Intent(GNHoroscopeActivity.this, GNAstroPickerActivity.class);                // GNHoroscopeActivity.this.startActivity(intent);				mChangeHoroscopeButton.setVisibility(View.INVISIBLE);				mAstroPickerMenu.setVisibility(View.VISIBLE);				mAstroPickerMenu.startUnfoldAnimation();				// Gionee <jiangxiao> <2013-07-01> add for CR00832082  end			}		});	}	//	@Override//	protected void onActivityResult(int requestCode, int resultCode, Intent data) {//		// TODO Auto-generated method stub//		Log.i("jiating","GNHoroscopeActivity..onActivityResult");//		if(resultCode ==AuroraActivity.RESULT_OK){//	 		Log.i("jiating","GNHoroscopeActivity..onActivityResult1111111");//			switch (requestCode) {//			case CHANGE_REQUEST_CODE://				int selectAstro=data.getIntExtra(GNAstroUtils.KEY_ASTRO_INDEX, GNAstroUtils.INDEX_ARIES);//				Log.i("jiating","GNHoroscopeActivity..onActivityResult...selectAstro="+selectAstro+"11111111==="+GNAstroUtils.getAstroIndexFromPref(GNHoroscopeActivity.this));//				astroName=GNAstroUtils.getAstroNameById(selectAstro);//				mChangeHoroscopeButton.setVisibility(View.VISIBLE);//				mChangeHoroscopeButton.setBackgroundResource(GNAstroUtils.getAstroIndexFromPref(GNHoroscopeActivity.this));//				getAstrouInfo();//				//			}//			//	 	}//	}	/**	 * Init tabtitle	 */	private void InitTextView() {		textViewToday = (RelativeLayout) findViewById(R.id.text_today_button);		textViewTomorow = (RelativeLayout) findViewById(R.id.text_tomorow_button);		textViewWeek = (RelativeLayout) findViewById(R.id.text_week_button);		textViewToday.setOnClickListener(new MyOnClickListener(CLICK_TODAY));		textViewTomorow.setOnClickListener(new MyOnClickListener(CLICK_TOMOTOW));		textViewWeek.setOnClickListener(new MyOnClickListener(CLICK_WEEK));	}	public Fragment getFragment(int tabIndex) {		return mTabsAdapter.getItem(tabIndex);	}		//Gionee <pengwei><2013-06-03> modify for CR00821993 begin	public void getAstrouInfo(){		Message response = null;				Time time=new Time();		time.set(selectTime);		time.normalize(true);		mAstroHandler.removeMessages(GNAstroUtils.ASTRO_INFO_TYPE_WEEK);		mAstroHandler.removeMessages(GNAstroUtils.ASTRO_INFO_TYPE_DAY);		Log.i("jiating","GNHoroscopeActivity....getAstrouInfo,,.initData.... date.year,(date.month + 1),date.monthDay"+ time.year+(time.month + 1)+time.monthDay);			if(TODAY_FRAGMENT==currIndex){				//get Today Astro info				time.set(selectTime);				time.normalize(true);				astroType=GNAstroUtils.ASTRO_INFO_TYPE_DAY;				response = mAstroHandler.obtainMessage(GNAstroUtils.ASTRO_INFO_TYPE_DAY);			}else  if(TOMOROW_FRAGMENT==currIndex){				//get Tomorrow Astro info								 time.set(selectTime);				 time.monthDay++;				 time.normalize(true); 				 astroType=GNAstroUtils.ASTRO_INFO_TYPE_DAY;				 response = mAstroHandler.obtainMessage(GNAstroUtils.ASTRO_INFO_TYPE_DAY);			}else if(WEEK_FRAGMENT==currIndex){				//get Week Astro info				time.set(selectTime);				time.normalize(true);				astroType=GNAstroUtils.ASTRO_INFO_TYPE_WEEK;				response = mAstroHandler.obtainMessage(GNAstroUtils.ASTRO_INFO_TYPE_WEEK);			}			if (response != null) {						Log.v("jiating","GNHoroscopeActivity....getAstrouInfo---response == " + response+"astroType="+astroType);			GNAstroUtils.getAstroInfo(astroName, time.year,(time.month + 1),time.monthDay,					astroType,GNHoroscopeActivity.this,response);			}					}	//Gionee <pengwei><2013-06-03> modify for CR00821993 end			/**	 * Init ViewPager	 */	private void InitViewPager() {		mPager = (ViewPager) findViewById(R.id.iv);		mTabsAdapter = new TabsAdapter(this, mPager);		mTabsAdapter.addTab(GNHoroscopeTodayFragment.class, null);		mTabsAdapter.addTab(GNHoroscopeTomorowFragment.class, null);		mTabsAdapter.addTab(GNHoroscopeWeekFragment.class, null);		mPager.setCurrentItem(0);		mPager.setAdapter(mTabsAdapter);		mPager.setOnPageChangeListener(new MyOnPageChangeListener());	}	/**	 * Init cursor image 	 */	private void InitImageView() {		cursor = (ImageView) findViewById(R.id.cursor);		bmpW = BitmapFactory.decodeResource(getResources(), R.drawable.gn_tab_jiao)				.getWidth();// get cursor image width		DisplayMetrics dm = new DisplayMetrics();		getWindowManager().getDefaultDisplay().getMetrics(dm);		int screenW = dm.widthPixels;// get window pixels width		offset = (screenW / 3 - bmpW) / 2;// get move diatance		Matrix matrix = new Matrix();		matrix.postTranslate(offset, 0);		cursor.setImageMatrix(matrix);// set cursor init position		Log.v("jiating","GNHoroscopeActivity....InitImageView..bmpW="+bmpW+"screenW="+screenW+"offset="+offset	);		}		@Override	protected void onDestroy() {		// TODO Auto-generated method stub		super.onDestroy();//		Intent intent = new Intent("gn.android.intent.action.APP_EXIT");//		intent.putExtra("appname", "com.android.calendar");//		sendBroadcast(intent);	}		/**	 * tabTitle click listener	 */	public class MyOnClickListener implements View.OnClickListener {	       int index;		public MyOnClickListener(int i) {			index = i;		}		@Override		public void onClick(View v) {			mPager.setCurrentItem(index);					}	};	/**	 * Page change Listener	 */	public class MyOnPageChangeListener implements OnPageChangeListener {		int one = offset * 2 + bmpW;// page 1 to page2 distance		int two = one * 2;// page1 to page 3 distance		@Override		public void onPageSelected(int arg0) {			Animation animation = null;			switch (arg0) {			case TODAY_FRAGMENT:				Log.i("jiating","GNHoroscopeActivity..onPageSelected..TODAY_FRAGMENT..currIndex="+currIndex+"one="+one+"two="+two);				if (currIndex == TOMOROW_FRAGMENT) {					animation = new TranslateAnimation(one, 0, 0, 0);				} else if (currIndex == WEEK_FRAGMENT) {					animation = new TranslateAnimation(two, 0, 0, 0);				}				break;			case TOMOROW_FRAGMENT:				Log.i("jiating","GNHoroscopeActivity..onPageSelected..TOMOROW_FRAGMENT..currIndex="+currIndex+"one="+one+"two="+two);				if (currIndex == TODAY_FRAGMENT) {					animation = new TranslateAnimation(offset, one, 0, 0);				} else if (currIndex == WEEK_FRAGMENT) {					animation = new TranslateAnimation(two, one, 0, 0);				}				break;			case WEEK_FRAGMENT:				Log.i("jiating","GNHoroscopeActivity..onPageSelected..WEEK_FRAGMENT..currIndex="+currIndex+"one="+one+"two="+two);				if (currIndex == TODAY_FRAGMENT) {					animation = new TranslateAnimation(offset, two, 0, 0);				} else if (currIndex == TOMOROW_FRAGMENT) {					animation = new TranslateAnimation(one, two, 0, 0);				}				break;			}			currIndex = arg0;			animation.setFillAfter(true);// True:cursor stop animation end position			animation.setDuration(200);			getAstrouInfo();			cursor.startAnimation(animation);		}		@Override		public void onPageScrolled(int arg0, float arg1, int arg2) {		}		@Override		public void onPageScrollStateChanged(int arg0) {		}	}	public static class TabsAdapter extends FragmentPagerAdapter {		private final Context mContext;		private final ViewPager mViewPager;		private final ArrayList<TabInfo> mTabs = new ArrayList<TabInfo>();		static final class TabInfo {			private final Class<?> clss;			private final Bundle args;			private Fragment fragment;			TabInfo(Class<?> _class, Bundle _args) {				clss = _class;				args = _args;			}		}		public TabsAdapter(AuroraActivity activity, ViewPager pager) {			super(activity.getFragmentManager());			mContext = activity;			mViewPager = pager;			mViewPager.setAdapter(this);		}		public void addTab(Class<?> clss, Bundle args) {			TabInfo info = new TabInfo(clss, args);			mTabs.add(info);			notifyDataSetChanged();		}		@Override		public int getCount() {			return mTabs.size();		}		@Override		public Fragment getItem(int position) {			Log.i("jiating", " getItem()__position" + position);			TabInfo info = mTabs.get(position);			if (info.fragment == null) {				info.fragment = Fragment.instantiate(mContext,						info.clss.getName(), info.args);			}			return info.fragment;		}	}}//Gionee <pengwei><2013-06-07> modify for CR00000000 end//Gionee <jiating><2013-05-29> modify for CR00000000 end